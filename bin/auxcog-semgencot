#! /bin/sh

# Generate an Isabelle theory for the Gencot lemma library for the HOL-tupled shallow embedding. Intended to be applied to 
# X_ShallowShared_Tuples.thy generated by Cogent.
# This is a filter from stdin to stdout with an additional filename argument.
# The argument file must contain a sequence of lines of the form
#   <id>: <id>

if [ $# != 1 ]
then
  echo "Error: Single file name expected as argument."
  exit 0
fi

awk \
'BEGIN { 
   cfile = ARGV[1]; delete ARGV[1]
   gencot_semantics = "CArray"
   common_semantics = "common"
   gencot_tuples = "CPointer Default MayNull Memory"
   common_tuples = ""
   nr_sizes = 0
   nr_namedsizes = 0
   nr_afuns = split("siz getArr setArr modifyArr modrefArr toCAES fromCAES rotoCAES rofromCAES mkFxdArr arr_update", afuns)
   nr_lems = split("wlsdRules arrpRules sem_C errsem_C transCAES defs transMk constMk", lems)
 } 
{
  if ($1 == "theory" && NF == 2) {
    if ($2 ~ /_ShallowShared_Tuples$/) { prfnam = substr($2,1,length($2)-21) }
    else {
      printf("Error: auxcog-semgencot input must be a theory named X_ShallowShared_Tuples for some X.\n")
      exited = 1
      exit 1
    }
    printf("theory %s_Shallow_Gencot_Semantics\n", prfnam)
    printf("  imports \"%s_ShallowConsts_Desugar_Tuples\"\n", prfnam)
    while ((getline cline < cfile) > 0) { 
      if (2 == split(cline,a)) { 
        if (a[1] == "gencot:" && match(gencot_semantics,a[2])) printf("  \"Gencot_%s_Semantics\"\n", a[2])
        if (a[1] == "common:" && match(common_semantics,a[2])) printf("  \"CogentCommon_%s_Semantics\"\n", a[2])
        if (a[1] == "gencot:" && match(gencot_tuples,a[2])) printf("  \"Gencot_%s_Tuples\"\n", a[2])
        if (a[1] == "common:" && match(common_tuples,a[2])) printf("  \"CogentCommon_%s_Tuples\"\n", a[2])
      } 
    }
    close(cfile)
    printf("  \"Gencot_SemanticsSupport\"\n")
    printf("begin\n\n")
  } else if ($1 == "type_synonym" && substr($3,1,4) == "CArr" && $6 == "list") {
    size = substr($3,5,length($3)-12)
    nr_sizes += 1
    sizes[nr_sizes] = size
    if (size ~ /^[0-9]*$/) { namedsize = 0; sizeval = size }
    else { namedsize = 1; sizeval = substr(size,2,length(size)-2)}
    if (namedsize) {
      nr_namedsizes += 1
      namedsizes[nr_namedsizes] = sizeval
      printf("lemmas [simp] = cogent_%s_def\n",sizeval)
      printf("definition \"%s \\<equiv> (unat cogent_%s)\"\n", sizeval, sizeval)
      printf("interpretation %s_Rules: NamedSizeRules cogent_%s %s \"(0::32 word)\"\n", sizeval, sizeval, sizeval)
      printf("  by(unfold_locales,simp_all add: %s_def)\n\n", sizeval)
    }
    printf("interpretation FxdArr%s: FxdArr arr%s\\<^sub>f CArr%s.make %s \"0::32 word\"\n", size, size, size, sizeval)
    printf("  by (unfold_locales, unfold CArr%s.make_def", size)
    if (namedsize) printf(", auto simp add: %s_def", sizeval)
    printf(")\n")
    printf("adhoc_overloading\n")
    printf("      arr arr%s\\<^sub>f\n",size)
    printf("  and carr CArr%s.make\n",size)
    for (i=1; i <= nr_afuns; i++) printf("  and %s FxdArr%s.%s\n", afuns[i], size, afuns[i])
    printf("  and wlsd \"wlsdGen arr%s\\<^sub>f FxdArr%s.siz\"\n", size, size)
    printf("  and arrp \"arrpGen arr%s\\<^sub>f\"\n", size)
    printf("  and prsvwlsd \"prsvwlsdGen arr%s\\<^sub>f FxdArr%s.siz\"\n", size, size)
    printf("  and prsvarrp \"prsvarrpGen arr%s\\<^sub>f\"\n", size)
    printf("\n")
  }
}
END {
  if (exited == "") {
    if (nr_namedsizes > 0) {
      printf("lemmas sizFxdArr_defs =\n")
      for (i=1; i<=nr_namedsizes; i++) printf("  %s_def\n", namedsizes[i])
      printf("\n")
      printf("lemmas to_sizFxdArr[simplified,symmetric] =\n")
      for (i=1; i<=nr_namedsizes; i++) printf("  %s_Rules.to_C\n", namedsizes[i])
      printf("\n")
    }
    if (nr_sizes > 0) {
      for (i=1; i<=nr_lems; i++) {
        printf("lemmas %sFxdArr =\n", lems[i])
        for (j=1; j<=nr_sizes; j++) printf("  FxdArr%s.%s\n", sizes[j], lems[i])
        printf("\n")
      }
    }
    print "end"
  }
}' $1

# documentation:
#
# The generated theory has the following form:
# - the name of the input theory must be X_ShallowShared_Tuples.
#   Otherwise an error message is written to stderr.
# - the name of the output theory is X_Shallow_Gencot_Semantics.
# - the output theory imports X_ShallowConsts_Desugar_Tuples
#   and for every line 
#     gencot: id
#   in the argument file for which id is in gencot_tuples or gencot_semantics the theory 
#   Gencot_id_Tuples or Gencot_id_Semantics, respectively, and for every line
#     common: id
#   in the argument file for which id is in common_tuples or common_semantics the theory 
#   CogentCommon_id_Tuples or CogentCommon_id_Semantics, respectively.
# - the output theory contains for every type synonym definition of the form
#     type_synonym 'el CArr<size>\<^sub>T = 'el list CArr<size>
#   in the input theory a section of the following form. The <size> my be either specified by a named 
#   constant <sizeval>, or by a number literal <sizeval>. The section always contains a locale interpretation 
#   of the form
#     interpretation FxdArr<size>: FxdArr arr<size>\<^sub>f CArr<size>.make <sizeval> "0::32 word"
#       by (unfold_locales, unfold CArr<size>.make_def [, auto simp add: <sizeval>_def])
#   where the auto part is only present in case of a named constant, and an adhoc overloading of the form
#     adhoc_overloading 
#           arr ...
#       and carr ...
#       ...
#   for all array operations and predicates
#     arr, carr, siz, getArr, setArr, modifyArr, modrefArr, toCAES, fromCAES, rotoCAES, rofromCAES,
#     mkFxdArr, arr_update, wlsd, arrp, prsvwlsd, prsvarrp
#   If the size is a named constant, the section additionally adds the word constant definition to the simpset
#     lemmas [simp] = cogent_<sizeval>_def
#   and defines a nat constant
#     definition "<sizeval> \<equiv> (unat cogent_<sizeval>)"
#   and contains the locale interpretation
#     interpretation <sizeval>_Rules: NamedSizeRules cogent_<sizeval> <sizeval> "(0::32 word)"
#       by(unfold_locales,simp_all add: unat_of_nat <sizeval>_def)
#   After the sections, if there have been named constants for size specifications, the output theory contains 
#   two lemma collections of the form
#     lemmas sizFxdArr_defs = <sizeval1>_def <sizeval2>_def ...
#     lemmas to_sizFxdArr[simplified,symmetric] = <sizeval1>_Rules.to_C <sizeval2>_Rules.to_C ...
#   and always lemma collections of the form
#     lemmas <lem>FxdArr = FxdArr<size1>.<lem> FxdArr<size2>.<lem> ...
#   for all <sizei>, and all following lemmas or lemma collections <lem>:
#     wlsdRules arrpRules sem_C errsem_C transCAES defs transMk constMk
#
# The list of theories which can be imported is specified by the string variables 
# gencot_tuples, gencot_semantics, common_tuples, and common_semantics as a sequence of words separated by blanks.
# The list of array operations and predicates is specified in the array afuns of length nr_afuns,
# the list of array lemmas is specified in the array lems of length nr_lems.
#
# The input is read until a line of the form "theory <name>" is found. Using the <name>, 
# the output theory header is generated. The argument file is read using getline to 
# generate the corresponding imports.
# 
# Then the rest of the input is read and for each matching type synonym definition the 
# interpretation and adhoc overloading is generated and the size is stored in the array sizes,
# counting the entries in nr_sizes. If the size is specified by a named constant, the array namedsizes
# and the counter nr_namedsizes is additionally used for the <sizeval>s.
# 
# In the END rule if nr_namedsizes is not 0 the two specific lemma collections are generated. Then, if nr_sizes 
# is not 0 the other lemma collections are generated and the theory is finished by an "end".
#
# Implementation in awk:
# - The filename argument for the comment file must be copied and removed from the argument list ARGV
#   to prevent its processing as normal input to awk. The argument file is explicitly read by getline.
# - The theory lists gencot_tuples, gencot_semantics, common_tuples, and common_semantics are defined in the BEGIN rule.
# - The function and lemma arrays are filled in the BEGIN rule by splitting a string of words.
# - Since in '...' the ' cannot be escaped, we avoid using it in match expressions.
# - To test whether an entry from the argument file is a member of a theory list the awk builtin function
#   match is used. The theory list is specified as the string, the entry is used as regexp. If a match
#   is found the function returns the index of the first position of the match (which is equivalent to true),
#   otherwise it returns 0 (which is equivalent to false). Note that this works only if no theory name 
#   is a substring of another theory name in the list.
# - To test whether a size specification is a literal or a named constant the regexp /^[0-9]*$/ is used.
