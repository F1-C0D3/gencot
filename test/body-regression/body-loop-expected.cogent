cogent_lf1 : ( U32, U32 ) -> U32
cogent_lf1 (a
           , b) =
   let ((_, _, cr'), a) = let ((cc'
                               , cb'
                               , cr')
                              , a) = let v1' = let v1' = 0
            in v1'
         and (c', a) = let i = v1'
            and (c', a, i) = let ((_
                                  , _
                                  , cr')
                                 , a
                                 , i) = repeat #{ n = let v' = b
                                                in v'
                                                , stop = \#{ acc = ((_, cb', _)
                                                                   , a
                                                                   , i)
                                                           , obsv = b } => let v2' = let v2' = i
                                                   and v3' = b
                                                   and v2' = v2' < v3'
                                                   in v2'
                                                in cb' || not v2'
                                                , step = \#{ acc = (_, a, i)
                                                           , obsv = b } => let ((cc'
                                                                                , cb'
                                                                                , cr')
                                                                               , a) = let (v'
                                                                                          , a) = let v1' = 2
                                                      and v' = a
                                                      and v' = v' * v1'
                                                      and (v', a) = (v', v')
                                                      in (v', a)
                                                   in ((False, False, None), a)
                                                in if cb'
                                                   then ((cc', cb', cr'), a, i)
                                                   else let (v4'
                                                            , i) = let v5' = 1
                                                         and v4' = i
                                                         and v4' = v4' + v5'
                                                         and (v4', i) = (i, v4')
                                                         in (v4', i)
                                                      in ((False, False, None)
                                                         , a
                                                         , i)
                                                , acc = ((False, False, None)
                                                        , a
                                                        , i)
                                                , obsv = b }
               in ((cr' /= None
                   , cr' /= None
                   , cr')
                  , a
                  , i)
            in (c', a)
         in (c', a)
      in if cc'
         then ((cc', cb', cr'), a)
         else
            let c' = let v' = let v' = a
                  in v'
               in (True, True, Some v')
            in (c', a)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf2 : U32 -> U32
cogent_lf2 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let ((_, _, cr')
                                         , i) = repeat #{ n = let v' = 5
                                                        in v'
                                                        , stop = \#{ acc = ((_
                                                                            , cb'
                                                                            , _)
                                                                           , i)
                                                                   , obsv = () } => let v1' = let v1' = i
                                                           and v2' = 5
                                                           and v1' = v1' < v2'
                                                           in v1'
                                                        in cb' || not v1'
                                                        , step = \#{ acc = (_
                                                                           , i)
                                                                   , obsv = () } => let (cc'
                                                                                        , cb'
                                                                                        , cr') = (False
                                                                                                 , False
                                                                                                 , None)
                                                        in if cb'
                                                           then ((cc', cb', cr')
                                                                , i)
                                                           else let (v3'
                                                                    , i) = let v4' = 1
                                                                 and v3' = i
                                                                 and v3' = v3' + v4'
                                                                 and (v3'
                                                                     , i) = (i
                                                                            , v3')
                                                                 in (v3', i)
                                                              in ((False
                                                                  , False
                                                                  , None)
                                                                 , i)
                                                        , acc = ((False
                                                                 , False
                                                                 , None)
                                                                , i)
                                                        , obsv = () }
         in ((cr' /= None
             , cr' /= None
             , cr')
            , i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf3 : U32 -> U32
cogent_lf3 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let ((_, _, cr')
                                         , i) = repeat #{ n = let v' = 5
                                                        in v'
                                                        , stop = \#{ acc = ((_
                                                                            , cb'
                                                                            , _)
                                                                           , i)
                                                                   , obsv = () } => let v1' = let v1' = i
                                                           and v2' = 5
                                                           and v1' = v1' < v2'
                                                           in v1'
                                                        in cb' || not v1'
                                                        , step = \#{ acc = (_
                                                                           , i)
                                                                   , obsv = () } => let (cc'
                                                                                        , cb'
                                                                                        , cr') = (True
                                                                                                 , False
                                                                                                 , None)
                                                        in if cb'
                                                           then ((cc', cb', cr')
                                                                , i)
                                                           else let (v3'
                                                                    , i) = let v4' = 1
                                                                 and v3' = i
                                                                 and v3' = v3' + v4'
                                                                 and (v3'
                                                                     , i) = (i
                                                                            , v3')
                                                                 in (v3', i)
                                                              in ((False
                                                                  , False
                                                                  , None)
                                                                 , i)
                                                        , acc = ((False
                                                                 , False
                                                                 , None)
                                                                , i)
                                                        , obsv = () }
         in ((cr' /= None
             , cr' /= None
             , cr')
            , i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf4 : U32 -> U32
cogent_lf4 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let ((_, _, cr')
                                         , i) = repeat #{ n = let v' = 5
                                                        in v'
                                                        , stop = \#{ acc = ((_
                                                                            , cb'
                                                                            , _)
                                                                           , i)
                                                                   , obsv = () } => let v1' = let v1' = i
                                                           and v2' = 5
                                                           and v1' = v1' < v2'
                                                           in v1'
                                                        in cb' || not v1'
                                                        , step = \#{ acc = (_
                                                                           , i)
                                                                   , obsv = () } => let (cc'
                                                                                        , cb'
                                                                                        , cr') = (True
                                                                                                 , True
                                                                                                 , None)
                                                        in if cb'
                                                           then ((cc', cb', cr')
                                                                , i)
                                                           else let (v3'
                                                                    , i) = let v4' = 1
                                                                 and v3' = i
                                                                 and v3' = v3' + v4'
                                                                 and (v3'
                                                                     , i) = (i
                                                                            , v3')
                                                                 in (v3', i)
                                                              in ((False
                                                                  , False
                                                                  , None)
                                                                 , i)
                                                        , acc = ((False
                                                                 , False
                                                                 , None)
                                                                , i)
                                                        , obsv = () }
         in ((cr' /= None
             , cr' /= None
             , cr')
            , i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf5 : U32 -> U32
cogent_lf5 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let ((_, _, cr')
                                         , i) = repeat #{ n = let v' = 5
                                                        in v'
                                                        , stop = \#{ acc = ((_
                                                                            , cb'
                                                                            , _)
                                                                           , i)
                                                                   , obsv = () } => let v1' = let v1' = i
                                                           and v2' = 5
                                                           and v1' = v1' < v2'
                                                           in v1'
                                                        in cb' || not v1'
                                                        , step = \#{ acc = (_
                                                                           , i)
                                                                   , obsv = () } => let (cc'
                                                                                        , cb'
                                                                                        , cr') = let v' = let v' = i
                                                              in v'
                                                           in (True
                                                              , True
                                                              , Some v')
                                                        in if cb'
                                                           then ((cc', cb', cr')
                                                                , i)
                                                           else let (v3'
                                                                    , i) = let v4' = 1
                                                                 and v3' = i
                                                                 and v3' = v3' + v4'
                                                                 and (v3'
                                                                     , i) = (i
                                                                            , v3')
                                                                 in (v3', i)
                                                              in ((False
                                                                  , False
                                                                  , None)
                                                                 , i)
                                                        , acc = ((False
                                                                 , False
                                                                 , None)
                                                                , i)
                                                        , obsv = () }
         in ((cr' /= None
             , cr' /= None
             , cr')
            , i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf6 : U32 -> U32
cogent_lf6 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let ((_, _, cr')
                                         , i) = repeat #{ n = let v' = 5
                                                        and v1' = 1
                                                        and v' = v' + v1'
                                                        in v'
                                                        , stop = \#{ acc = ((_
                                                                            , cb'
                                                                            , _)
                                                                           , i)
                                                                   , obsv = () } => let v2' = let v2' = i
                                                           and v3' = 5
                                                           and v2' = v2' <= v3'
                                                           in v2'
                                                        in cb' || not v2'
                                                        , step = \#{ acc = (_
                                                                           , i)
                                                                   , obsv = () } => let (cc'
                                                                                        , cb'
                                                                                        , cr') = (False
                                                                                                 , False
                                                                                                 , None)
                                                        in if cb'
                                                           then ((cc', cb', cr')
                                                                , i)
                                                           else let (v4'
                                                                    , i) = let v5' = 1
                                                                 and v4' = i
                                                                 and v4' = v4' + v5'
                                                                 and (v4'
                                                                     , i) = (i
                                                                            , v4')
                                                                 in (v4', i)
                                                              in ((False
                                                                  , False
                                                                  , None)
                                                                 , i)
                                                        , acc = ((False
                                                                 , False
                                                                 , None)
                                                                , i)
                                                        , obsv = () }
         in ((cr' /= None
             , cr' /= None
             , cr')
            , i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf7 : U32 -> U32
cogent_lf7 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let (v1'
                                         , i) = let v2' = 12
            and v1' = i
            and v1' = v2'
            and (v1', i) = (v1', v1')
            in (v1', i)
         and (c', i) = let ((_, _, cr')
                           , i) = repeat #{ n = let v' = 12
                                          in v'
                                          , stop = \#{ acc = ((_, cb', _)
                                                             , i)
                                                     , obsv = () } => let v3' = let v3' = i
                                             and v4' = 5
                                             and v3' = v3' > v4'
                                             in v3'
                                          in cb' || not v3'
                                          , step = \#{ acc = (_, i)
                                                     , obsv = () } => let (cc'
                                                                          , cb'
                                                                          , cr') = (False
                                                                                   , False
                                                                                   , None)
                                          in if cb'
                                             then ((cc', cb', cr'), i)
                                             else let (v5', i) = let v6' = 1
                                                   and v5' = i
                                                   and v5' = v5' - v6'
                                                   and (v5', i) = (i, v5')
                                                   in (v5', i)
                                                in ((False, False, None), i)
                                          , acc = ((False, False, None)
                                                  , i)
                                          , obsv = () }
            in ((cr' /= None
                , cr' /= None
                , cr')
               , i)
         in (c', i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf8 : U32 -> U32
cogent_lf8 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let (v2'
                                         , i) = let v3' = 12
            and v2' = i
            and v2' = v3'
            and (v2', i) = (v2', v2')
            in (v2', i)
         and (c', i) = let ((_, _, cr')
                           , i) = repeat #{ n = let v' = 12
                                          and v1' = 1
                                          and v' = v' + v1'
                                          in v'
                                          , stop = \#{ acc = ((_, cb', _)
                                                             , i)
                                                     , obsv = () } => let v4' = let v4' = i
                                             and v5' = 5
                                             and v4' = v4' >= v5'
                                             in v4'
                                          in cb' || not v4'
                                          , step = \#{ acc = (_, i)
                                                     , obsv = () } => let (cc'
                                                                          , cb'
                                                                          , cr') = (False
                                                                                   , False
                                                                                   , None)
                                          in if cb'
                                             then ((cc', cb', cr'), i)
                                             else let (v6', i) = let v7' = 1
                                                   and v6' = i
                                                   and v6' = v6' - v7'
                                                   and (v6', i) = (i, v6')
                                                   in (v6', i)
                                                in ((False, False, None), i)
                                          , acc = ((False, False, None)
                                                  , i)
                                          , obsv = () }
            in ((cr' /= None
                , cr' /= None
                , cr')
               , i)
         in (c', i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf9 : U32 -> U32
cogent_lf9 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let ((_, _, cr')
                                         , i) = repeat #{ n = let v' = 5
                                                        in v'
                                                        , stop = \#{ acc = ((_
                                                                            , cb'
                                                                            , _)
                                                                           , i)
                                                                   , obsv = () } => let v1' = let v1' = i
                                                           and v2' = 5
                                                           and v1' = v1' < v2'
                                                           in v1'
                                                        in cb' || not v1'
                                                        , step = \#{ acc = (_
                                                                           , i)
                                                                   , obsv = () } => let (cc'
                                                                                        , cb'
                                                                                        , cr') = (False
                                                                                                 , False
                                                                                                 , None)
                                                        in if cb'
                                                           then ((cc', cb', cr')
                                                                , i)
                                                           else let (v3'
                                                                    , i) = let v4' = 3
                                                                 and v3' = i
                                                                 and v3' = v3' + v4'
                                                                 and (v3'
                                                                     , i) = (v3'
                                                                            , v3')
                                                                 in (v3', i)
                                                              in ((False
                                                                  , False
                                                                  , None)
                                                                 , i)
                                                        , acc = ((False
                                                                 , False
                                                                 , None)
                                                                , i)
                                                        , obsv = () }
         in ((cr' /= None
             , cr' /= None
             , cr')
            , i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf10 : U32 -> U32
cogent_lf10 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let ((_, _, cr')
                                         , i) = repeat #{ n = let v' = 5
                                                        in v'
                                                        , stop = \#{ acc = ((_
                                                                            , cb'
                                                                            , _)
                                                                           , i)
                                                                   , obsv = () } => let v1' = let v1' = i
                                                           and v2' = 5
                                                           and v1' = v1' < v2'
                                                           in v1'
                                                        in cb' || not v1'
                                                        , step = \#{ acc = (_
                                                                           , i)
                                                                   , obsv = () } => let (cc'
                                                                                        , cb'
                                                                                        , cr') = (False
                                                                                                 , False
                                                                                                 , None)
                                                        in if cb'
                                                           then ((cc', cb', cr')
                                                                , i)
                                                           else let (v3'
                                                                    , i) = let v4' = i
                                                                 and v5' = 3
                                                                 and v4' = v4' + v5'
                                                                 and v3' = i
                                                                 and v3' = v4'
                                                                 and (v3'
                                                                     , i) = (v3'
                                                                            , v3')
                                                                 in (v3', i)
                                                              in ((False
                                                                  , False
                                                                  , None)
                                                                 , i)
                                                        , acc = ((False
                                                                 , False
                                                                 , None)
                                                                , i)
                                                        , obsv = () }
         in ((cr' /= None
             , cr' /= None
             , cr')
            , i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf11 : U32 -> U32
cogent_lf11 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let ((_, _, cr')
                                         , i) = repeat #{ n = let v' = 5
                                                        in v'
                                                        , stop = \#{ acc = ((_
                                                                            , cb'
                                                                            , _)
                                                                           , i)
                                                                   , obsv = () } => let v1' = let v1' = i
                                                           and v2' = 5
                                                           and v1' = v1' < v2'
                                                           in v1'
                                                        in cb' || not v1'
                                                        , step = \#{ acc = (_
                                                                           , i)
                                                                   , obsv = () } => let (cc'
                                                                                        , cb'
                                                                                        , cr') = (False
                                                                                                 , False
                                                                                                 , None)
                                                        in if cb'
                                                           then ((cc', cb', cr')
                                                                , i)
                                                           else let (v3'
                                                                    , i) = let v4' = 3
                                                                 and v5' = i
                                                                 and v4' = v4' + v5'
                                                                 and v3' = i
                                                                 and v3' = v4'
                                                                 and (v3'
                                                                     , i) = (v3'
                                                                            , v3')
                                                                 in (v3', i)
                                                              in ((False
                                                                  , False
                                                                  , None)
                                                                 , i)
                                                        , acc = ((False
                                                                 , False
                                                                 , None)
                                                                , i)
                                                        , obsv = () }
         in ((cr' /= None
             , cr' /= None
             , cr')
            , i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf12 : U32 -> U32
cogent_lf12 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let (v2'
                                         , i) = let v3' = 12
            and v2' = i
            and v2' = v3'
            and (v2', i) = (v2', v2')
            in (v2', i)
         and (c', i) = let ((_, _, cr')
                           , i) = repeat #{ n = let v' = 12
                                          and v1' = 1
                                          and v' = v' + v1'
                                          in v'
                                          , stop = \#{ acc = ((_, cb', _)
                                                             , i)
                                                     , obsv = () } => let v4' = let v4' = i
                                             and v5' = 5
                                             and v4' = v4' >= v5'
                                             in v4'
                                          in cb' || not v4'
                                          , step = \#{ acc = (_, i)
                                                     , obsv = () } => let (cc'
                                                                          , cb'
                                                                          , cr') = (False
                                                                                   , False
                                                                                   , None)
                                          in if cb'
                                             then ((cc', cb', cr'), i)
                                             else let (v6', i) = let v7' = 3
                                                   and v6' = i
                                                   and v6' = v6' - v7'
                                                   and (v6', i) = (v6', v6')
                                                   in (v6', i)
                                                in ((False, False, None), i)
                                          , acc = ((False, False, None)
                                                  , i)
                                          , obsv = () }
            in ((cr' /= None
                , cr' /= None
                , cr')
               , i)
         in (c', i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf13 : U32 -> U32
cogent_lf13 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let (v2'
                                         , i) = let v3' = 12
            and v2' = i
            and v2' = v3'
            and (v2', i) = (v2', v2')
            in (v2', i)
         and (c', i) = let ((_, _, cr')
                           , i) = repeat #{ n = let v' = 12
                                          and v1' = 1
                                          and v' = v' + v1'
                                          in v'
                                          , stop = \#{ acc = ((_, cb', _)
                                                             , i)
                                                     , obsv = () } => let v4' = let v4' = i
                                             and v5' = 5
                                             and v4' = v4' >= v5'
                                             in v4'
                                          in cb' || not v4'
                                          , step = \#{ acc = (_, i)
                                                     , obsv = () } => let (cc'
                                                                          , cb'
                                                                          , cr') = (False
                                                                                   , False
                                                                                   , None)
                                          in if cb'
                                             then ((cc', cb', cr'), i)
                                             else let (v6', i) = let v7' = i
                                                   and v8' = 3
                                                   and v7' = v7' - v8'
                                                   and v6' = i
                                                   and v6' = v7'
                                                   and (v6', i) = (v6', v6')
                                                   in (v6', i)
                                                in ((False, False, None), i)
                                          , acc = ((False, False, None)
                                                  , i)
                                          , obsv = () }
            in ((cr' /= None
                , cr' /= None
                , cr')
               , i)
         in (c', i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf14 : ( U32, U32 ) -> U32
cogent_lf14 (i
            , j) =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let ((_, _, cr')
                                         , i) = repeat #{ n = let v' = j
                                                        in v'
                                                        , stop = \#{ acc = ((_
                                                                            , cb'
                                                                            , _)
                                                                           , i)
                                                                   , obsv = j } => let v1' = let v1' = i
                                                           and v2' = j
                                                           and v1' = v1' < v2'
                                                           in v1'
                                                        in cb' || not v1'
                                                        , step = \#{ acc = (_
                                                                           , i)
                                                                   , obsv = j } => let (cc'
                                                                                       , cb'
                                                                                       , cr') = (False
                                                                                                , False
                                                                                                , None)
                                                        in if cb'
                                                           then ((cc', cb', cr')
                                                                , i)
                                                           else let (v3'
                                                                    , i) = let v4' = 1
                                                                 and v3' = i
                                                                 and v3' = v3' + v4'
                                                                 and (v3'
                                                                     , i) = (i
                                                                            , v3')
                                                                 in (v3', i)
                                                              in ((False
                                                                  , False
                                                                  , None)
                                                                 , i)
                                                        , acc = ((False
                                                                 , False
                                                                 , None)
                                                                , i)
                                                        , obsv = j }
         in ((cr' /= None
             , cr' /= None
             , cr')
            , i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf15 : U32 -> U32
cogent_lf15 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let (v1'
                                         , i) = let v2' = 0
            and v1' = i
            and v1' = v2'
            and (v1', i) = (v1', v1')
            in (v1', i)
         and (c', i) = let ((_, _, cr')
                           , i) = repeat #{ n = let v' = 5
                                          in v'
                                          , stop = \#{ acc = ((_, cb', _)
                                                             , i)
                                                     , obsv = () } => let v3' = let v3' = i
                                             and v4' = 5
                                             and v3' = v3' /= v4'
                                             in v3'
                                          in cb' || not v3'
                                          , step = \#{ acc = (_, i)
                                                     , obsv = () } => let (cc'
                                                                          , cb'
                                                                          , cr') = (False
                                                                                   , False
                                                                                   , None)
                                          in if cb'
                                             then ((cc', cb', cr'), i)
                                             else let (v5', i) = let v6' = 1
                                                   and v5' = i
                                                   and v5' = v5' + v6'
                                                   and (v5', i) = (i, v5')
                                                   in (v5', i)
                                                in ((False, False, None), i)
                                          , acc = ((False, False, None)
                                                  , i)
                                          , obsv = () }
            in ((cr' /= None
                , cr' /= None
                , cr')
               , i)
         in (c', i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lf16 : U32 -> U32
cogent_lf16 i =
   let ((_, _, cr'), i) = let ((cc'
                               , cb'
                               , cr')
                              , i) = let (v1'
                                         , i) = let v2' = 10
            and v1' = i
            and v1' = v2'
            and (v1', i) = (v1', v1')
            in (v1', i)
         and (c', i) = let ((_, _, cr')
                           , i) = repeat #{ n = let v' = 10
                                          in v'
                                          , stop = \#{ acc = ((_, cb', _)
                                                             , i)
                                                     , obsv = () } => let v3' = let v3' = i
                                             and v4' = 5
                                             and v3' = v3' /= v4'
                                             in v3'
                                          in cb' || not v3'
                                          , step = \#{ acc = (_, i)
                                                     , obsv = () } => let (cc'
                                                                          , cb'
                                                                          , cr') = (False
                                                                                   , False
                                                                                   , None)
                                          in if cb'
                                             then ((cc', cb', cr'), i)
                                             else let (v5', i) = let v6' = 1
                                                   and v5' = i
                                                   and v5' = v5' - v6'
                                                   and (v5', i) = (i, v5')
                                                   in (v5', i)
                                                in ((False, False, None), i)
                                          , acc = ((False, False, None)
                                                  , i)
                                          , obsv = () }
            in ((cr' /= None
                , cr' /= None
                , cr')
               , i)
         in (c', i)
      in if cc'
         then ((cc', cb', cr'), i)
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in (c', i)
   in cr'
      | None -> defaultVal ()
      | Some v -> v

cogent_lfe1 : U32 -> U32
cogent_lfe1 i =
   let (_, _, cr') = let (cc'
                         , cb'
                         , cr') = gencotDummy "Unsupported form of for loop: Counting variables modified in body"
         {- for (; i < 5; i++)
             i = 0; -}
      in if cc'
         then (cc', cb', cr')
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in c'
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lfe2 : ( U32, U32 ) -> U32
cogent_lfe2 (i
            , j) =
   let (_, _, cr') = let (cc'
                         , cb'
                         , cr') = gencotDummy "Unsupported form of for loop: Controlling expression modified"
         {- for (; i < j; i++)
             j = 0; -}
      in if cc'
         then (cc', cb', cr')
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in c'
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lfe3 : U32 -> U32
cogent_lfe3 i =
   let (_, _, cr') = let (cc'
                         , cb'
                         , cr') = gencotDummy "Unsupported form of for loop: No counting variable found"
         {- for (; i < i + 5; i++)
             ; -}
      in if cc'
         then (cc', cb', cr')
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in c'
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lfe4 : ( U32, U32 ) -> U32
cogent_lfe4 (i
            , j) =
   let (_, _, cr') = let (cc'
                         , cb'
                         , cr') = gencotDummy "Unsupported form of for loop: Controlling expression modified"
         {- for (; i < j; i++, j++)
             ; -}
      in if cc'
         then (cc', cb', cr')
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in c'
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lfe5 : U32 -> U32
cogent_lfe5 i =
   let (_, _, cr') = let (cc'
                         , cb'
                         , cr') = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (; i < 5; i--)
             ; -}
      in if cc'
         then (cc', cb', cr')
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in c'
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lfe6 : U32 -> U32
cogent_lfe6 i =
   let (_, _, cr') = let (cc'
                         , cb'
                         , cr') = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (; i > 5; i--)
             ; -}
      in if cc'
         then (cc', cb', cr')
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in c'
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lfe7 : U32 -> U32
cogent_lfe7 i =
   let (_, _, cr') = let (cc'
                         , cb'
                         , cr') = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (; i != 5; i++)
             ; -}
      in if cc'
         then (cc', cb', cr')
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in c'
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lfe8 : U32 -> U32
cogent_lfe8 i =
   let (_, _, cr') = let (cc'
                         , cb'
                         , cr') = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (i = 3; i != 5; i--)
             ; -}
      in if cc'
         then (cc', cb', cr')
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in c'
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lfe9 : U32 -> U32
cogent_lfe9 i =
   let (_, _, cr') = let (cc'
                         , cb'
                         , cr') = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (i = 10; i != 5; i++)
             ; -}
      in if cc'
         then (cc', cb', cr')
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in c'
   in cr'
      | None -> defaultVal ()
      | Some v -> v
cogent_lfe10 : U32 -> U32
cogent_lfe10 i =
   let (_, _, cr') = let (cc'
                         , cb'
                         , cr') = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (i = 0; i != 5; i += 2)
             ; -}
      in if cc'
         then (cc', cb', cr')
         else
            let c' = let v' = let v' = i
                  in v'
               in (True, True, Some v')
            in c'
   in cr'
      | None -> defaultVal ()
      | Some v -> v
