cogent_fc1 : () -> U32
cogent_fc1 () =
   let r' = let v' = 42 in v'
   in r'
cogent_fc2 : () -> U8
cogent_fc2 () =
   let r' = let v' = 'x' in v'
   in r'
cogent_fc3 : () -> U8
cogent_fc3 () =
   let r' = let v' = gencotDummy "Multi character constants not supported"
         {- 'xx'; -}
      in v'
   in r'
cogent_fc4 : () -> String
cogent_fc4 () =
   let r' = let v' = "abc" in v'
   in r'
cogent_fc5 : () -> err-float
cogent_fc5 () =
   let r' = let v' = gencotDummy "Float literals not supported"
         {- 1.5; -}
      in v'
   in r'
cogent_fc6 : () -> MayNull CVoidPtr
cogent_fc6 () =
   let r' = let v' = cogent_NULL
      in v'
   in r'
cogent_fv1 : U32 -> U32
cogent_fv1 v =
   let r' = let v' = v in v'
   in r'
cogent_fv2 : U32 -> U32
cogent_fv2 xyz_123 =
   let r' = let v' = xyz_123 in v'
   in r'
cogent_fo1 : () -> U32
cogent_fo1 () =
   let r' = let v1' = 42
      and v' = + v1'
      in v'
   in r'
cogent_fo2 : () -> U32
cogent_fo2 () =
   let r' = let v1' = 42
      and v' = - v1'
      in v'
   in r'
cogent_fo3 : () -> U32
cogent_fo3 () =
   let r' = if (let v' = 42
         and v1' = not (v' /= 0)
         in v1')
      then 1
      else 0
   in r'
cogent_fo4 : () -> U32
cogent_fo4 () =
   let r' = let v1' = 42
      and v' = complement v1'
      in v'
   in r'
cogent_fo5 : () -> U32
cogent_fo5 () =
   let r' = let v' = 17
      and v1' = 4
      and v2' = v' + v1'
      in v2'
   in r'
cogent_fo6 : () -> U32
cogent_fo6 () =
   let r' = let v' = 17
      and v1' = 4
      and v2' = v' - v1'
      in v2'
   in r'
cogent_fo7 : () -> U32
cogent_fo7 () =
   let r' = let v' = 17
      and v1' = 4
      and v2' = v' * v1'
      in v2'
   in r'
cogent_fo8 : () -> U32
cogent_fo8 () =
   let r' = let v' = 17
      and v1' = 4
      and v2' = v' % v1'
      in v2'
   in r'
cogent_fo9 : () -> U32
cogent_fo9 () =
   let r' = let v' = 17
      and v1' = 4
      and v2' = v' / v1'
      in v2'
   in r'
cogent_fo10 : () -> U32
cogent_fo10 () =
   let r' = let v' = 17
      and v1' = 4
      and v2' = v' << v1'
      in v2'
   in r'
cogent_fo11 : () -> U32
cogent_fo11 () =
   let r' = let v' = 17
      and v1' = 4
      and v2' = v' >> v1'
      in v2'
   in r'
cogent_fo12 : () -> U32
cogent_fo12 () =
   let r' = if (let v' = 17
         and v1' = 4
         and v2' = v' < v1'
         in v2')
      then 1
      else 0
   in r'
cogent_fo13 : () -> U32
cogent_fo13 () =
   let r' = if (let v' = 17
         and v1' = 4
         and v2' = v' > v1'
         in v2')
      then 1
      else 0
   in r'
cogent_fo14 : () -> U32
cogent_fo14 () =
   let r' = if (let v' = 17
         and v1' = 4
         and v2' = v' <= v1'
         in v2')
      then 1
      else 0
   in r'
cogent_fo15 : () -> U32
cogent_fo15 () =
   let r' = if (let v' = 17
         and v1' = 4
         and v2' = v' >= v1'
         in v2')
      then 1
      else 0
   in r'
cogent_fo16 : () -> U32
cogent_fo16 () =
   let r' = if (let v' = 17
         and v1' = 4
         and v2' = v' == v1'
         in v2')
      then 1
      else 0
   in r'
cogent_fo17 : () -> U32
cogent_fo17 () =
   let r' = if (let v' = 17
         and v1' = 4
         and v2' = v' /= v1'
         in v2')
      then 1
      else 0
   in r'
cogent_fo18 : () -> U32
cogent_fo18 () =
   let r' = let v' = 17
      and v1' = 4
      and v2' = v' .&. v1'
      in v2'
   in r'
cogent_fo19 : () -> U32
cogent_fo19 () =
   let r' = let v' = 17
      and v1' = 4
      and v2' = v' .|. v1'
      in v2'
   in r'
cogent_fo20 : () -> U32
cogent_fo20 () =
   let r' = let v' = 17
      and v1' = 4
      and v2' = v' .^. v1'
      in v2'
   in r'
cogent_fo21 : () -> U32
cogent_fo21 () =
   let r' = if (let v3' = let v' = 17
            in if v' /= 0
               then let v1' = 4 /= 0
                  in v1'
               else let v2' = False
                  in v2'
         in v3')
      then 1
      else 0
   in r'
cogent_fo22 : () -> U32
cogent_fo22 () =
   let r' = if (let v3' = let v' = 17
            in if v' /= 0
               then let v2' = True
                  in v2'
               else let v1' = 4 /= 0
                  in v1'
         in v3')
      then 1
      else 0
   in r'
cogent_f1 : () -> U32
cogent_f1 () =
   let r' = let v3' = let v' = 17
         in if v' /= 0
            then let v1' = 4
               in v1'
            else let v2' = 42
               in v2'
      in v3'
   in r'
cogent_f2 : () -> U32
cogent_f2 () =
   let r' = let v2' = 42 in v2'
   in r'
cogent_f3 : () -> U32
cogent_f3 () =
   let r' = let v' = cogent_fc1
      and v1' = v' ()
      in v1'
   in r'
cogent_f4 : () -> U32
cogent_f4 () =
   let r' = let v' = cogent_fv1
      and v1' = 42
      and v2' = v' v1'
      in v2'
   in r'
cogent_fx : ( U32, U8, U32 ) -> U32
cogent_fx (a, b, c) =
   let r' = let v' = a in v'
   in r'
cogent_f5 : () -> U32
cogent_f5 () =
   let r' = let v' = cogent_fx
      and v1' = 17
      and v2' = 'x'
      and v3' = 4
      and v4' = v' (v1', v2', v3')
      in v4'
   in r'

type Struct_Cogent_s1 = { m1 : U32, m2 : U32 }
type Struct_Cogent_s2 = { m3 : U32, m4 : #Struct_Cogent_s1 }
type Struct_Cogent_s3 = { m5 : U32, m6 : #(CArr5 U32) }
cogent_fs1 : #Struct_Cogent_s1 -> U32
cogent_fs1 s =
   let r' = let v' = s
      and s { m1 = p0' } = v'
      and v1' = p0'
      in v1'
   in r'
cogent_fs2 : #Struct_Cogent_s1 -> U32
cogent_fs2 s =
   let r' = let v' = s
      and s { m1 = p0' } = v'
      and v1' = p0'
      and s = s { m1 = p0' }
      and v2' = s
      and s { m2 = p1' } = v2'
      and v3' = p1'
      and v4' = v1' + v3'
      in v4'
   in r'
cogent_fs3 : #Struct_Cogent_s2 -> U32
cogent_fs3 s =
   let r' = let v' = s
      and s { m4 = p0' } = v'
      and v1' = p0'
      and p0' { m1 = p1' } = v1'
      and v2' = p1'
      in v2'
   in r'
cogent_fs4 : #Struct_Cogent_s2 -> U32
cogent_fs4 s =
   let r' = let v' = s
      and s { m4 = p0' } = v'
      and v1' = p0'
      and p0' { m1 = p1' } = v1'
      and v2' = p1'
      and p0' = p0' { m1 = p1' }
      and s = s { m4 = p0' }
      and v3' = s
      and s { m4 = p2' } = v3'
      and v4' = p2'
      and p2' { m2 = p3' } = v4'
      and v5' = p3'
      and p2' = p2' { m2 = p3' }
      and s = s { m4 = p2' }
      and v6' = v2' + v5'
      and v7' = s
      and s { m3 = p4' } = v7'
      and v8' = p4'
      and v9' = v6' + v8'
      in v9'
   in r'
cogent_fs5 : #Struct_Cogent_s3 -> U32
cogent_fs5 s =
   let r' = let v2' = 1
      and v' = s
      and s { m6 = p0' } = v'
      and v1' = p0'
      and p0' @{ @v2' = p1' } = v1'
      and v3' = p1'
      in v3'
   in r'
cogent_fs6 : #Struct_Cogent_s3 -> U32
cogent_fs6 s =
   let r' = let v2' = 1
      and v' = s
      and s { m6 = p0' } = v'
      and v1' = p0'
      and (p0' @{ @v2' = p1' }
          , i1') = (v1', v2')
      and v3' = p1'
      and p0' = p0' @{ @i1' = p1' }
      and s = s { m6 = p0' }
      and v6' = 3
      and v4' = s
      and s { m6 = p2' } = v4'
      and v5' = p2'
      and (p2' @{ @v6' = p3' }
          , i3') = (v5', v6')
      and v7' = p3'
      and p2' = p2' @{ @i3' = p3' }
      and s = s { m6 = p2' }
      and v8' = v3' + v7'
      and v9' = s
      and s { m5 = p4' } = v9'
      and v10' = p4'
      and v11' = v8' + v10'
      in v11'
   in r'

type Cogent_a1 = CArr5 U32
type Cogent_a2 =
   CArr5 #Struct_Cogent_s1
type Cogent_a3 =
   CArr5 (#(CArr4 U32))
cogent_fa1 : Cogent_a1 -> ( U32, Cogent_a1 )
cogent_fa1 a =
   let (r', a) = let v1' = 3
      and v' = a
      and (a @{ @v1' = p0' }
          , i0') = (v', v1')
      and v2' = p0'
      and a = a @{ @i0' = p0' }
      in (v2', a)
   in (r', a)
cogent_fa2 : Cogent_a1 -> ( U32, Cogent_a1 )
cogent_fa2 a =
   let (r', a) = let v1' = 3
      and v' = a
      and (a @{ @v1' = p0' }
          , i0') = (v', v1')
      and v2' = p0'
      and a = a @{ @i0' = p0' }
      and v4' = 1
      and v3' = a
      and (a @{ @v4' = p1' }
          , i1') = (v3', v4')
      and v5' = p1'
      and a = a @{ @i1' = p1' }
      and v6' = v2' + v5'
      in (v6', a)
   in (r', a)
cogent_fa3 : Cogent_a1 -> ( U32, Cogent_a1 )
cogent_fa3 a =
   let (r', a) = let v2' = 2
      and v1' = a
      and (a @{ @v2' = p0' }
          , i0') = (v1', v2')
      and v3' = p0'
      and a = a @{ @i0' = p0' }
      and v' = a
      and (a @{ @v3' = p1' }
          , i1') = (v', v3')
      and v4' = p1'
      and a = a @{ @i1' = p1' }
      in (v4', a)
   in (r', a)
cogent_fa4 : Cogent_a2 -> ( U32, Cogent_a2 )
cogent_fa4 a =
   let (r', a) = let v1' = 3
      and v' = a
      and (a @{ @v1' = p0' }
          , i0') = (v', v1')
      and v2' = p0'
      and p0' { m1 = p1' } = v2'
      and v3' = p1'
      and p0' = p0' { m1 = p1' }
      and a = a @{ @i0' = p0' }
      in (v3', a)
   in (r', a)
cogent_fa5 : Cogent_a2 -> ( U32, Cogent_a2 )
cogent_fa5 a =
   let (r', a) = let v2' = 2
      and v1' = a
      and (a @{ @v2' = p0' }
          , i0') = (v1', v2')
      and v3' = p0'
      and p0' { m2 = p1' } = v3'
      and v4' = p1'
      and p0' = p0' { m2 = p1' }
      and a = a @{ @i0' = p0' }
      and v' = a
      and (a @{ @v4' = p2' }
          , i2') = (v', v4')
      and v5' = p2'
      and p2' { m1 = p3' } = v5'
      and v6' = p3'
      and p2' = p2' { m1 = p3' }
      and a = a @{ @i2' = p2' }
      in (v6', a)
   in (r', a)
cogent_fa6 : Cogent_a3 -> ( U32, Cogent_a3 )
cogent_fa6 a =
   let (r', a) = let v3' = 2
      and v1' = 3
      and v' = a
      and (a @{ @v1' = p0' }
          , i0') = (v', v1')
      and v2' = p0'
      and (p0' @{ @v3' = p1' }
          , i1') = (v2', v3')
      and v4' = p1'
      and p0' = p0' @{ @i1' = p1' }
      and a = a @{ @i0' = p0' }
      in (v4', a)
   in (r', a)
cogent_fa7 : Cogent_a3 -> ( U32, Cogent_a3 )
cogent_fa7 a =
   let (r', a) = let v7' = 3
      and v4' = 1
      and v2' = 2
      and v1' = a
      and (a @{ @v2' = p0' }
          , i0') = (v1', v2')
      and v3' = p0'
      and (p0' @{ @v4' = p1' }
          , i1') = (v3', v4')
      and v5' = p1'
      and p0' = p0' @{ @i1' = p1' }
      and a = a @{ @i0' = p0' }
      and v' = a
      and (a @{ @v5' = p2' }
          , i2') = (v', v5')
      and v6' = p2'
      and (p2' @{ @v7' = p3' }
          , i3') = (v6', v7')
      and v8' = p3'
      and p2' = p2' @{ @i3' = p3' }
      and a = a @{ @i2' = p2' }
      in (v8', a)
   in (r', a)

type Struct_Cogent_s4 = { m5 : U32, m6 : MayNull Struct_Cogent_s1 }
type Cogent_a4 =
   CArr5 (MayNull (CPtr U32))
type Cogent_a5 =
   CPtr (#(CArr5 U32))
cogent_fp1 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_fp1 p =
   let (r', p) = let v' = p
      and p { cont = p0' } = v'
      and v1' = p0'
      and p = p { cont = p0' }
      in (v1', p)
   in (r', p)
cogent_fp2 : MayNull Struct_Cogent_s1 -> ( U32, MayNull Struct_Cogent_s1 )
cogent_fp2 p =
   let (r', p) = let v' = p
      and p { cont = p0' } = v'
      and v1' = p0'
      and p0' { m1 = p1' } = v1'
      and v2' = p1'
      and p0' = p0' { m1 = p1' }
      and p = p { cont = p0' }
      in (v2', p)
   in (r', p)
cogent_fp3 : MayNull Struct_Cogent_s1 -> ( U32, MayNull Struct_Cogent_s1 )
cogent_fp3 p =
   let (r', p) = let v' = p
      and p { m1 = p0' } = v'
      and v1' = p0'
      and p = p { m1 = p0' }
      in (v1', p)
   in (r', p)
cogent_fp4 : MayNull Struct_Cogent_s4 -> ( U32, MayNull Struct_Cogent_s4 )
cogent_fp4 p =
   let (r', p) = let v' = p
      and p { m6 = p0' } = v'
      and v1' = p0'
      and p0' { cont = p1' } = v1'
      and v2' = p1'
      and p1' { m1 = p2' } = v2'
      and v3' = p2'
      and p1' = p1' { m1 = p2' }
      and p0' = p0' { cont = p1' }
      and p = p { m6 = p0' }
      in (v3', p)
   in (r', p)
cogent_fp5 : MayNull Struct_Cogent_s4 -> ( U32, MayNull Struct_Cogent_s4 )
cogent_fp5 p =
   let (r', p) = let v' = p
      and p { m6 = p0' } = v'
      and v1' = p0'
      and p0' { m1 = p1' } = v1'
      and v2' = p1'
      and p0' = p0' { m1 = p1' }
      and p = p { m6 = p0' }
      in (v2', p)
   in (r', p)
cogent_fp6 : Cogent_a4 -> ( U32, Cogent_a4 )
cogent_fp6 p =
   let (r', p) = let v1' = 3
      and v' = p
      and (p @{ @v1' = p0' }
          , i0') = (v', v1')
      and v2' = p0'
      and p0' { cont = p1' } = v2'
      and v3' = p1'
      and p0' = p0' { cont = p1' }
      and p = p @{ @i0' = p0' }
      in (v3', p)
   in (r', p)
cogent_fp7 : MayNull Cogent_a5 -> ( U32, MayNull Cogent_a5 )
cogent_fp7 p =
   let (r', p) = let v2' = 3
      and v' = p
      and p { cont = p0' } = v'
      and v1' = p0'
      and (p0' @{ @v2' = p1' }
          , i1') = (v1', v2')
      and v3' = p1'
      and p0' = p0' @{ @i1' = p1' }
      and p = p { cont = p0' }
      in (v3', p)
   in (r', p)
