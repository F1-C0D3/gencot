cogent_sv1 : () -> ()
cogent_sv1 () :: () =
   let c' :: U8 = 0 :: U8
   in () :: () :: ()
cogent_sv2 : U32 -> ()
cogent_sv2 i :: U32 =
   let c' :: U8 = 0 :: U8
   in () :: () :: ()
cogent_sv3 : () -> ()
cogent_sv3 () :: () =
   let c' :: U8 = 0 :: U8
   in () :: () :: ()
cogent_sv4 : () -> ()
cogent_sv4 () :: () =
   let (c' :: U8
       , r' :: ()) = let v' :: () = () :: ()
      in (3 :: U8, v' :: ()) :: (U8
                                , ())
   in () :: () :: ()
cogent_se1 : U32 -> U32
cogent_se1 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let v' :: U32 = i :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_se2 : U32 -> U32
cogent_se2 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let v4' :: U32 = let v' :: U32 = i :: U32
         and v1' :: U32 = 5 :: U32
         and v2' :: U32 = v' :: U32 + v1' :: U32 :: U32
         and v3' :: U32 = i :: U32
         and v4' :: U32 = v2' :: U32 * v3' :: U32 :: U32
         in v4' :: U32 :: U32
      in (3 :: U8, v4' :: U32) :: (U8
                                  , U32)
   in r' :: U32 :: U32
cogent_se3 : U32 -> U32
cogent_se3 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v3' :: U32
                                            , i :: U32) = let v' :: U32 = 1 :: U32
            and v1' :: U32 = i :: U32
            and v2' :: U32 = v1' :: U32 + v' :: U32 :: U32
            and (v3' :: U32
                , i :: U32) = (i :: U32
                              , v2' :: U32)
            in (v3' :: U32
               , i :: U32) :: (U32, U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v4' :: U32 = i :: U32
               in (3 :: U8, v4' :: U32) :: (U8
                                           , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_se4 : U32 -> U32
cogent_se4 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v3' :: U32
                                            , i :: U32) = let v' :: U32 = 1 :: U32
            and v1' :: U32 = i :: U32
            and v2' :: U32 = v1' :: U32 + v' :: U32 :: U32
            and (v3' :: U32
                , i :: U32) = (i :: U32
                              , v2' :: U32)
            in (v3' :: U32
               , i :: U32) :: (U32, U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , i :: U32) = let (v7' :: U32
                                                       , i :: U32) = let v4' :: U32 = 5 :: U32
                     and v5' :: U32 = i :: U32
                     and v6' :: U32 = v4' :: U32
                     and (v7' :: U32
                         , i :: U32) = (v6' :: U32
                                       , v6' :: U32)
                     in (v7' :: U32
                        , i :: U32) :: (U32, U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v8' :: U32 = i :: U32
                        in (3 :: U8, v8' :: U32) :: (U8
                                                    , U32)
                     in (c' :: U8
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32) :: (U8, U32, U32) :: (U8
                                                                    , U32
                                                                    , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_se5 : U32 -> U32
cogent_se5 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v3' :: U32
                                            , i :: U32) = let v' :: U32 = 1 :: U32
            and v1' :: U32 = i :: U32
            and v2' :: U32 = v1' :: U32 + v' :: U32 :: U32
            and (v3' :: U32
                , i :: U32) = (i :: U32
                              , v2' :: U32)
            in (v3' :: U32
               , i :: U32) :: (U32, U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32
                  , i :: U32) = let (v7' :: U32
                                    , i :: U32) = let v4' :: U32 = 1 :: U32
                  and v5' :: U32 = i :: U32
                  and v6' :: U32 = v5' :: U32 + v4' :: U32 :: U32
                  and (v7' :: U32
                      , i :: U32) = (v6' :: U32
                                    , v6' :: U32)
                  in (v7' :: U32
                     , i :: U32) :: (U32, U32)
               in (3 :: U8
                  , v7' :: U32
                  , i :: U32) :: (U8, U32, U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_si1 : (U32, U32) -> U32
cogent_si1 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , r' :: U32) = let v2' :: Bool = let v' :: U32 = i :: U32
         and v1' :: U32 = 0 :: U32
         and v2' :: Bool = v' :: U32 == v1' :: U32 :: Bool
         in v2' :: Bool :: Bool
      in if v2' :: Bool
         then let (c' :: U8
                  , r' :: U32) = let v3' :: U32 = j :: U32
               in (3 :: U8, v3' :: U32) :: (U8
                                           , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32)
         else let (c' :: U8
                  , r' :: U32) = let v4' :: U32 = i :: U32
               in (3 :: U8, v4' :: U32) :: (U8
                                           , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_si2 : (U32, U32) -> U32
cogent_si2 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , r' :: U32) = let (c' :: U8
                          , r' :: U32) = let v2' :: Bool = let v' :: U32 = i :: U32
            and v1' :: U32 = 0 :: U32
            and v2' :: Bool = v' :: U32 == v1' :: U32 :: Bool
            in v2' :: Bool :: Bool
         in if v2' :: Bool
            then let (c' :: U8
                     , r' :: U32) = let v3' :: U32 = j :: U32
                  in (3 :: U8, v3' :: U32) :: (U8
                                              , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32)
            else let c' :: U8 = 0 :: U8
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v4' :: U32 = i :: U32
               in (3 :: U8, v4' :: U32) :: (U8
                                           , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_si3 : (U32, U32) -> U32
cogent_si3 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let v2' :: Bool = let v' :: U32 = i :: U32
            and v1' :: U32 = 0 :: U32
            and v2' :: Bool = v' :: U32 == v1' :: U32 :: Bool
            in v2' :: Bool :: Bool
         in if v2' :: Bool
            then let (c' :: U8
                     , i :: U32) = let (v6' :: U32
                                       , i :: U32) = let v3' :: U32 = 10 :: U32
                     and v4' :: U32 = i :: U32
                     and v5' :: U32 = v3' :: U32
                     and (v6' :: U32
                         , i :: U32) = (v5' :: U32
                                       , v5' :: U32)
                     in (v6' :: U32
                        , i :: U32) :: (U32, U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in (c' :: U8, i :: U32) :: (U8
                                          , U32)
            else let (c' :: U8
                     , i :: U32) = let (v10' :: U32
                                       , i :: U32) = let v7' :: U32 = j :: U32
                     and v8' :: U32 = i :: U32
                     and v9' :: U32 = v8' :: U32 + v7' :: U32 :: U32
                     and (v10' :: U32
                         , i :: U32) = (v9' :: U32
                                       , v9' :: U32)
                     in (v10' :: U32
                        , i :: U32) :: (U32, U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in (c' :: U8, i :: U32) :: (U8
                                          , U32) :: (U8, U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v11' :: U32 = i :: U32
               in (3 :: U8, v11' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_si4 : (U32, U32) -> U32
cogent_si4 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32
                          , j :: U32) = let v2' :: Bool = let v' :: U32 = i :: U32
            and v1' :: U32 = 0 :: U32
            and v2' :: Bool = v' :: U32 == v1' :: U32 :: Bool
            in v2' :: Bool :: Bool
         in if v2' :: Bool
            then let (c' :: U8
                     , i :: U32) = let (v6' :: U32
                                       , i :: U32) = let v3' :: U32 = 10 :: U32
                     and v4' :: U32 = i :: U32
                     and v5' :: U32 = v3' :: U32
                     and (v6' :: U32
                         , i :: U32) = (v5' :: U32
                                       , v5' :: U32)
                     in (v6' :: U32
                        , i :: U32) :: (U32, U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in (c' :: U8
                  , i :: U32
                  , j :: U32) :: (U8, U32, U32)
            else let (c' :: U8
                     , j :: U32
                     , i :: U32) = let v9' :: Bool = let v7' :: U32 = j :: U32
                     and v8' :: U32 = 0 :: U32
                     and v9' :: Bool = v7' :: U32 == v8' :: U32 :: Bool
                     in v9' :: Bool :: Bool
                  in if v9' :: Bool
                     then let (c' :: U8
                              , j :: U32) = let (v13' :: U32
                                                , j :: U32) = let v10' :: U32 = i :: U32
                              and v11' :: U32 = j :: U32
                              and v12' :: U32 = v10' :: U32
                              and (v13' :: U32
                                  , j :: U32) = (v12' :: U32
                                                , v12' :: U32)
                              in (v13' :: U32
                                 , j :: U32) :: (U32, U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8, U32, U32)
                     else let (c' :: U8
                              , i :: U32) = let (v17' :: U32
                                                , i :: U32) = let v14' :: U32 = j :: U32
                              and v15' :: U32 = i :: U32
                              and v16' :: U32 = v15' :: U32 + v14' :: U32 :: U32
                              and (v17' :: U32
                                  , i :: U32) = (v16' :: U32
                                                , v16' :: U32)
                              in (v17' :: U32
                                 , i :: U32) :: (U32, U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8
                                          , U32
                                          , U32) :: (U8, U32, U32) :: (U8
                                                                      , U32
                                                                      , U32)
               in (c' :: U8
                  , i :: U32
                  , j :: U32) :: (U8
                                 , U32
                                 , U32) :: (U8, U32, U32) :: (U8
                                                             , U32
                                                             , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v20' :: U32 = let v18' :: U32 = i :: U32
                  and v19' :: U32 = j :: U32
                  and v20' :: U32 = v18' :: U32 + v19' :: U32 :: U32
                  in v20' :: U32 :: U32
               in (3 :: U8, v20' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_si5 : (U32, U32) -> U32
cogent_si5 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32
                          , j :: U32) = let v2' :: Bool = let v' :: U32 = i :: U32
            and v1' :: U32 = 0 :: U32
            and v2' :: Bool = v' :: U32 == v1' :: U32 :: Bool
            in v2' :: Bool :: Bool
         in if v2' :: Bool
            then let (c' :: U8
                     , i :: U32
                     , j :: U32) = let v5' :: Bool = let v3' :: U32 = j :: U32
                     and v4' :: U32 = 0 :: U32
                     and v5' :: Bool = v3' :: U32 == v4' :: U32 :: Bool
                     in v5' :: Bool :: Bool
                  in if v5' :: Bool
                     then let (c' :: U8
                              , i :: U32) = let (v9' :: U32
                                                , i :: U32) = let v6' :: U32 = 10 :: U32
                              and v7' :: U32 = i :: U32
                              and v8' :: U32 = v6' :: U32
                              and (v9' :: U32
                                  , i :: U32) = (v8' :: U32
                                                , v8' :: U32)
                              in (v9' :: U32
                                 , i :: U32) :: (U32, U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , i :: U32
                           , j :: U32) :: (U8, U32, U32)
                     else let (c' :: U8
                              , j :: U32) = let (v13' :: U32
                                                , j :: U32) = let v10' :: U32 = 10 :: U32
                              and v11' :: U32 = j :: U32
                              and v12' :: U32 = v11' :: U32 + v10' :: U32 :: U32
                              and (v13' :: U32
                                  , j :: U32) = (v12' :: U32
                                                , v12' :: U32)
                              in (v13' :: U32
                                 , j :: U32) :: (U32, U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , i :: U32
                           , j :: U32) :: (U8
                                          , U32
                                          , U32) :: (U8, U32, U32) :: (U8
                                                                      , U32
                                                                      , U32)
               in (c' :: U8
                  , i :: U32
                  , j :: U32) :: (U8, U32, U32)
            else let (c' :: U8
                     , j :: U32
                     , i :: U32) = let v16' :: Bool = let v14' :: U32 = j :: U32
                     and v15' :: U32 = 0 :: U32
                     and v16' :: Bool = v14' :: U32 == v15' :: U32 :: Bool
                     in v16' :: Bool :: Bool
                  in if v16' :: Bool
                     then let (c' :: U8
                              , j :: U32) = let (v20' :: U32
                                                , j :: U32) = let v17' :: U32 = i :: U32
                              and v18' :: U32 = j :: U32
                              and v19' :: U32 = v17' :: U32
                              and (v20' :: U32
                                  , j :: U32) = (v19' :: U32
                                                , v19' :: U32)
                              in (v20' :: U32
                                 , j :: U32) :: (U32, U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8, U32, U32)
                     else let (c' :: U8
                              , i :: U32) = let (v24' :: U32
                                                , i :: U32) = let v21' :: U32 = j :: U32
                              and v22' :: U32 = i :: U32
                              and v23' :: U32 = v22' :: U32 + v21' :: U32 :: U32
                              and (v24' :: U32
                                  , i :: U32) = (v23' :: U32
                                                , v23' :: U32)
                              in (v24' :: U32
                                 , i :: U32) :: (U32, U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8
                                          , U32
                                          , U32) :: (U8, U32, U32) :: (U8
                                                                      , U32
                                                                      , U32)
               in (c' :: U8
                  , i :: U32
                  , j :: U32) :: (U8
                                 , U32
                                 , U32) :: (U8, U32, U32) :: (U8
                                                             , U32
                                                             , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v27' :: U32 = let v25' :: U32 = i :: U32
                  and v26' :: U32 = j :: U32
                  and v27' :: U32 = v25' :: U32 + v26' :: U32 :: U32
                  in v27' :: U32 :: U32
               in (3 :: U8, v27' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_si6 : (U32, U32) -> U32
cogent_si6 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , r' :: U32
       , j :: U32) = let (c' :: U8
                         , i :: U32
                         , r' :: U32
                         , j :: U32) = let v2' :: Bool = let v' :: U32 = i :: U32
            and v1' :: U32 = 0 :: U32
            and v2' :: Bool = v' :: U32 == v1' :: U32 :: Bool
            in v2' :: Bool :: Bool
         in if v2' :: Bool
            then let (c' :: U8
                     , i :: U32
                     , r' :: U32
                     , j :: U32) = let v5' :: Bool = let v3' :: U32 = j :: U32
                     and v4' :: U32 = 0 :: U32
                     and v5' :: Bool = v3' :: U32 == v4' :: U32 :: Bool
                     in v5' :: Bool :: Bool
                  in if v5' :: Bool
                     then let (c' :: U8
                              , i :: U32) = let (v9' :: U32
                                                , i :: U32) = let v6' :: U32 = 10 :: U32
                              and v7' :: U32 = i :: U32
                              and v8' :: U32 = v6' :: U32
                              and (v9' :: U32
                                  , i :: U32) = (v8' :: U32
                                                , v8' :: U32)
                              in (v9' :: U32
                                 , i :: U32) :: (U32, U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , i :: U32
                           , r' :: U32
                           , j :: U32) :: (U8
                                          , U32
                                          , U32
                                          , U32)
                     else let (c' :: U8
                              , r' :: U32
                              , j :: U32) = let (v13' :: U32
                                                , j :: U32) = let v10' :: U32 = 10 :: U32
                              and v11' :: U32 = j :: U32
                              and v12' :: U32 = v11' :: U32 + v10' :: U32 :: U32
                              and (v13' :: U32
                                  , j :: U32) = (v12' :: U32
                                                , v12' :: U32)
                              in (v13' :: U32
                                 , j :: U32) :: (U32, U32)
                           in (3 :: U8
                              , v13' :: U32
                              , j :: U32) :: (U8, U32, U32)
                        in (c' :: U8
                           , i :: U32
                           , r' :: U32
                           , j :: U32) :: (U8
                                          , U32
                                          , U32
                                          , U32) :: (U8
                                                    , U32
                                                    , U32
                                                    , U32) :: (U8
                                                              , U32
                                                              , U32
                                                              , U32)
               in (c' :: U8
                  , i :: U32
                  , r' :: U32
                  , j :: U32) :: (U8
                                 , U32
                                 , U32
                                 , U32)
            else let (c' :: U8
                     , r' :: U32
                     , j :: U32
                     , i :: U32) = let v16' :: Bool = let v14' :: U32 = j :: U32
                     and v15' :: U32 = 0 :: U32
                     and v16' :: Bool = v14' :: U32 == v15' :: U32 :: Bool
                     in v16' :: Bool :: Bool
                  in if v16' :: Bool
                     then let (c' :: U8
                              , r' :: U32
                              , j :: U32) = let (v20' :: U32
                                                , j :: U32) = let v17' :: U32 = i :: U32
                              and v18' :: U32 = j :: U32
                              and v19' :: U32 = v17' :: U32
                              and (v20' :: U32
                                  , j :: U32) = (v19' :: U32
                                                , v19' :: U32)
                              in (v20' :: U32
                                 , j :: U32) :: (U32, U32)
                           in (3 :: U8
                              , v20' :: U32
                              , j :: U32) :: (U8, U32, U32)
                        in (c' :: U8
                           , r' :: U32
                           , j :: U32
                           , i :: U32) :: (U8
                                          , U32
                                          , U32
                                          , U32)
                     else let (c' :: U8
                              , i :: U32) = let (v24' :: U32
                                                , i :: U32) = let v21' :: U32 = j :: U32
                              and v22' :: U32 = i :: U32
                              and v23' :: U32 = v22' :: U32 + v21' :: U32 :: U32
                              and (v24' :: U32
                                  , i :: U32) = (v23' :: U32
                                                , v23' :: U32)
                              in (v24' :: U32
                                 , i :: U32) :: (U32, U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , r' :: U32
                           , j :: U32
                           , i :: U32) :: (U8
                                          , U32
                                          , U32
                                          , U32) :: (U8
                                                    , U32
                                                    , U32
                                                    , U32) :: (U8
                                                              , U32
                                                              , U32
                                                              , U32)
               in (c' :: U8
                  , i :: U32
                  , r' :: U32
                  , j :: U32) :: (U8
                                 , U32
                                 , U32
                                 , U32) :: (U8
                                           , U32
                                           , U32
                                           , U32) :: (U8, U32, U32, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32
              , j :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v27' :: U32 = let v25' :: U32 = i :: U32
                  and v26' :: U32 = j :: U32
                  and v27' :: U32 = v25' :: U32 + v26' :: U32 :: U32
                  in v27' :: U32 :: U32
               in (3 :: U8, v27' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32
               , j :: U32) :: (U8
                              , U32
                              , U32
                              , U32) :: (U8
                                        , U32
                                        , U32
                                        , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_si8 : (U32, U32) -> U32
cogent_si8 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , j :: U32
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , j :: U32
                          , i :: U32) = let v2' :: Bool = let v' :: U32 = i :: U32
            and v1' :: U32 = 0 :: U32
            and v2' :: Bool = v' :: U32 == v1' :: U32 :: Bool
            in v2' :: Bool :: Bool
         in if v2' :: Bool
            then let (c' :: U8
                     , j :: U32) = let (v6' :: U32
                                       , j :: U32) = let v3' :: U32 = 1 :: U32
                     and v4' :: U32 = j :: U32
                     and v5' :: U32 = v4' :: U32 + v3' :: U32 :: U32
                     and (v6' :: U32
                         , j :: U32) = (j :: U32
                                       , v5' :: U32)
                     in (v6' :: U32
                        , j :: U32) :: (U32, U32)
                  in (0 :: U8, j :: U32) :: (U8
                                            , U32)
               in (c' :: U8
                  , j :: U32
                  , i :: U32) :: (U8, U32, U32)
            else let (c' :: U8
                     , i :: U32) = let (v10' :: U32
                                       , i :: U32) = let v7' :: U32 = 1 :: U32
                     and v8' :: U32 = i :: U32
                     and v9' :: U32 = v8' :: U32 + v7' :: U32 :: U32
                     and (v10' :: U32
                         , i :: U32) = (i :: U32
                                       , v9' :: U32)
                     in (v10' :: U32
                        , i :: U32) :: (U32, U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in (c' :: U8
                  , j :: U32
                  , i :: U32) :: (U8
                                 , U32
                                 , U32) :: (U8, U32, U32) :: (U8
                                                             , U32
                                                             , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , j :: U32
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32) = let (v16' :: U32
                                                       , j :: U32) = let v11' :: U32 = 2 :: U32
                     and v12' :: U32 = j :: U32
                     and v13' :: U32 = v11' :: U32 * v12' :: U32 :: U32
                     and v14' :: U32 = j :: U32
                     and v15' :: U32 = v13' :: U32
                     and (v16' :: U32
                         , j :: U32) = (v15' :: U32
                                       , v15' :: U32)
                     in (v16' :: U32
                        , j :: U32) :: (U32, U32)
                  in (0 :: U8, j :: U32) :: (U8
                                            , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v19' :: U32 = let v17' :: U32 = 2 :: U32
                           and v18' :: U32 = i :: U32
                           and v19' :: U32 = v17' :: U32 * v18' :: U32 :: U32
                           in v19' :: U32 :: U32
                        in (3 :: U8, v19' :: U32) :: (U8
                                                     , U32)
                     in (c' :: U8
                        , j :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32) :: (U8, U32, U32) :: (U8
                                                                    , U32
                                                                    , U32)
            in (c' :: U8
               , j :: U32
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_si9 : (U32, U32) -> U32
cogent_si9 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , j :: U32
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , j :: U32
                          , i :: U32) = let v2' :: Bool = let v' :: U32 = i :: U32
            and v1' :: U32 = 0 :: U32
            and v2' :: Bool = v' :: U32 == v1' :: U32 :: Bool
            in v2' :: Bool :: Bool
         in if v2' :: Bool
            then let (c' :: U8
                     , j :: U32) = let (v6' :: U32
                                       , j :: U32) = let v3' :: U32 = 1 :: U32
                     and v4' :: U32 = j :: U32
                     and v5' :: U32 = v4' :: U32 + v3' :: U32 :: U32
                     and (v6' :: U32
                         , j :: U32) = (j :: U32
                                       , v5' :: U32)
                     in (v6' :: U32
                        , j :: U32) :: (U32, U32)
                  in (0 :: U8, j :: U32) :: (U8
                                            , U32)
               in (c' :: U8
                  , j :: U32
                  , i :: U32) :: (U8, U32, U32)
            else let (c' :: U8
                     , i :: U32) = let (v10' :: U32
                                       , i :: U32) = let v7' :: U32 = 1 :: U32
                     and v8' :: U32 = i :: U32
                     and v9' :: U32 = v8' :: U32 + v7' :: U32 :: U32
                     and (v10' :: U32
                         , i :: U32) = (i :: U32
                                       , v9' :: U32)
                     in (v10' :: U32
                        , i :: U32) :: (U32, U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in (c' :: U8
                  , j :: U32
                  , i :: U32) :: (U8
                                 , U32
                                 , U32) :: (U8, U32, U32) :: (U8
                                                             , U32
                                                             , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , j :: U32
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , i :: U32) = let (v16' :: U32
                                                       , i :: U32) = let v11' :: U32 = 2 :: U32
                     and v12' :: U32 = j :: U32
                     and v13' :: U32 = v11' :: U32 * v12' :: U32 :: U32
                     and v14' :: U32 = i :: U32
                     and v15' :: U32 = v13' :: U32
                     and (v16' :: U32
                         , i :: U32) = (v15' :: U32
                                       , v15' :: U32)
                     in (v16' :: U32
                        , i :: U32) :: (U32, U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v19' :: U32 = let v17' :: U32 = 2 :: U32
                           and v18' :: U32 = j :: U32
                           and v19' :: U32 = v17' :: U32 * v18' :: U32 :: U32
                           in v19' :: U32 :: U32
                        in (3 :: U8, v19' :: U32) :: (U8
                                                     , U32)
                     in (c' :: U8
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32) :: (U8, U32, U32) :: (U8
                                                                    , U32
                                                                    , U32)
            in (c' :: U8
               , j :: U32
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sc1 : (U32, U32) -> U32
cogent_sc1 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v5' :: U32
                                            , i :: U32) = let v' :: U32 = 2 :: U32
            and v1' :: U32 = j :: U32
            and v2' :: U32 = v' :: U32 * v1' :: U32 :: U32
            and v3' :: U32 = i :: U32
            and v4' :: U32 = v3' :: U32 + v2' :: U32 :: U32
            and (v5' :: U32
                , i :: U32) = (v4' :: U32
                              , v4' :: U32)
            in (v5' :: U32
               , i :: U32) :: (U32, U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32) = let (v11' :: U32
                                                       , j :: U32) = let v6' :: U32 = 2 :: U32
                     and v7' :: U32 = i :: U32
                     and v8' :: U32 = v6' :: U32 * v7' :: U32 :: U32
                     and v9' :: U32 = j :: U32
                     and v10' :: U32 = v9' :: U32 + v8' :: U32 :: U32
                     and (v11' :: U32
                         , j :: U32) = (v10' :: U32
                                       , v10' :: U32)
                     in (v11' :: U32
                        , j :: U32) :: (U32, U32)
                  in (0 :: U8, j :: U32) :: (U8
                                            , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , i :: U32
                           , r' :: U32) = let (c' :: U8
                                              , i :: U32) = let (v17' :: U32
                                                                , i :: U32) = let v12' :: U32 = i :: U32
                              and v13' :: U32 = j :: U32
                              and v14' :: U32 = v12' :: U32 + v13' :: U32 :: U32
                              and v15' :: U32 = i :: U32
                              and v16' :: U32 = v14' :: U32
                              and (v17' :: U32
                                  , i :: U32) = (v16' :: U32
                                                , v16' :: U32)
                              in (v17' :: U32
                                 , i :: U32) :: (U32, U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , i :: U32
                                , r' :: U32)
                           else let (c' :: U8
                                    , r' :: U32) = let v20' :: U32 = let v18' :: U32 = j :: U32
                                    and v19' :: U32 = i :: U32
                                    and v20' :: U32 = v18' :: U32 * v19' :: U32 :: U32
                                    in v20' :: U32 :: U32
                                 in (3 :: U8, v20' :: U32) :: (U8
                                                              , U32)
                              in (c' :: U8
                                 , i :: U32
                                 , r' :: U32) :: (U8
                                                 , U32
                                                 , U32) :: (U8, U32, U32) :: (U8
                                                                             , U32
                                                                             , U32)
                     in (c' :: U8
                        , j :: U32
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32) :: (U8
                                                  , U32
                                                  , U32
                                                  , U32) :: (U8, U32, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sc2 : (U32, U32) -> U32
cogent_sc2 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v5' :: U32
                                            , i :: U32) = let v' :: U32 = 2 :: U32
            and v1' :: U32 = j :: U32
            and v2' :: U32 = v' :: U32 * v1' :: U32 :: U32
            and v3' :: U32 = i :: U32
            and v4' :: U32 = v3' :: U32 + v2' :: U32 :: U32
            and (v5' :: U32
                , i :: U32) = (v4' :: U32
                              , v4' :: U32)
            in (v5' :: U32
               , i :: U32) :: (U32, U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32
                                     , i :: U32) = let v8' :: Bool = let v6' :: U32 = i :: U32
                     and v7' :: U32 = 13 :: U32
                     and v8' :: Bool = v6' :: U32 > v7' :: U32 :: Bool
                     in v8' :: Bool :: Bool
                  in if v8' :: Bool
                     then let (c' :: U8
                              , j :: U32
                              , i :: U32) = let (c' :: U8
                                                , j :: U32) = let (v14' :: U32
                                                                  , j :: U32) = let v9' :: U32 = 2 :: U32
                                 and v10' :: U32 = i :: U32
                                 and v11' :: U32 = v9' :: U32 * v10' :: U32 :: U32
                                 and v12' :: U32 = j :: U32
                                 and v13' :: U32 = v12' :: U32 + v11' :: U32 :: U32
                                 and (v14' :: U32
                                     , j :: U32) = (v13' :: U32
                                                   , v13' :: U32)
                                 in (v14' :: U32
                                    , j :: U32) :: (U32, U32)
                              in (0 :: U8, j :: U32) :: (U8
                                                        , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8
                                   , j :: U32
                                   , i :: U32)
                              else let (c' :: U8
                                       , i :: U32) = let (v20' :: U32
                                                         , i :: U32) = let v15' :: U32 = 2 :: U32
                                       and v16' :: U32 = j :: U32
                                       and v17' :: U32 = v15' :: U32 * v16' :: U32 :: U32
                                       and v18' :: U32 = i :: U32
                                       and v19' :: U32 = v18' :: U32 + v17' :: U32 :: U32
                                       and (v20' :: U32
                                           , i :: U32) = (v19' :: U32
                                                         , v19' :: U32)
                                       in (v20' :: U32
                                          , i :: U32) :: (U32, U32)
                                    in (0 :: U8, i :: U32) :: (U8
                                                              , U32)
                                 in (c' :: U8
                                    , j :: U32
                                    , i :: U32) :: (U8
                                                   , U32
                                                   , U32) :: (U8
                                                             , U32
                                                             , U32) :: (U8
                                                                       , U32
                                                                       , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8, U32, U32)
                     else let (c' :: U8
                              , i :: U32
                              , j :: U32) = let (c' :: U8
                                                , i :: U32) = let (v24' :: U32
                                                                  , i :: U32) = let v21' :: U32 = 1 :: U32
                                 and v22' :: U32 = i :: U32
                                 and v23' :: U32 = v22' :: U32 + v21' :: U32 :: U32
                                 and (v24' :: U32
                                     , i :: U32) = (i :: U32
                                                   , v23' :: U32)
                                 in (v24' :: U32
                                    , i :: U32) :: (U32, U32)
                              in (0 :: U8, i :: U32) :: (U8
                                                        , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8
                                   , i :: U32
                                   , j :: U32)
                              else let (c' :: U8
                                       , j :: U32) = let (v28' :: U32
                                                         , j :: U32) = let v25' :: U32 = 1 :: U32
                                       and v26' :: U32 = j :: U32
                                       and v27' :: U32 = v26' :: U32 - v25' :: U32 :: U32
                                       and (v28' :: U32
                                           , j :: U32) = (j :: U32
                                                         , v27' :: U32)
                                       in (v28' :: U32
                                          , j :: U32) :: (U32, U32)
                                    in (0 :: U8, j :: U32) :: (U8
                                                              , U32)
                                 in (c' :: U8
                                    , i :: U32
                                    , j :: U32) :: (U8
                                                   , U32
                                                   , U32) :: (U8
                                                             , U32
                                                             , U32) :: (U8
                                                                       , U32
                                                                       , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8
                                          , U32
                                          , U32) :: (U8, U32, U32) :: (U8
                                                                      , U32
                                                                      , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , j :: U32
                           , i :: U32
                           , r' :: U32) = let (c' :: U8
                                              , j :: U32) = let v31' :: Bool = let v29' :: U32 = j :: U32
                              and v30' :: U32 = 0 :: U32
                              and v31' :: Bool = v29' :: U32 == v30' :: U32 :: Bool
                              in v31' :: Bool :: Bool
                           in if v31' :: Bool
                              then let (c' :: U8
                                       , j :: U32) = let (v35' :: U32
                                                         , j :: U32) = let v32' :: U32 = 15 :: U32
                                       and v33' :: U32 = j :: U32
                                       and v34' :: U32 = v32' :: U32
                                       and (v35' :: U32
                                           , j :: U32) = (v34' :: U32
                                                         , v34' :: U32)
                                       in (v35' :: U32
                                          , j :: U32) :: (U32, U32)
                                    in (0 :: U8, j :: U32) :: (U8
                                                              , U32)
                                 in (c' :: U8, j :: U32) :: (U8
                                                            , U32)
                              else let c' :: U8 = 0 :: U8
                                 in (c' :: U8, j :: U32) :: (U8
                                                            , U32) :: (U8
                                                                      , U32) :: (U8
                                                                                , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , j :: U32
                                , i :: U32
                                , r' :: U32)
                           else let (c' :: U8
                                    , i :: U32
                                    , r' :: U32) = let (c' :: U8
                                                       , i :: U32) = let (v39' :: U32
                                                                         , i :: U32) = let v36' :: U32 = j :: U32
                                       and v37' :: U32 = i :: U32
                                       and v38' :: U32 = v37' :: U32 + v36' :: U32 :: U32
                                       and (v39' :: U32
                                           , i :: U32) = (v38' :: U32
                                                         , v38' :: U32)
                                       in (v39' :: U32
                                          , i :: U32) :: (U32, U32)
                                    in (0 :: U8, i :: U32) :: (U8
                                                              , U32)
                                 in if c' :: U8 > 0 :: U8 :: Bool
                                    then (c' :: U8
                                         , i :: U32
                                         , r' :: U32)
                                    else let (c' :: U8
                                             , r' :: U32) = let v40' :: U32 = i :: U32
                                          in (3 :: U8, v40' :: U32) :: (U8
                                                                       , U32)
                                       in (c' :: U8
                                          , i :: U32
                                          , r' :: U32) :: (U8
                                                          , U32
                                                          , U32) :: (U8
                                                                    , U32
                                                                    , U32) :: (U8
                                                                              , U32
                                                                              , U32)
                              in (c' :: U8
                                 , j :: U32
                                 , i :: U32
                                 , r' :: U32) :: (U8
                                                 , U32
                                                 , U32
                                                 , U32) :: (U8
                                                           , U32
                                                           , U32
                                                           , U32) :: (U8
                                                                     , U32
                                                                     , U32
                                                                     , U32)
                     in (c' :: U8
                        , j :: U32
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32) :: (U8
                                                  , U32
                                                  , U32
                                                  , U32) :: (U8, U32, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd1 : (U32, U32) -> U32
cogent_sd1 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v5' :: U32
                                            , i :: U32) = let v' :: U32 = 2 :: U32
            and v1' :: U32 = j :: U32
            and v2' :: U32 = v' :: U32 * v1' :: U32 :: U32
            and v3' :: U32 = i :: U32
            and v4' :: U32 = v3' :: U32 + v2' :: U32 :: U32
            and (v5' :: U32
                , i :: U32) = (v4' :: U32
                              , v4' :: U32)
            in (v5' :: U32
               , i :: U32) :: (U32, U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , r' :: U32) = let v8' :: U32 = let v6' :: U32 = j :: U32
                  and v7' :: U32 = 7 :: U32
                  and v8' :: U32 = v6' :: U32 + v7' :: U32 :: U32
                  in v8' :: U32 :: U32
               and (c' :: U8
                   , j :: U32
                   , r' :: U32) = let k :: U32 = v8' :: U32
                  and (c' :: U8
                      , j :: U32
                      , k :: U32
                      , r' :: U32) = let (c' :: U8
                                         , j :: U32) = let (v14' :: U32
                                                           , j :: U32) = let v9' :: U32 = i :: U32
                           and v10' :: U32 = k :: U32
                           and v11' :: U32 = v9' :: U32 + v10' :: U32 :: U32
                           and v12' :: U32 = j :: U32
                           and v13' :: U32 = v12' :: U32 + v11' :: U32 :: U32
                           and (v14' :: U32
                               , j :: U32) = (v13' :: U32
                                             , v13' :: U32)
                           in (v14' :: U32
                              , j :: U32) :: (U32, U32)
                        in (0 :: U8, j :: U32) :: (U8
                                                  , U32)
                     in if c' :: U8 > 0 :: U8 :: Bool
                        then (c' :: U8
                             , j :: U32
                             , k :: U32
                             , r' :: U32)
                        else let (c' :: U8
                                 , k :: U32
                                 , r' :: U32) = let (c' :: U8
                                                    , k :: U32) = let (v20' :: U32
                                                                      , k :: U32) = let v15' :: U32 = j :: U32
                                    and v16' :: U32 = i :: U32
                                    and v17' :: U32 = v15' :: U32 + v16' :: U32 :: U32
                                    and v18' :: U32 = k :: U32
                                    and v19' :: U32 = v18' :: U32 + v17' :: U32 :: U32
                                    and (v20' :: U32
                                        , k :: U32) = (v19' :: U32
                                                      , v19' :: U32)
                                    in (v20' :: U32
                                       , k :: U32) :: (U32, U32)
                                 in (0 :: U8, k :: U32) :: (U8
                                                           , U32)
                              in if c' :: U8 > 0 :: U8 :: Bool
                                 then (c' :: U8
                                      , k :: U32
                                      , r' :: U32)
                                 else let (c' :: U8
                                          , r' :: U32) = let v21' :: U32 = k :: U32
                                       in (3 :: U8, v21' :: U32) :: (U8
                                                                    , U32)
                                    in (c' :: U8
                                       , k :: U32
                                       , r' :: U32) :: (U8
                                                       , U32
                                                       , U32) :: (U8
                                                                 , U32
                                                                 , U32) :: (U8
                                                                           , U32
                                                                           , U32)
                           in (c' :: U8
                              , j :: U32
                              , k :: U32
                              , r' :: U32) :: (U8
                                              , U32
                                              , U32
                                              , U32) :: (U8
                                                        , U32
                                                        , U32
                                                        , U32) :: (U8
                                                                  , U32
                                                                  , U32
                                                                  , U32)
                  in (c' :: U8
                     , j :: U32
                     , r' :: U32) :: (U8, U32, U32)
               in (c' :: U8
                  , j :: U32
                  , r' :: U32) :: (U8, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd2 : (U32, U32) -> U32
cogent_sd2 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v5' :: U32
                                            , i :: U32) = let v' :: U32 = 2 :: U32
            and v1' :: U32 = j :: U32
            and v2' :: U32 = v' :: U32 * v1' :: U32 :: U32
            and v3' :: U32 = i :: U32
            and v4' :: U32 = v3' :: U32 + v2' :: U32 :: U32
            and (v5' :: U32
                , i :: U32) = (v4' :: U32
                              , v4' :: U32)
            in (v5' :: U32
               , i :: U32) :: (U32, U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32) = let v8' :: U32 = let v6' :: U32 = j :: U32
                     and v7' :: U32 = 7 :: U32
                     and v8' :: U32 = v6' :: U32 + v7' :: U32 :: U32
                     in v8' :: U32 :: U32
                  and (c' :: U8
                      , j :: U32) = let i :: U32 = v8' :: U32
                     and (c' :: U8
                         , j :: U32
                         , i :: U32) = let (c' :: U8
                                           , j :: U32) = let (v14' :: U32
                                                             , j :: U32) = let v9' :: U32 = i :: U32
                              and v10' :: U32 = i :: U32
                              and v11' :: U32 = v9' :: U32 + v10' :: U32 :: U32
                              and v12' :: U32 = j :: U32
                              and v13' :: U32 = v12' :: U32 + v11' :: U32 :: U32
                              and (v14' :: U32
                                  , j :: U32) = (v13' :: U32
                                                , v13' :: U32)
                              in (v14' :: U32
                                 , j :: U32) :: (U32, U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , j :: U32
                                , i :: U32)
                           else let (c' :: U8
                                    , i :: U32) = let (v20' :: U32
                                                      , i :: U32) = let v15' :: U32 = j :: U32
                                    and v16' :: U32 = i :: U32
                                    and v17' :: U32 = v15' :: U32 + v16' :: U32 :: U32
                                    and v18' :: U32 = i :: U32
                                    and v19' :: U32 = v18' :: U32 + v17' :: U32 :: U32
                                    and (v20' :: U32
                                        , i :: U32) = (v19' :: U32
                                                      , v19' :: U32)
                                    in (v20' :: U32
                                       , i :: U32) :: (U32, U32)
                                 in (0 :: U8, i :: U32) :: (U8
                                                           , U32)
                              in (c' :: U8
                                 , j :: U32
                                 , i :: U32) :: (U8
                                                , U32
                                                , U32) :: (U8, U32, U32) :: (U8
                                                                            , U32
                                                                            , U32)
                     in (c' :: U8, j :: U32) :: (U8
                                                , U32)
                  in (c' :: U8, j :: U32) :: (U8
                                             , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v21' :: U32 = i :: U32
                        in (3 :: U8, v21' :: U32) :: (U8
                                                     , U32)
                     in (c' :: U8
                        , j :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32) :: (U8, U32, U32) :: (U8
                                                                    , U32
                                                                    , U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd3 : (U32, U32) -> U32
cogent_sd3 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v5' :: U32
                                            , i :: U32) = let v' :: U32 = 2 :: U32
            and v1' :: U32 = j :: U32
            and v2' :: U32 = v' :: U32 * v1' :: U32 :: U32
            and v3' :: U32 = i :: U32
            and v4' :: U32 = v3' :: U32 + v2' :: U32 :: U32
            and (v5' :: U32
                , i :: U32) = (v4' :: U32
                              , v4' :: U32)
            in (v5' :: U32
               , i :: U32) :: (U32, U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32) = let v8' :: U32 = let v6' :: U32 = j :: U32
                     and v7' :: U32 = 7 :: U32
                     and v8' :: U32 = v6' :: U32 + v7' :: U32 :: U32
                     in v8' :: U32 :: U32
                  and (c' :: U8
                      , j :: U32) = let k :: U32 = v8' :: U32
                     and (c' :: U8
                         , j :: U32
                         , k :: U32) = let (c' :: U8
                                           , j :: U32) = let (v14' :: U32
                                                             , j :: U32) = let v9' :: U32 = i :: U32
                              and v10' :: U32 = k :: U32
                              and v11' :: U32 = v9' :: U32 + v10' :: U32 :: U32
                              and v12' :: U32 = j :: U32
                              and v13' :: U32 = v12' :: U32 + v11' :: U32 :: U32
                              and (v14' :: U32
                                  , j :: U32) = (v13' :: U32
                                                , v13' :: U32)
                              in (v14' :: U32
                                 , j :: U32) :: (U32, U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , j :: U32
                                , k :: U32)
                           else let (c' :: U8
                                    , k :: U32) = let (v18' :: U32
                                                      , k :: U32) = let v15' :: U32 = 15 :: U32
                                    and v16' :: U32 = k :: U32
                                    and v17' :: U32 = v15' :: U32
                                    and (v18' :: U32
                                        , k :: U32) = (v17' :: U32
                                                      , v17' :: U32)
                                    in (v18' :: U32
                                       , k :: U32) :: (U32, U32)
                                 in (0 :: U8, k :: U32) :: (U8
                                                           , U32)
                              in (c' :: U8
                                 , j :: U32
                                 , k :: U32) :: (U8
                                                , U32
                                                , U32) :: (U8, U32, U32) :: (U8
                                                                            , U32
                                                                            , U32)
                     in (c' :: U8, j :: U32) :: (U8
                                                , U32)
                  in (c' :: U8, j :: U32) :: (U8
                                             , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , i :: U32
                           , r' :: U32) = let (c' :: U8
                                              , i :: U32) = let (v24' :: U32
                                                                , i :: U32) = let v19' :: U32 = j :: U32
                              and v20' :: U32 = i :: U32
                              and v21' :: U32 = v19' :: U32 + v20' :: U32 :: U32
                              and v22' :: U32 = i :: U32
                              and v23' :: U32 = v22' :: U32 + v21' :: U32 :: U32
                              and (v24' :: U32
                                  , i :: U32) = (v23' :: U32
                                                , v23' :: U32)
                              in (v24' :: U32
                                 , i :: U32) :: (U32, U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , i :: U32
                                , r' :: U32)
                           else let (c' :: U8
                                    , r' :: U32) = let v25' :: U32 = i :: U32
                                 in (3 :: U8, v25' :: U32) :: (U8
                                                              , U32)
                              in (c' :: U8
                                 , i :: U32
                                 , r' :: U32) :: (U8
                                                 , U32
                                                 , U32) :: (U8, U32, U32) :: (U8
                                                                             , U32
                                                                             , U32)
                     in (c' :: U8
                        , j :: U32
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32) :: (U8
                                                  , U32
                                                  , U32
                                                  , U32) :: (U8, U32, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd4 : (U32, U32) -> U32
cogent_sd4 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v5' :: U32
                                            , i :: U32) = let v' :: U32 = 2 :: U32
            and v1' :: U32 = j :: U32
            and v2' :: U32 = v' :: U32 * v1' :: U32 :: U32
            and v3' :: U32 = i :: U32
            and v4' :: U32 = v3' :: U32 + v2' :: U32 :: U32
            and (v5' :: U32
                , i :: U32) = (v4' :: U32
                              , v4' :: U32)
            in (v5' :: U32
               , i :: U32) :: (U32, U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32) = let v8' :: Bool = let v6' :: U32 = i :: U32
                     and v7' :: U32 = 0 :: U32
                     and v8' :: Bool = v6' :: U32 == v7' :: U32 :: Bool
                     in v8' :: Bool :: Bool
                  in if v8' :: Bool
                     then let (c' :: U8
                              , j :: U32) = let v11' :: U32 = let v9' :: U32 = j :: U32
                              and v10' :: U32 = 7 :: U32
                              and v11' :: U32 = v9' :: U32 + v10' :: U32 :: U32
                              in v11' :: U32 :: U32
                           and (c' :: U8
                               , j :: U32) = let k :: U32 = v11' :: U32
                              and (c' :: U8
                                  , j :: U32
                                  , k :: U32) = let (c' :: U8
                                                    , j :: U32) = let (v17' :: U32
                                                                      , j :: U32) = let v12' :: U32 = i :: U32
                                       and v13' :: U32 = k :: U32
                                       and v14' :: U32 = v12' :: U32 + v13' :: U32 :: U32
                                       and v15' :: U32 = j :: U32
                                       and v16' :: U32 = v15' :: U32 + v14' :: U32 :: U32
                                       and (v17' :: U32
                                           , j :: U32) = (v16' :: U32
                                                         , v16' :: U32)
                                       in (v17' :: U32
                                          , j :: U32) :: (U32, U32)
                                    in (0 :: U8, j :: U32) :: (U8
                                                              , U32)
                                 in if c' :: U8 > 0 :: U8 :: Bool
                                    then (c' :: U8
                                         , j :: U32
                                         , k :: U32)
                                    else let (c' :: U8
                                             , k :: U32) = let (v21' :: U32
                                                               , k :: U32) = let v18' :: U32 = 15 :: U32
                                             and v19' :: U32 = k :: U32
                                             and v20' :: U32 = v18' :: U32
                                             and (v21' :: U32
                                                 , k :: U32) = (v20' :: U32
                                                               , v20' :: U32)
                                             in (v21' :: U32
                                                , k :: U32) :: (U32, U32)
                                          in (0 :: U8, k :: U32) :: (U8
                                                                    , U32)
                                       in (c' :: U8
                                          , j :: U32
                                          , k :: U32) :: (U8
                                                         , U32
                                                         , U32) :: (U8
                                                                   , U32
                                                                   , U32) :: (U8
                                                                             , U32
                                                                             , U32)
                              in (c' :: U8, j :: U32) :: (U8
                                                         , U32)
                           in (c' :: U8, j :: U32) :: (U8
                                                      , U32)
                        in (c' :: U8, j :: U32) :: (U8
                                                   , U32)
                     else let (c' :: U8
                              , j :: U32) = let (v27' :: U32
                                                , j :: U32) = let v22' :: U32 = i :: U32
                              and v23' :: U32 = 3 :: U32
                              and v24' :: U32 = v22' :: U32 + v23' :: U32 :: U32
                              and v25' :: U32 = j :: U32
                              and v26' :: U32 = v24' :: U32
                              and (v27' :: U32
                                  , j :: U32) = (v26' :: U32
                                                , v26' :: U32)
                              in (v27' :: U32
                                 , j :: U32) :: (U32, U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8, j :: U32) :: (U8
                                                   , U32) :: (U8, U32) :: (U8
                                                                          , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , i :: U32
                           , r' :: U32) = let (c' :: U8
                                              , i :: U32) = let (v33' :: U32
                                                                , i :: U32) = let v28' :: U32 = j :: U32
                              and v29' :: U32 = i :: U32
                              and v30' :: U32 = v28' :: U32 + v29' :: U32 :: U32
                              and v31' :: U32 = i :: U32
                              and v32' :: U32 = v31' :: U32 + v30' :: U32 :: U32
                              and (v33' :: U32
                                  , i :: U32) = (v32' :: U32
                                                , v32' :: U32)
                              in (v33' :: U32
                                 , i :: U32) :: (U32, U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , i :: U32
                                , r' :: U32)
                           else let (c' :: U8
                                    , r' :: U32) = let v34' :: U32 = i :: U32
                                 in (3 :: U8, v34' :: U32) :: (U8
                                                              , U32)
                              in (c' :: U8
                                 , i :: U32
                                 , r' :: U32) :: (U8
                                                 , U32
                                                 , U32) :: (U8, U32, U32) :: (U8
                                                                             , U32
                                                                             , U32)
                     in (c' :: U8
                        , j :: U32
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32) :: (U8
                                                  , U32
                                                  , U32
                                                  , U32) :: (U8, U32, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd5 : (U32, U32) -> U32
cogent_sd5 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v5' :: U32
                                            , i :: U32) = let v' :: U32 = 2 :: U32
            and v1' :: U32 = j :: U32
            and v2' :: U32 = v' :: U32 * v1' :: U32 :: U32
            and v3' :: U32 = i :: U32
            and v4' :: U32 = v3' :: U32 + v2' :: U32 :: U32
            and (v5' :: U32
                , i :: U32) = (v4' :: U32
                              , v4' :: U32)
            in (v5' :: U32
               , i :: U32) :: (U32, U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , r' :: U32) = let v6' :: U32 = defaultVal[U32]{{}} :: () -> U32 () :: () :: U32
               and (c' :: U8
                   , j :: U32
                   , r' :: U32) = let k1 :: U32 = v6' :: U32
                  and (c' :: U8
                      , k1 :: U32
                      , j :: U32
                      , r' :: U32) = let v7' :: U32 = defaultVal[U32]{{}} :: () -> U32 () :: () :: U32
                     and (c' :: U8
                         , k1 :: U32
                         , j :: U32
                         , r' :: U32) = let k2 :: U32 = v7' :: U32
                        and (c' :: U8
                            , k1 :: U32
                            , k2 :: U32
                            , j :: U32
                            , r' :: U32) = let (c' :: U8
                                               , k1 :: U32) = let (v13' :: U32
                                                                  , k1 :: U32) = let v8' :: U32 = i :: U32
                                 and v9' :: U32 = 1 :: U32
                                 and v10' :: U32 = v8' :: U32 + v9' :: U32 :: U32
                                 and v11' :: U32 = k1 :: U32
                                 and v12' :: U32 = v10' :: U32
                                 and (v13' :: U32
                                     , k1 :: U32) = (v12' :: U32
                                                    , v12' :: U32)
                                 in (v13' :: U32
                                    , k1 :: U32) :: (U32, U32)
                              in (0 :: U8, k1 :: U32) :: (U8
                                                         , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8
                                   , k1 :: U32
                                   , k2 :: U32
                                   , j :: U32
                                   , r' :: U32)
                              else let (c' :: U8
                                       , k2 :: U32
                                       , j :: U32
                                       , k1 :: U32
                                       , r' :: U32) = let (c' :: U8
                                                          , k2 :: U32) = let (v19' :: U32
                                                                             , k2 :: U32) = let v14' :: U32 = j :: U32
                                          and v15' :: U32 = 1 :: U32
                                          and v16' :: U32 = v14' :: U32 + v15' :: U32 :: U32
                                          and v17' :: U32 = k2 :: U32
                                          and v18' :: U32 = v16' :: U32
                                          and (v19' :: U32
                                              , k2 :: U32) = (v18' :: U32
                                                             , v18' :: U32)
                                          in (v19' :: U32
                                             , k2 :: U32) :: (U32, U32)
                                       in (0 :: U8, k2 :: U32) :: (U8
                                                                  , U32)
                                    in if c' :: U8 > 0 :: U8 :: Bool
                                       then (c' :: U8
                                            , k2 :: U32
                                            , j :: U32
                                            , k1 :: U32
                                            , r' :: U32)
                                       else let (c' :: U8
                                                , j :: U32
                                                , k1 :: U32
                                                , r' :: U32) = let (c' :: U8
                                                                   , j :: U32) = let (v25' :: U32
                                                                                     , j :: U32) = let v20' :: U32 = k1 :: U32
                                                   and v21' :: U32 = k2 :: U32
                                                   and v22' :: U32 = v20' :: U32 + v21' :: U32 :: U32
                                                   and v23' :: U32 = j :: U32
                                                   and v24' :: U32 = v23' :: U32 + v22' :: U32 :: U32
                                                   and (v25' :: U32
                                                       , j :: U32) = (v24' :: U32
                                                                     , v24' :: U32)
                                                   in (v25' :: U32
                                                      , j :: U32) :: (U32, U32)
                                                in (0 :: U8, j :: U32) :: (U8
                                                                          , U32)
                                             in if c' :: U8 > 0 :: U8 :: Bool
                                                then (c' :: U8
                                                     , j :: U32
                                                     , k1 :: U32
                                                     , r' :: U32)
                                                else let (c' :: U8
                                                         , k1 :: U32
                                                         , r' :: U32) = let (c' :: U8
                                                                            , k1 :: U32) = let (v31' :: U32
                                                                                               , k1 :: U32) = let v26' :: U32 = j :: U32
                                                            and v27' :: U32 = i :: U32
                                                            and v28' :: U32 = v26' :: U32 + v27' :: U32 :: U32
                                                            and v29' :: U32 = k1 :: U32
                                                            and v30' :: U32 = v29' :: U32 + v28' :: U32 :: U32
                                                            and (v31' :: U32
                                                                , k1 :: U32) = (v30' :: U32
                                                                               , v30' :: U32)
                                                            in (v31' :: U32
                                                               , k1 :: U32) :: (U32
                                                                               , U32)
                                                         in (0 :: U8
                                                            , k1 :: U32) :: (U8
                                                                            , U32)
                                                      in if c' :: U8 > 0 :: U8 :: Bool
                                                         then (c' :: U8
                                                              , k1 :: U32
                                                              , r' :: U32)
                                                         else let (c' :: U8
                                                                  , r' :: U32) = let v32' :: U32 = k1 :: U32
                                                               in (3 :: U8
                                                                  , v32' :: U32) :: (U8
                                                                                    , U32)
                                                            in (c' :: U8
                                                               , k1 :: U32
                                                               , r' :: U32) :: (U8
                                                                               , U32
                                                                               , U32) :: (U8
                                                                                         , U32
                                                                                         , U32) :: (U8
                                                                                                   , U32
                                                                                                   , U32)
                                                   in (c' :: U8
                                                      , j :: U32
                                                      , k1 :: U32
                                                      , r' :: U32) :: (U8
                                                                      , U32
                                                                      , U32
                                                                      , U32) :: (U8
                                                                                , U32
                                                                                , U32
                                                                                , U32) :: (U8
                                                                                          , U32
                                                                                          , U32
                                                                                          , U32)
                                          in (c' :: U8
                                             , k2 :: U32
                                             , j :: U32
                                             , k1 :: U32
                                             , r' :: U32) :: (U8
                                                             , U32
                                                             , U32
                                                             , U32
                                                             , U32) :: (U8
                                                                       , U32
                                                                       , U32
                                                                       , U32
                                                                       , U32) :: (U8
                                                                                 , U32
                                                                                 , U32
                                                                                 , U32
                                                                                 , U32)
                                 in (c' :: U8
                                    , k1 :: U32
                                    , k2 :: U32
                                    , j :: U32
                                    , r' :: U32) :: (U8
                                                    , U32
                                                    , U32
                                                    , U32
                                                    , U32) :: (U8
                                                              , U32
                                                              , U32
                                                              , U32
                                                              , U32) :: (U8
                                                                        , U32
                                                                        , U32
                                                                        , U32
                                                                        , U32)
                        in (c' :: U8
                           , k1 :: U32
                           , j :: U32
                           , r' :: U32) :: (U8
                                           , U32
                                           , U32
                                           , U32)
                     in (c' :: U8
                        , k1 :: U32
                        , j :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32)
                  in (c' :: U8
                     , j :: U32
                     , r' :: U32) :: (U8, U32, U32)
               in (c' :: U8
                  , j :: U32
                  , r' :: U32) :: (U8, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd6 : (U32, U32) -> U32
cogent_sd6 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v5' :: U32
                                            , i :: U32) = let v' :: U32 = 2 :: U32
            and v1' :: U32 = j :: U32
            and v2' :: U32 = v' :: U32 * v1' :: U32 :: U32
            and v3' :: U32 = i :: U32
            and v4' :: U32 = v3' :: U32 + v2' :: U32 :: U32
            and (v5' :: U32
                , i :: U32) = (v4' :: U32
                              , v4' :: U32)
            in (v5' :: U32
               , i :: U32) :: (U32, U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , r' :: U32) = let v6' :: U32 = defaultVal[U32]{{}} :: () -> U32 () :: () :: U32
               and (c' :: U8
                   , j :: U32
                   , r' :: U32) = let k1 :: U32 = v6' :: U32
                  and (c' :: U8
                      , k1 :: U32
                      , j :: U32
                      , r' :: U32) = let v7' :: U32 = 42 :: U32
                     and (c' :: U8
                         , k1 :: U32
                         , j :: U32
                         , r' :: U32) = let k2 :: U32 = v7' :: U32
                        and (c' :: U8
                            , k1 :: U32
                            , j :: U32
                            , r' :: U32) = let (c' :: U8
                                               , k1 :: U32) = let (v13' :: U32
                                                                  , k1 :: U32) = let v8' :: U32 = i :: U32
                                 and v9' :: U32 = 1 :: U32
                                 and v10' :: U32 = v8' :: U32 + v9' :: U32 :: U32
                                 and v11' :: U32 = k1 :: U32
                                 and v12' :: U32 = v10' :: U32
                                 and (v13' :: U32
                                     , k1 :: U32) = (v12' :: U32
                                                    , v12' :: U32)
                                 in (v13' :: U32
                                    , k1 :: U32) :: (U32, U32)
                              in (0 :: U8, k1 :: U32) :: (U8
                                                         , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8
                                   , k1 :: U32
                                   , j :: U32
                                   , r' :: U32)
                              else let (c' :: U8
                                       , j :: U32
                                       , k1 :: U32
                                       , r' :: U32) = let (c' :: U8
                                                          , j :: U32) = let (v19' :: U32
                                                                            , j :: U32) = let v14' :: U32 = k1 :: U32
                                          and v15' :: U32 = k2 :: U32
                                          and v16' :: U32 = v14' :: U32 + v15' :: U32 :: U32
                                          and v17' :: U32 = j :: U32
                                          and v18' :: U32 = v17' :: U32 + v16' :: U32 :: U32
                                          and (v19' :: U32
                                              , j :: U32) = (v18' :: U32
                                                            , v18' :: U32)
                                          in (v19' :: U32
                                             , j :: U32) :: (U32, U32)
                                       in (0 :: U8, j :: U32) :: (U8
                                                                 , U32)
                                    in if c' :: U8 > 0 :: U8 :: Bool
                                       then (c' :: U8
                                            , j :: U32
                                            , k1 :: U32
                                            , r' :: U32)
                                       else let (c' :: U8
                                                , k1 :: U32
                                                , r' :: U32) = let (c' :: U8
                                                                   , k1 :: U32) = let (v25' :: U32
                                                                                      , k1 :: U32) = let v20' :: U32 = j :: U32
                                                   and v21' :: U32 = i :: U32
                                                   and v22' :: U32 = v20' :: U32 + v21' :: U32 :: U32
                                                   and v23' :: U32 = k1 :: U32
                                                   and v24' :: U32 = v23' :: U32 + v22' :: U32 :: U32
                                                   and (v25' :: U32
                                                       , k1 :: U32) = (v24' :: U32
                                                                      , v24' :: U32)
                                                   in (v25' :: U32
                                                      , k1 :: U32) :: (U32, U32)
                                                in (0 :: U8, k1 :: U32) :: (U8
                                                                           , U32)
                                             in if c' :: U8 > 0 :: U8 :: Bool
                                                then (c' :: U8
                                                     , k1 :: U32
                                                     , r' :: U32)
                                                else let (c' :: U8
                                                         , r' :: U32) = let v26' :: U32 = k1 :: U32
                                                      in (3 :: U8
                                                         , v26' :: U32) :: (U8
                                                                           , U32)
                                                   in (c' :: U8
                                                      , k1 :: U32
                                                      , r' :: U32) :: (U8
                                                                      , U32
                                                                      , U32) :: (U8
                                                                                , U32
                                                                                , U32) :: (U8
                                                                                          , U32
                                                                                          , U32)
                                          in (c' :: U8
                                             , j :: U32
                                             , k1 :: U32
                                             , r' :: U32) :: (U8
                                                             , U32
                                                             , U32
                                                             , U32) :: (U8
                                                                       , U32
                                                                       , U32
                                                                       , U32) :: (U8
                                                                                 , U32
                                                                                 , U32
                                                                                 , U32)
                                 in (c' :: U8
                                    , k1 :: U32
                                    , j :: U32
                                    , r' :: U32) :: (U8
                                                    , U32
                                                    , U32
                                                    , U32) :: (U8
                                                              , U32
                                                              , U32
                                                              , U32) :: (U8
                                                                        , U32
                                                                        , U32
                                                                        , U32)
                        in (c' :: U8
                           , k1 :: U32
                           , j :: U32
                           , r' :: U32) :: (U8
                                           , U32
                                           , U32
                                           , U32)
                     in (c' :: U8
                        , k1 :: U32
                        , j :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32)
                  in (c' :: U8
                     , j :: U32
                     , r' :: U32) :: (U8, U32, U32)
               in (c' :: U8
                  , j :: U32
                  , r' :: U32) :: (U8, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_ss1 : U32 -> U32
cogent_ss1 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let s' :: U32 = i :: U32
      and s1' :: Bool = s' :: U32 == 0 :: U32 :: Bool
      and (c' :: U8
          , r' :: U32) = let (c' :: U8
                             , r' :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , r' :: U32) = let v2' :: U32 = i :: U32
                  in (3 :: U8, v2' :: U32) :: (U8
                                              , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32)
            else (0 :: U8, r' :: U32) :: (U8
                                         , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8, r' :: U32)
            else let c' :: U8 = 0 :: U8
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , r' :: U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss2 : U32 -> U32
cogent_ss2 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let s' :: U32 = i :: U32
      and s1' :: Bool = True :: Bool
      and (c' :: U8
          , r' :: U32) = let (c' :: U8
                             , r' :: U32) = let (c' :: U8
                                                , r' :: U32) = let v1' :: U32 = 0 :: U32
               in (3 :: U8, v1' :: U32) :: (U8
                                           , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8, r' :: U32)
            else let c' :: U8 = 0 :: U8
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , r' :: U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss3 : U32 -> U32
cogent_ss3 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let s' :: U32 = i :: U32
      and (s1' :: Bool
          , s2' :: Bool) = (s' :: U32 == 0 :: U32 :: Bool
                           , True :: Bool)
      and (c' :: U8
          , r' :: U32) = let (c' :: U8
                             , r' :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , r' :: U32) = let v2' :: U32 = i :: U32
                  in (3 :: U8, v2' :: U32) :: (U8
                                              , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32)
            else (0 :: U8, r' :: U32) :: (U8
                                         , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8, r' :: U32)
            else let (c' :: U8
                     , r' :: U32) = let (c' :: U8
                                        , r' :: U32) = let (c' :: U8
                                                           , r' :: U32) = let v3' :: U32 = 0 :: U32
                        in (3 :: U8, v3' :: U32) :: (U8
                                                    , U32)
                     in (c' :: U8, r' :: U32) :: (U8
                                                 , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8, r' :: U32)
                     else let c' :: U8 = 0 :: U8
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32) :: (U8, U32) :: (U8
                                                                           , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , r' :: U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss4 : U32 -> U32
cogent_ss4 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let s' :: U32 = i :: U32
      and (s1' :: Bool
          , s2' :: Bool
          , s3' :: Bool) = (s' :: U32 == 0 :: U32 :: Bool
                           , s' :: U32 == 1 :: U32 :: Bool
                           , True :: Bool)
      and (c' :: U8
          , r' :: U32) = let (c' :: U8
                             , r' :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , r' :: U32) = let v3' :: U32 = i :: U32
                  in (3 :: U8, v3' :: U32) :: (U8
                                              , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32)
            else (0 :: U8, r' :: U32) :: (U8
                                         , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8, r' :: U32)
            else let (c' :: U8
                     , r' :: U32) = let (c' :: U8
                                        , r' :: U32) = if s1' :: Bool || s2' :: Bool :: Bool
                     then let (c' :: U8
                              , r' :: U32) = let v6' :: U32 = let v4' :: U32 = i :: U32
                              and v5' :: U32 = 5 :: U32
                              and v6' :: U32 = v4' :: U32 + v5' :: U32 :: U32
                              in v6' :: U32 :: U32
                           in (3 :: U8, v6' :: U32) :: (U8
                                                       , U32)
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32)
                     else (0 :: U8, r' :: U32) :: (U8
                                                  , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8, r' :: U32)
                     else let (c' :: U8
                              , r' :: U32) = let (c' :: U8
                                                 , r' :: U32) = let (c' :: U8
                                                                    , r' :: U32) = let v7' :: U32 = 0 :: U32
                                 in (3 :: U8, v7' :: U32) :: (U8
                                                             , U32)
                              in (c' :: U8, r' :: U32) :: (U8
                                                          , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8, r' :: U32)
                              else let c' :: U8 = 0 :: U8
                                 in (c' :: U8, r' :: U32) :: (U8
                                                             , U32) :: (U8
                                                                       , U32) :: (U8
                                                                                 , U32)
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32) :: (U8, U32) :: (U8
                                                                           , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , r' :: U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss5 : U32 -> U32
cogent_ss5 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let s' :: U32 = i :: U32
      and (s1' :: Bool
          , s2' :: Bool
          , s3' :: Bool) = (s' :: U32 == 0 :: U32 :: Bool
                           , True :: Bool
                           , s' :: U32 == 1 :: U32 :: Bool)
      and (c' :: U8
          , r' :: U32) = let (c' :: U8
                             , r' :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , r' :: U32) = let v3' :: U32 = i :: U32
                  in (3 :: U8, v3' :: U32) :: (U8
                                              , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32)
            else (0 :: U8, r' :: U32) :: (U8
                                         , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8, r' :: U32)
            else let (c' :: U8
                     , r' :: U32) = let (c' :: U8
                                        , r' :: U32) = if not s3' :: Bool :: Bool
                     then let (c' :: U8
                              , r' :: U32) = let v4' :: U32 = 0 :: U32
                           in (3 :: U8, v4' :: U32) :: (U8
                                                       , U32)
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32)
                     else (0 :: U8, r' :: U32) :: (U8
                                                  , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8, r' :: U32)
                     else let (c' :: U8
                              , r' :: U32) = let (c' :: U8
                                                 , r' :: U32) = let (c' :: U8
                                                                    , r' :: U32) = let v7' :: U32 = let v5' :: U32 = i :: U32
                                    and v6' :: U32 = 5 :: U32
                                    and v7' :: U32 = v5' :: U32 + v6' :: U32 :: U32
                                    in v7' :: U32 :: U32
                                 in (3 :: U8, v7' :: U32) :: (U8
                                                             , U32)
                              in (c' :: U8, r' :: U32) :: (U8
                                                          , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8, r' :: U32)
                              else let c' :: U8 = 0 :: U8
                                 in (c' :: U8, r' :: U32) :: (U8
                                                             , U32) :: (U8
                                                                       , U32) :: (U8
                                                                                 , U32)
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32) :: (U8, U32) :: (U8
                                                                           , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , r' :: U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss6 : (U32, U32) -> U32
cogent_ss6 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , j :: U32
       , i :: U32
       , r' :: U32) = let s' :: U32 = i :: U32
      and (s1' :: Bool
          , s2' :: Bool
          , s3' :: Bool
          , s4' :: Bool) = (s' :: U32 == 0 :: U32 :: Bool
                           , s' :: U32 == 1 :: U32 :: Bool
                           , s' :: U32 == 2 :: U32 :: Bool
                           , True :: Bool)
      and (c' :: U8
          , j :: U32
          , i :: U32
          , r' :: U32) = let (c' :: U8
                             , j :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , j :: U32) = let (v7' :: U32
                                       , j :: U32) = let v4' :: U32 = i :: U32
                     and v5' :: U32 = j :: U32
                     and v6' :: U32 = v4' :: U32
                     and (v7' :: U32
                         , j :: U32) = (v6' :: U32
                                       , v6' :: U32)
                     in (v7' :: U32
                        , j :: U32) :: (U32, U32)
                  in (0 :: U8, j :: U32) :: (U8
                                            , U32)
               in (c' :: U8, j :: U32) :: (U8
                                          , U32)
            else (0 :: U8, j :: U32) :: (U8
                                        , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8
                 , j :: U32
                 , i :: U32
                 , r' :: U32)
            else let (c' :: U8
                     , i :: U32
                     , j :: U32
                     , r' :: U32) = let (c' :: U8
                                        , i :: U32) = if s1' :: Bool || s2' :: Bool :: Bool
                     then let (c' :: U8
                              , i :: U32) = let (v11' :: U32
                                                , i :: U32) = let v8' :: U32 = 1 :: U32
                              and v9' :: U32 = i :: U32
                              and v10' :: U32 = v9' :: U32 + v8' :: U32 :: U32
                              and (v11' :: U32
                                  , i :: U32) = (i :: U32
                                                , v10' :: U32)
                              in (v11' :: U32
                                 , i :: U32) :: (U32, U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8, i :: U32) :: (U8
                                                   , U32)
                     else (0 :: U8, i :: U32) :: (U8
                                                 , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8
                          , i :: U32
                          , j :: U32
                          , r' :: U32)
                     else let (c' :: U8
                              , j :: U32
                              , r' :: U32) = let (c' :: U8
                                                 , j :: U32) = if s1' :: Bool || s2' :: Bool || s3' :: Bool :: Bool :: Bool
                              then let (c' :: U8
                                       , j :: U32) = let (v15' :: U32
                                                         , j :: U32) = let v12' :: U32 = 5 :: U32
                                       and v13' :: U32 = j :: U32
                                       and v14' :: U32 = v12' :: U32
                                       and (v15' :: U32
                                           , j :: U32) = (v14' :: U32
                                                         , v14' :: U32)
                                       in (v15' :: U32
                                          , j :: U32) :: (U32, U32)
                                    in (0 :: U8, j :: U32) :: (U8
                                                              , U32)
                                 in (c' :: U8, j :: U32) :: (U8
                                                            , U32)
                              else (0 :: U8, j :: U32) :: (U8
                                                          , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8
                                   , j :: U32
                                   , r' :: U32)
                              else let (c' :: U8
                                       , r' :: U32) = let (c' :: U8
                                                          , r' :: U32) = let (c' :: U8
                                                                             , r' :: U32) = let v16' :: U32 = j :: U32
                                          in (3 :: U8, v16' :: U32) :: (U8
                                                                       , U32)
                                       in (c' :: U8, r' :: U32) :: (U8
                                                                   , U32)
                                    in if c' :: U8 > 0 :: U8 :: Bool
                                       then (c' :: U8, r' :: U32)
                                       else let c' :: U8 = 0 :: U8
                                          in (c' :: U8, r' :: U32) :: (U8
                                                                      , U32) :: (U8
                                                                                , U32) :: (U8
                                                                                          , U32)
                                 in (c' :: U8
                                    , j :: U32
                                    , r' :: U32) :: (U8
                                                    , U32
                                                    , U32) :: (U8
                                                              , U32
                                                              , U32) :: (U8
                                                                        , U32
                                                                        , U32)
                        in (c' :: U8
                           , i :: U32
                           , j :: U32
                           , r' :: U32) :: (U8
                                           , U32
                                           , U32
                                           , U32) :: (U8
                                                     , U32
                                                     , U32
                                                     , U32) :: (U8
                                                               , U32
                                                               , U32
                                                               , U32)
               in (c' :: U8
                  , j :: U32
                  , i :: U32
                  , r' :: U32) :: (U8
                                  , U32
                                  , U32
                                  , U32) :: (U8
                                            , U32
                                            , U32
                                            , U32) :: (U8, U32, U32, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , j :: U32
         , i :: U32
         , r' :: U32) :: (U8
                         , U32
                         , U32
                         , U32)
   in r' :: U32 :: U32
cogent_ss7 : (U32, U32) -> U32
cogent_ss7 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , j :: U32
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , j :: U32
                          , i :: U32) = let s' :: U32 = i :: U32
         and (s1' :: Bool
             , s2' :: Bool
             , s3' :: Bool) = (s' :: U32 == 0 :: U32 :: Bool
                              , s' :: U32 == 1 :: U32 :: Bool
                              , s' :: U32 == 2 :: U32 :: Bool)
         and (c' :: U8
             , j :: U32
             , i :: U32) = let (c' :: U8
                               , j :: U32) = if s1' :: Bool
               then let (c' :: U8
                        , j :: U32) = let (v7' :: U32
                                          , j :: U32) = let v4' :: U32 = i :: U32
                        and v5' :: U32 = j :: U32
                        and v6' :: U32 = v4' :: U32
                        and (v7' :: U32
                            , j :: U32) = (v6' :: U32
                                          , v6' :: U32)
                        in (v7' :: U32
                           , j :: U32) :: (U32, U32)
                     in (0 :: U8, j :: U32) :: (U8
                                               , U32)
                  in (c' :: U8, j :: U32) :: (U8
                                             , U32)
               else (0 :: U8, j :: U32) :: (U8
                                           , U32)
            in if c' :: U8 > 0 :: U8 :: Bool
               then (c' :: U8
                    , j :: U32
                    , i :: U32)
               else let (c' :: U8
                        , i :: U32
                        , j :: U32) = let (c' :: U8
                                          , i :: U32) = if s1' :: Bool || s2' :: Bool :: Bool
                        then let (c' :: U8
                                 , i :: U32) = let (c' :: U8
                                                   , i :: U32) = let (v11' :: U32
                                                                     , i :: U32) = let v8' :: U32 = 1 :: U32
                                    and v9' :: U32 = i :: U32
                                    and v10' :: U32 = v9' :: U32 + v8' :: U32 :: U32
                                    and (v11' :: U32
                                        , i :: U32) = (i :: U32
                                                      , v10' :: U32)
                                    in (v11' :: U32
                                       , i :: U32) :: (U32, U32)
                                 in (0 :: U8, i :: U32) :: (U8
                                                           , U32)
                              in if c' :: U8 > 0 :: U8 :: Bool
                                 then (c' :: U8, i :: U32)
                                 else let c' :: U8 = 2 :: U8
                                    in (c' :: U8, i :: U32) :: (U8
                                                               , U32) :: (U8
                                                                         , U32) :: (U8
                                                                                   , U32)
                           in (c' :: U8, i :: U32) :: (U8
                                                      , U32)
                        else (0 :: U8, i :: U32) :: (U8
                                                    , U32)
                     in if c' :: U8 > 0 :: U8 :: Bool
                        then (c' :: U8
                             , i :: U32
                             , j :: U32)
                        else let (c' :: U8
                                 , j :: U32) = let (c' :: U8
                                                   , j :: U32) = if s1' :: Bool || s2' :: Bool || s3' :: Bool :: Bool :: Bool
                                 then let (c' :: U8
                                          , j :: U32) = let (v15' :: U32
                                                            , j :: U32) = let v12' :: U32 = 5 :: U32
                                          and v13' :: U32 = j :: U32
                                          and v14' :: U32 = v12' :: U32
                                          and (v15' :: U32
                                              , j :: U32) = (v14' :: U32
                                                            , v14' :: U32)
                                          in (v15' :: U32
                                             , j :: U32) :: (U32, U32)
                                       in (0 :: U8, j :: U32) :: (U8
                                                                 , U32)
                                    in (c' :: U8, j :: U32) :: (U8
                                                               , U32)
                                 else (0 :: U8, j :: U32) :: (U8
                                                             , U32)
                              in if c' :: U8 > 0 :: U8 :: Bool
                                 then (c' :: U8, j :: U32)
                                 else let c' :: U8 = 0 :: U8
                                    in (c' :: U8, j :: U32) :: (U8
                                                               , U32) :: (U8
                                                                         , U32) :: (U8
                                                                                   , U32)
                           in (c' :: U8
                              , i :: U32
                              , j :: U32) :: (U8
                                             , U32
                                             , U32) :: (U8, U32, U32) :: (U8
                                                                         , U32
                                                                         , U32)
                  in (c' :: U8
                     , j :: U32
                     , i :: U32) :: (U8
                                    , U32
                                    , U32) :: (U8, U32, U32) :: (U8
                                                                , U32
                                                                , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , j :: U32
            , i :: U32) :: (U8, U32, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , j :: U32
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v16' :: U32 = j :: U32
               in (3 :: U8, v16' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , j :: U32
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_ss8 : (U32, U32) -> U32
cogent_ss8 (i :: U32
           , j :: U32) =
   let (c' :: U8
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , j :: U32
                          , r' :: U32) = let s' :: U32 = i :: U32
         and (s1' :: Bool
             , s2' :: Bool
             , s3' :: Bool) = (s' :: U32 == 0 :: U32 :: Bool
                              , s' :: U32 == 1 :: U32 :: Bool
                              , s' :: U32 == 2 :: U32 :: Bool)
         and (c' :: U8
             , j :: U32
             , r' :: U32) = let (c' :: U8
                                , j :: U32) = if s1' :: Bool
               then let (c' :: U8
                        , j :: U32) = let (v7' :: U32
                                          , j :: U32) = let v4' :: U32 = i :: U32
                        and v5' :: U32 = j :: U32
                        and v6' :: U32 = v4' :: U32
                        and (v7' :: U32
                            , j :: U32) = (v6' :: U32
                                          , v6' :: U32)
                        in (v7' :: U32
                           , j :: U32) :: (U32, U32)
                     in (0 :: U8, j :: U32) :: (U8
                                               , U32)
                  in (c' :: U8, j :: U32) :: (U8
                                             , U32)
               else (0 :: U8, j :: U32) :: (U8
                                           , U32)
            in if c' :: U8 > 0 :: U8 :: Bool
               then (c' :: U8
                    , j :: U32
                    , r' :: U32)
               else let (c' :: U8
                        , r' :: U32
                        , j :: U32) = let (c' :: U8
                                          , r' :: U32) = if s1' :: Bool || s2' :: Bool :: Bool
                        then let (c' :: U8
                                 , r' :: U32) = let s' :: U32 = j :: U32
                              and (s1' :: Bool
                                  , s2' :: Bool) = (s' :: U32 == 0 :: U32 :: Bool
                                                   , True :: Bool)
                              and (c' :: U8
                                  , r' :: U32) = let (c' :: U8
                                                     , r' :: U32) = if s1' :: Bool
                                    then let (c' :: U8
                                             , r' :: U32) = let v10' :: U32 = 17 :: U32
                                          in (3 :: U8, v10' :: U32) :: (U8
                                                                       , U32)
                                       in (c' :: U8, r' :: U32) :: (U8
                                                                   , U32)
                                    else (0 :: U8, r' :: U32) :: (U8
                                                                 , U32)
                                 in if c' :: U8 > 0 :: U8 :: Bool
                                    then (c' :: U8, r' :: U32)
                                    else let (c' :: U8
                                             , r' :: U32) = let (c' :: U8
                                                                , r' :: U32) = let (c' :: U8
                                                                                   , r' :: U32) = let v11' :: U32 = i :: U32
                                                in (3 :: U8, v11' :: U32) :: (U8
                                                                             , U32)
                                             in (c' :: U8, r' :: U32) :: (U8
                                                                         , U32)
                                          in if c' :: U8 > 0 :: U8 :: Bool
                                             then (c' :: U8, r' :: U32)
                                             else let c' :: U8 = 0 :: U8
                                                in (c' :: U8, r' :: U32) :: (U8
                                                                            , U32) :: (U8
                                                                                      , U32) :: (U8
                                                                                                , U32)
                                       in (c' :: U8, r' :: U32) :: (U8
                                                                   , U32) :: (U8
                                                                             , U32) :: (U8
                                                                                       , U32)
                              in (if c' :: U8 == 2 :: U8 :: Bool
                                 then 0 :: U8
                                 else c' :: U8 :: U8
                                 , r' :: U32) :: (U8, U32)
                           in (c' :: U8, r' :: U32) :: (U8
                                                       , U32)
                        else (0 :: U8, r' :: U32) :: (U8
                                                     , U32)
                     in if c' :: U8 > 0 :: U8 :: Bool
                        then (c' :: U8
                             , r' :: U32
                             , j :: U32)
                        else let (c' :: U8
                                 , j :: U32) = let (c' :: U8
                                                   , j :: U32) = if s1' :: Bool || s2' :: Bool || s3' :: Bool :: Bool :: Bool
                                 then let (c' :: U8
                                          , j :: U32) = let (v15' :: U32
                                                            , j :: U32) = let v12' :: U32 = 5 :: U32
                                          and v13' :: U32 = j :: U32
                                          and v14' :: U32 = v12' :: U32
                                          and (v15' :: U32
                                              , j :: U32) = (v14' :: U32
                                                            , v14' :: U32)
                                          in (v15' :: U32
                                             , j :: U32) :: (U32, U32)
                                       in (0 :: U8, j :: U32) :: (U8
                                                                 , U32)
                                    in (c' :: U8, j :: U32) :: (U8
                                                               , U32)
                                 else (0 :: U8, j :: U32) :: (U8
                                                             , U32)
                              in if c' :: U8 > 0 :: U8 :: Bool
                                 then (c' :: U8, j :: U32)
                                 else let c' :: U8 = 0 :: U8
                                    in (c' :: U8, j :: U32) :: (U8
                                                               , U32) :: (U8
                                                                         , U32) :: (U8
                                                                                   , U32)
                           in (c' :: U8
                              , r' :: U32
                              , j :: U32) :: (U8
                                             , U32
                                             , U32) :: (U8, U32, U32) :: (U8
                                                                         , U32
                                                                         , U32)
                  in (c' :: U8
                     , j :: U32
                     , r' :: U32) :: (U8
                                     , U32
                                     , U32) :: (U8, U32, U32) :: (U8
                                                                 , U32
                                                                 , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , j :: U32
            , r' :: U32) :: (U8, U32, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v16' :: U32 = j :: U32
               in (3 :: U8, v16' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_ss10 : U32 -> U32
cogent_ss10 i :: U32 =
   let c' :: U8 = let s' :: U32 = i :: U32
      and () :: () = ()
      and c' :: U8 = gencotDummy :: String -> U8 "Unsupported switch body" :: String :: U8
      in if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8 :: U8
   in r' :: U32 :: U32
cogent_ss11 : U32 -> U32
cogent_ss11 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = let s' :: U32 = i :: U32
         and () :: () = ()
         and c' :: U8 = gencotDummy :: String -> U8 "Unsupported switch body" :: String :: U8
         in if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8 :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v1' :: U32 = i :: U32
               in (3 :: U8, v1' :: U32) :: (U8
                                           , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss12 : U32 -> U32
cogent_ss12 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = let s' :: U32 = i :: U32
         and () :: () = ()
         and c' :: U8 = gencotDummy :: String -> U8 "Unsupported switch body" :: String :: U8
         in if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8 :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v1' :: U32 = i :: U32
               in (3 :: U8, v1' :: U32) :: (U8
                                           , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss13 : (U32, U32) -> U32
cogent_ss13 (i :: U32
            , j :: U32) =
   let (c' :: U8
       , j :: U32
       , r' :: U32) = let s' :: U32 = i :: U32
      and (s1' :: Bool
          , s2' :: Bool) = (s' :: U32 == 0 :: U32 :: Bool
                           , True :: Bool)
      and (c' :: U8
          , j :: U32
          , r' :: U32) = let (c' :: U8
                             , j :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , j :: U32) = let (c' :: U8
                                       , j :: U32) = let (v5' :: U32
                                                         , j :: U32) = let v2' :: U32 = i :: U32
                        and v3' :: U32 = j :: U32
                        and v4' :: U32 = v2' :: U32
                        and (v5' :: U32
                            , j :: U32) = (v4' :: U32
                                          , v4' :: U32)
                        in (v5' :: U32
                           , j :: U32) :: (U32, U32)
                     in (0 :: U8, j :: U32) :: (U8
                                               , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8, j :: U32)
                     else let (c' :: U8
                              , j :: U32) = let v8' :: Bool = let v6' :: U32 = i :: U32
                              and v7' :: U32 = 5 :: U32
                              and v8' :: Bool = v6' :: U32 < v7' :: U32 :: Bool
                              in v8' :: Bool :: Bool
                           in if v8' :: Bool
                              then let (c' :: U8
                                       , j :: U32) = let (c' :: U8
                                                         , j :: U32) = let (v12' :: U32
                                                                           , j :: U32) = let v9' :: U32 = 1 :: U32
                                          and v10' :: U32 = j :: U32
                                          and v11' :: U32 = v10' :: U32 + v9' :: U32 :: U32
                                          and (v12' :: U32
                                              , j :: U32) = (j :: U32
                                                            , v11' :: U32)
                                          in (v12' :: U32
                                             , j :: U32) :: (U32, U32)
                                       in (0 :: U8, j :: U32) :: (U8
                                                                 , U32)
                                    in if c' :: U8 > 0 :: U8 :: Bool
                                       then (c' :: U8, j :: U32)
                                       else
                                          let c' :: U8 = gencotDummy :: String -> U8 "Case statement only supported in direct switch body" :: String :: U8
                                          in (c' :: U8, j :: U32) :: (U8
                                                                     , U32) :: (U8
                                                                               , U32) :: (U8
                                                                                         , U32)
                                 in (c' :: U8, j :: U32) :: (U8
                                                            , U32)
                              else
                                 let c' :: U8 = let c' :: U8 = gencotDummy :: String -> U8 "Case statement only supported in direct switch body" :: String :: U8
                                    in if c' :: U8 > 0 :: U8 :: Bool
                                       then c' :: U8
                                       else
                                          let c' :: U8 = gencotDummy :: String -> U8 "Case statement only supported in direct switch body" :: String :: U8
                                          in c' :: U8 :: U8 :: U8 :: U8
                                 in (c' :: U8, j :: U32) :: (U8
                                                            , U32) :: (U8
                                                                      , U32) :: (U8
                                                                                , U32)
                        in (c' :: U8, j :: U32) :: (U8
                                                   , U32) :: (U8, U32) :: (U8
                                                                          , U32)
               in (c' :: U8, j :: U32) :: (U8
                                          , U32)
            else (0 :: U8, j :: U32) :: (U8
                                        , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8
                 , j :: U32
                 , r' :: U32)
            else let (c' :: U8
                     , r' :: U32) = let (c' :: U8
                                        , r' :: U32) = let (c' :: U8
                                                           , r' :: U32) = let v13' :: U32 = 0 :: U32
                        in (3 :: U8, v13' :: U32) :: (U8
                                                     , U32)
                     in (c' :: U8, r' :: U32) :: (U8
                                                 , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8, r' :: U32)
                     else let c' :: U8 = 0 :: U8
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32) :: (U8, U32) :: (U8
                                                                           , U32)
               in (c' :: U8
                  , j :: U32
                  , r' :: U32) :: (U8
                                  , U32
                                  , U32) :: (U8, U32, U32) :: (U8
                                                              , U32
                                                              , U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , j :: U32
         , r' :: U32) :: (U8, U32, U32)
   in r' :: U32 :: U32
cogent_ss14 : U32 -> U32
cogent_ss14 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = let s' :: U32 = i :: U32
         and (s1' :: Bool
             , s2' :: Bool
             , s3' :: Bool) = (s' :: U32 == 0 :: U32 :: Bool
                              , s' :: U32 == 1 :: U32 :: Bool
                              , s' :: U32 == 2 :: U32 :: Bool)
         and c' :: U8 = gencotDummy :: String -> U8 "Declarations not supported in switch body" :: String :: U8
         in if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8 :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v4' :: U32 = i :: U32
               in (3 :: U8, v4' :: U32) :: (U8
                                           , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss15 : (U32, U32) -> U32
cogent_ss15 (i :: U32
            , j :: U32) =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = let s' :: U32 = i :: U32
         and (s1' :: Bool
             , s2' :: Bool
             , s3' :: Bool) = (s' :: U32 == 0 :: U32 :: Bool
                              , s' :: U32 == 1 :: U32 :: Bool
                              , s' :: U32 == 2 :: U32 :: Bool)
         and c' :: U8 = gencotDummy :: String -> U8 "Declarations not supported in switch body" :: String :: U8
         in if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8 :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v4' :: U32 = j :: U32
               in (3 :: U8, v4' :: U32) :: (U8
                                           , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
