
#define NAM1_CONST 1
seNAM1_CONST: U8
seNAM1_CONST = NAM1_CONST
#define NAM2_CONST 2
sENAM2_CONST: U8
sENAM2_CONST = NAM2_CONST
#define NAM3_CONST 3
cogent_NAM3_CONST: U8
cogent_NAM3_CONST = NAM3_CONST

type SeNames_t = U32
type Senam2_t = U32
type Cogent_nam3_t = U32

type Struct_SeNames_str = { m : U32 }
type Struct_Senam2_str = { cogent_M : U32 }
type Struct_Cogent_nam3_str = { m : U32 }

type Enum_SeNames_enum = U32
seNAM1_EL1 : U32
seNAM1_EL1 = 0
cogent_NAM1EL2 : U32
cogent_NAM1EL2 = 1
type Enum_Senam2_enum = U32
sENAM2_EL1 : U32
sENAM2_EL1 = 0
cogent_NAM2EL2 : U32
cogent_NAM2EL2 = 1
type Enum_Cogent_nam3_enum = U32
cogent_NAM3_EL1 : U32
cogent_NAM3_EL1 = 0
cogent_NAM3EL2 : U32
cogent_NAM3EL2 = 1

seNames_var : () -> Cogent_ptrdiff_t
senam2_var : () -> SeSize_t
cogent_nam3_var : () -> U32


{- Comment to be moved to the definition -}
seNames_fun2 : ( U32, U32 ) -> U32
seNames_fun2 (i
             , cogent_J) =
   0
   {-
       seNames_fun(5);
       return i + cogent_J;
   -}
senam2_fun2 : U32 -> U32
senam2_fun2 i =
   0
   {-
       senam2_fun(5);
       return i + seNAM1_CONST;
   -}
cogent_nam3_fun2 : U32 -> U32
cogent_nam3_fun2 i =
   0
   {-
       cogent_nam3_fun();
       return i + sENAM2_CONST;
   -}

seNames_funp : () -> #CFunPtr_FXSeNames_tXSenam2_tXCogent_nam3_tX_SeSize_t
