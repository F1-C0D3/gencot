{- Abstract data type for linear types which may be NULL -}

#ifndef GENCOT_MAYNULL
#define GENCOT_MAYNULL

include <gum/common/common.cogent>
#include "ModFun.cogent"
#include "Default.cogent"

-- Linear type with the additional value NULL
--   a: linear type of all non-null values
type MayNull a 

-- Construct the NULL value
null: all(a). () -> MayNull a
roNull: all(a). () -> (MayNull a)!

-- Construct a non-NULL value
mayNull: all(a). a -> MayNull a
roMayNull: all(a). a! -> (MayNull a)!

-- Retrieve value if not NULL.
notNull: all(a). MayNull a -> Option a
roNotNull: all(a). (MayNull a)! -> (Option a)!

-- Utility functions

-- test for being NULL
isNull: all(a). (MayNull a)! -> Bool
isNull mn = roNotNull[a] mn 
   | None -> True 
   | Some _ -> False

-- Part access functions

-- exchange values if not NULL
exchngNull: all(a). (MayNull a,a) -> (MayNull a,a)
exchngNull (mn, nn) = notNull[a] mn
   | None -> (null(),nn)
   | Some x -> (mayNull nn, x)

-- apply modification function if not NULL
-- if NULL the modification functions's input is returned as additional result
--   arg: the type of additional input for the modification function
modifyNull: all(a,arg). ModPartFun (MayNull a) a arg arg
modifyNull (mn, (modfun,addinput)) = notNull[a] mn
   | None -> (null[a] (), addinput)
   | Some x -> let (r,y) = modfun (x,addinput) in (mayNull[a] r,y)

-- apply modification function if not NULL
-- if NULL the default value is returned as additional result
--   arg: the type of additional input for the modification function
--     must be discardable in case the modification function is not applied
--   out: the type of additional result of the modification function
--     must be regular to have a default value
modifyNullDflt: all(a,arg:<D,out:<DSE). ModPartFun (MayNull a) a arg out
modifyNullDflt (mn, (modfun,addinput)) = notNull[a] mn
   | None -> (null[a] (), defaultVal ())
   | Some x -> let (r,y) = modfun (x,addinput) in (mayNull[a] r,y)

#endif {- GENCOT_MAYNULL -}
