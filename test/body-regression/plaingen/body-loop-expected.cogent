cogent_lf1 : (U32, U32) -> U32
cogent_lf1 (a :: U32
           , b :: U32) =
   let (c' :: U8
       , a :: U32
       , r' :: U32) = let (c' :: U8
                          , a :: U32) = let v1' :: U32 = 0 :: U32
         and (c' :: U8
             , a :: U32) = let i :: U32 = v1' :: U32
            and (c' :: U8
                , a :: U32
                , i :: U32) = let (c' :: U8
                                  , a :: U32
                                  , i :: U32) = repeat[(U8
                                                       , U32
                                                       , U32)
                                                      , U32]{{}} ::  { n : U32
                                                                     , stop :  { acc : (U8
                                                                                       , U32
                                                                                       , U32)
                                                                               , obsv : U32 } -> Bool
                                                                     , step :  { acc : (U8
                                                                                       , U32
                                                                                       , U32)
                                                                               , obsv : U32 } -> (U8
                                                                                                 , U32
                                                                                                 , U32)
                                                                     , acc : (U8
                                                                             , U32
                                                                             , U32)
                                                                     , obsv : U32 } -> (U8
                                                                                       , U32
                                                                                       , U32) #{ n = b :: U32
                                                                                               , stop = \#{ acc = (c' :: U8
                                                                                                                  , a :: U32
                                                                                                                  , i :: U32)
                                                                                                          , obsv = b :: U32 } ::  { acc : (U8
                                                                                                                                          , U32
                                                                                                                                          , U32)
                                                                                                                                  , obsv : U32 } => let v8' :: Bool = let v6' :: U32 = i :: U32
                                                                                                  and v7' :: U32 = b :: U32
                                                                                                  and v8' :: Bool = v6' :: U32 < v7' :: U32 :: Bool
                                                                                                  in v8' :: Bool :: Bool
                                                                                               in c' :: U8 > 1 :: U8 :: Bool || not v8' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                                    , U32
                                                                                                                                                                                    , U32)
                                                                                                                                                                            , obsv : U32 } -> Bool
                                                                                               , step = \#{ acc = (_ :: U8
                                                                                                                  , a :: U32
                                                                                                                  , i :: U32)
                                                                                                          , obsv = b :: U32 } ::  { acc : (U8
                                                                                                                                          , U32
                                                                                                                                          , U32)
                                                                                                                                  , obsv : U32 } => let (c' :: U8
                                                                                                                                                        , a :: U32) = let v2' :: U32 = 2 :: U32
                                                                                                  and v3' :: U32 = a :: U32
                                                                                                  and v4' :: U32 = v3' :: U32 * v2' :: U32 :: U32
                                                                                                  and (v5' :: U32
                                                                                                      , a :: U32) = (v4' :: U32
                                                                                                                    , v4' :: U32)
                                                                                                  in (0 :: U8
                                                                                                     , a :: U32) :: (U8
                                                                                                                    , U32)
                                                                                               in if c' :: U8 > 1 :: U8 :: Bool
                                                                                                  then
                                                                                                     (c' :: U8
                                                                                                     , a :: U32
                                                                                                     , i :: U32)
                                                                                                  else
                                                                                                     let (v12' :: U32
                                                                                                         , i :: U32) = let v9' :: U32 = 1 :: U32
                                                                                                        and v10' :: U32 = i :: U32
                                                                                                        and v11' :: U32 = v10' :: U32 + v9' :: U32 :: U32
                                                                                                        and (v12' :: U32
                                                                                                            , i :: U32) = (i :: U32
                                                                                                                          , v11' :: U32)
                                                                                                        in (v12' :: U32
                                                                                                           , i :: U32) :: (U32
                                                                                                                          , U32)
                                                                                                     in (0 :: U8
                                                                                                        , a :: U32
                                                                                                        , i :: U32) :: (U8
                                                                                                                       , U32
                                                                                                                       , U32) :: (U8
                                                                                                                                 , U32
                                                                                                                                 , U32) :: (U8
                                                                                                                                           , U32
                                                                                                                                           , U32) ::  { acc : (U8
                                                                                                                                                              , U32
                                                                                                                                                              , U32)
                                                                                                                                                      , obsv : U32 } -> (U8
                                                                                                                                                                        , U32
                                                                                                                                                                        , U32)
                                                                                               , acc = (0 :: U8
                                                                                                       , a :: U32
                                                                                                       , i :: U32)
                                                                                               , obsv = b :: U32 } ::  { n : U32
                                                                                                                       , stop :  { acc : (U8
                                                                                                                                         , U32
                                                                                                                                         , U32)
                                                                                                                                 , obsv : U32 } -> Bool
                                                                                                                       , step :  { acc : (U8
                                                                                                                                         , U32
                                                                                                                                         , U32)
                                                                                                                                 , obsv : U32 } -> (U8
                                                                                                                                                   , U32
                                                                                                                                                   , U32)
                                                                                                                       , acc : (U8
                                                                                                                               , U32
                                                                                                                               , U32)
                                                                                                                       , obsv : U32 } :: (U8
                                                                                                                                         , U32
                                                                                                                                         , U32)
               in (if c' :: U8 == 2 :: U8 :: Bool
                  then 0 :: U8
                  else c' :: U8 :: U8
                  , a :: U32
                  , i :: U32) :: (U8, U32, U32)
            in (c' :: U8, a :: U32) :: (U8
                                       , U32)
         in (c' :: U8, a :: U32) :: (U8
                                    , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , a :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v13' :: U32 = a :: U32
               in (3 :: U8, v13' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , a :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf2 : U32 -> U32
cogent_lf2 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (c' :: U8
                                            , i :: U32) = repeat[(U8, U32)
                                                                , ()]{{}} ::  { n : U32
                                                                              , stop :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> Bool
                                                                              , step :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> (U8
                                                                                                         , U32)
                                                                              , acc : (U8
                                                                                      , U32)
                                                                              , obsv : () } -> (U8
                                                                                               , U32) #{ n = 5 :: U32
                                                                                                       , stop = \#{ acc = (c' :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let v3' :: Bool = let v1' :: U32 = i :: U32
                                                                                                          and v2' :: U32 = 5 :: U32
                                                                                                          and v3' :: Bool = v1' :: U32 < v2' :: U32 :: Bool
                                                                                                          in v3' :: Bool :: Bool
                                                                                                       in c' :: U8 > 1 :: U8 :: Bool || not v3' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                                            , U32)
                                                                                                                                                                                    , obsv : () } -> Bool
                                                                                                       , step = \#{ acc = (_ :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let c' :: U8 = 0 :: U8
                                                                                                       in if c' :: U8 > 1 :: U8 :: Bool
                                                                                                          then
                                                                                                             (c' :: U8
                                                                                                             , i :: U32)
                                                                                                          else
                                                                                                             let (v7' :: U32
                                                                                                                 , i :: U32) = let v4' :: U32 = 1 :: U32
                                                                                                                and v5' :: U32 = i :: U32
                                                                                                                and v6' :: U32 = v5' :: U32 + v4' :: U32 :: U32
                                                                                                                and (v7' :: U32
                                                                                                                    , i :: U32) = (i :: U32
                                                                                                                                  , v6' :: U32)
                                                                                                                in (v7' :: U32
                                                                                                                   , i :: U32) :: (U32
                                                                                                                                  , U32)
                                                                                                             in (0 :: U8
                                                                                                                , i :: U32) :: (U8
                                                                                                                               , U32) :: (U8
                                                                                                                                         , U32) :: (U8
                                                                                                                                                   , U32) ::  { acc : (U8
                                                                                                                                                                      , U32)
                                                                                                                                                              , obsv : () } -> (U8
                                                                                                                                                                               , U32)
                                                                                                       , acc = (0 :: U8
                                                                                                               , i :: U32)
                                                                                                       , obsv = () } ::  { n : U32
                                                                                                                         , stop :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> Bool
                                                                                                                         , step :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> (U8
                                                                                                                                                    , U32)
                                                                                                                         , acc : (U8
                                                                                                                                 , U32)
                                                                                                                         , obsv : () } :: (U8
                                                                                                                                          , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , i :: U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v8' :: U32 = i :: U32
               in (3 :: U8, v8' :: U32) :: (U8
                                           , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf3 : U32 -> U32
cogent_lf3 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (c' :: U8
                                            , i :: U32) = repeat[(U8, U32)
                                                                , ()]{{}} ::  { n : U32
                                                                              , stop :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> Bool
                                                                              , step :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> (U8
                                                                                                         , U32)
                                                                              , acc : (U8
                                                                                      , U32)
                                                                              , obsv : () } -> (U8
                                                                                               , U32) #{ n = 5 :: U32
                                                                                                       , stop = \#{ acc = (c' :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let v3' :: Bool = let v1' :: U32 = i :: U32
                                                                                                          and v2' :: U32 = 5 :: U32
                                                                                                          and v3' :: Bool = v1' :: U32 < v2' :: U32 :: Bool
                                                                                                          in v3' :: Bool :: Bool
                                                                                                       in c' :: U8 > 1 :: U8 :: Bool || not v3' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                                            , U32)
                                                                                                                                                                                    , obsv : () } -> Bool
                                                                                                       , step = \#{ acc = (_ :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let c' :: U8 = 1 :: U8
                                                                                                       in if c' :: U8 > 1 :: U8 :: Bool
                                                                                                          then
                                                                                                             (c' :: U8
                                                                                                             , i :: U32)
                                                                                                          else
                                                                                                             let (v7' :: U32
                                                                                                                 , i :: U32) = let v4' :: U32 = 1 :: U32
                                                                                                                and v5' :: U32 = i :: U32
                                                                                                                and v6' :: U32 = v5' :: U32 + v4' :: U32 :: U32
                                                                                                                and (v7' :: U32
                                                                                                                    , i :: U32) = (i :: U32
                                                                                                                                  , v6' :: U32)
                                                                                                                in (v7' :: U32
                                                                                                                   , i :: U32) :: (U32
                                                                                                                                  , U32)
                                                                                                             in (0 :: U8
                                                                                                                , i :: U32) :: (U8
                                                                                                                               , U32) :: (U8
                                                                                                                                         , U32) :: (U8
                                                                                                                                                   , U32) ::  { acc : (U8
                                                                                                                                                                      , U32)
                                                                                                                                                              , obsv : () } -> (U8
                                                                                                                                                                               , U32)
                                                                                                       , acc = (0 :: U8
                                                                                                               , i :: U32)
                                                                                                       , obsv = () } ::  { n : U32
                                                                                                                         , stop :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> Bool
                                                                                                                         , step :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> (U8
                                                                                                                                                    , U32)
                                                                                                                         , acc : (U8
                                                                                                                                 , U32)
                                                                                                                         , obsv : () } :: (U8
                                                                                                                                          , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , i :: U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v8' :: U32 = i :: U32
               in (3 :: U8, v8' :: U32) :: (U8
                                           , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf4 : U32 -> U32
cogent_lf4 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (c' :: U8
                                            , i :: U32) = repeat[(U8, U32)
                                                                , ()]{{}} ::  { n : U32
                                                                              , stop :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> Bool
                                                                              , step :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> (U8
                                                                                                         , U32)
                                                                              , acc : (U8
                                                                                      , U32)
                                                                              , obsv : () } -> (U8
                                                                                               , U32) #{ n = 5 :: U32
                                                                                                       , stop = \#{ acc = (c' :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let v3' :: Bool = let v1' :: U32 = i :: U32
                                                                                                          and v2' :: U32 = 5 :: U32
                                                                                                          and v3' :: Bool = v1' :: U32 < v2' :: U32 :: Bool
                                                                                                          in v3' :: Bool :: Bool
                                                                                                       in c' :: U8 > 1 :: U8 :: Bool || not v3' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                                            , U32)
                                                                                                                                                                                    , obsv : () } -> Bool
                                                                                                       , step = \#{ acc = (_ :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let c' :: U8 = 2 :: U8
                                                                                                       in if c' :: U8 > 1 :: U8 :: Bool
                                                                                                          then
                                                                                                             (c' :: U8
                                                                                                             , i :: U32)
                                                                                                          else
                                                                                                             let (v7' :: U32
                                                                                                                 , i :: U32) = let v4' :: U32 = 1 :: U32
                                                                                                                and v5' :: U32 = i :: U32
                                                                                                                and v6' :: U32 = v5' :: U32 + v4' :: U32 :: U32
                                                                                                                and (v7' :: U32
                                                                                                                    , i :: U32) = (i :: U32
                                                                                                                                  , v6' :: U32)
                                                                                                                in (v7' :: U32
                                                                                                                   , i :: U32) :: (U32
                                                                                                                                  , U32)
                                                                                                             in (0 :: U8
                                                                                                                , i :: U32) :: (U8
                                                                                                                               , U32) :: (U8
                                                                                                                                         , U32) :: (U8
                                                                                                                                                   , U32) ::  { acc : (U8
                                                                                                                                                                      , U32)
                                                                                                                                                              , obsv : () } -> (U8
                                                                                                                                                                               , U32)
                                                                                                       , acc = (0 :: U8
                                                                                                               , i :: U32)
                                                                                                       , obsv = () } ::  { n : U32
                                                                                                                         , stop :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> Bool
                                                                                                                         , step :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> (U8
                                                                                                                                                    , U32)
                                                                                                                         , acc : (U8
                                                                                                                                 , U32)
                                                                                                                         , obsv : () } :: (U8
                                                                                                                                          , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , i :: U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v8' :: U32 = i :: U32
               in (3 :: U8, v8' :: U32) :: (U8
                                           , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf5 : U32 -> U32
cogent_lf5 i :: U32 =
   let (c' :: U8
       , r' :: U32
       , i :: U32) = let (c' :: U8
                         , r' :: U32
                         , i :: U32) = let (c' :: U8
                                           , r' :: U32
                                           , i :: U32) = repeat[(U8
                                                                , U32
                                                                , U32)
                                                               , ()]{{}} ::  { n : U32
                                                                             , stop :  { acc : (U8
                                                                                               , U32
                                                                                               , U32)
                                                                                       , obsv : () } -> Bool
                                                                             , step :  { acc : (U8
                                                                                               , U32
                                                                                               , U32)
                                                                                       , obsv : () } -> (U8
                                                                                                        , U32
                                                                                                        , U32)
                                                                             , acc : (U8
                                                                                     , U32
                                                                                     , U32)
                                                                             , obsv : () } -> (U8
                                                                                              , U32
                                                                                              , U32) #{ n = 5 :: U32
                                                                                                      , stop = \#{ acc = (c' :: U8
                                                                                                                         , r' :: U32
                                                                                                                         , i :: U32)
                                                                                                                 , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                 , U32
                                                                                                                                                 , U32)
                                                                                                                                         , obsv : () } => let v4' :: Bool = let v2' :: U32 = i :: U32
                                                                                                         and v3' :: U32 = 5 :: U32
                                                                                                         and v4' :: Bool = v2' :: U32 < v3' :: U32 :: Bool
                                                                                                         in v4' :: Bool :: Bool
                                                                                                      in c' :: U8 > 1 :: U8 :: Bool || not v4' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                                           , U32
                                                                                                                                                                                           , U32)
                                                                                                                                                                                   , obsv : () } -> Bool
                                                                                                      , step = \#{ acc = (_ :: U8
                                                                                                                         , r' :: U32
                                                                                                                         , i :: U32)
                                                                                                                 , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                 , U32
                                                                                                                                                 , U32)
                                                                                                                                         , obsv : () } => let (c' :: U8
                                                                                                                                                              , r' :: U32) = let v1' :: U32 = i :: U32
                                                                                                         in (3 :: U8
                                                                                                            , v1' :: U32) :: (U8
                                                                                                                             , U32)
                                                                                                      in if c' :: U8 > 1 :: U8 :: Bool
                                                                                                         then
                                                                                                            (c' :: U8
                                                                                                            , r' :: U32
                                                                                                            , i :: U32)
                                                                                                         else
                                                                                                            let (v8' :: U32
                                                                                                                , i :: U32) = let v5' :: U32 = 1 :: U32
                                                                                                               and v6' :: U32 = i :: U32
                                                                                                               and v7' :: U32 = v6' :: U32 + v5' :: U32 :: U32
                                                                                                               and (v8' :: U32
                                                                                                                   , i :: U32) = (i :: U32
                                                                                                                                 , v7' :: U32)
                                                                                                               in (v8' :: U32
                                                                                                                  , i :: U32) :: (U32
                                                                                                                                 , U32)
                                                                                                            in (0 :: U8
                                                                                                               , r' :: U32
                                                                                                               , i :: U32) :: (U8
                                                                                                                              , U32
                                                                                                                              , U32) :: (U8
                                                                                                                                        , U32
                                                                                                                                        , U32) :: (U8
                                                                                                                                                  , U32
                                                                                                                                                  , U32) ::  { acc : (U8
                                                                                                                                                                     , U32
                                                                                                                                                                     , U32)
                                                                                                                                                             , obsv : () } -> (U8
                                                                                                                                                                              , U32
                                                                                                                                                                              , U32)
                                                                                                      , acc = (0 :: U8
                                                                                                              , r' :: U32
                                                                                                              , i :: U32)
                                                                                                      , obsv = () } ::  { n : U32
                                                                                                                        , stop :  { acc : (U8
                                                                                                                                          , U32
                                                                                                                                          , U32)
                                                                                                                                  , obsv : () } -> Bool
                                                                                                                        , step :  { acc : (U8
                                                                                                                                          , U32
                                                                                                                                          , U32)
                                                                                                                                  , obsv : () } -> (U8
                                                                                                                                                   , U32
                                                                                                                                                   , U32)
                                                                                                                        , acc : (U8
                                                                                                                                , U32
                                                                                                                                , U32)
                                                                                                                        , obsv : () } :: (U8
                                                                                                                                         , U32
                                                                                                                                         , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , r' :: U32
            , i :: U32) :: (U8, U32, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , r' :: U32
              , i :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v9' :: U32 = i :: U32
               in (3 :: U8, v9' :: U32) :: (U8
                                           , U32)
            in (c' :: U8
               , r' :: U32
               , i :: U32) :: (U8
                              , U32
                              , U32) :: (U8, U32, U32) :: (U8
                                                          , U32
                                                          , U32)
   in r' :: U32 :: U32
cogent_lf6 : U32 -> U32
cogent_lf6 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (c' :: U8
                                            , i :: U32) = repeat[(U8, U32)
                                                                , ()]{{}} ::  { n : U32
                                                                              , stop :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> Bool
                                                                              , step :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> (U8
                                                                                                         , U32)
                                                                              , acc : (U8
                                                                                      , U32)
                                                                              , obsv : () } -> (U8
                                                                                               , U32) #{ n = let v' :: U32 = 5 :: U32
                                                                                                       and v1' :: U32 = 1 :: U32
                                                                                                       and v2' :: U32 = v' :: U32 + v1' :: U32 :: U32
                                                                                                       in v2' :: U32 :: U32
                                                                                                       , stop = \#{ acc = (c' :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let v5' :: Bool = let v3' :: U32 = i :: U32
                                                                                                          and v4' :: U32 = 5 :: U32
                                                                                                          and v5' :: Bool = v3' :: U32 <= v4' :: U32 :: Bool
                                                                                                          in v5' :: Bool :: Bool
                                                                                                       in c' :: U8 > 1 :: U8 :: Bool || not v5' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                                            , U32)
                                                                                                                                                                                    , obsv : () } -> Bool
                                                                                                       , step = \#{ acc = (_ :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let c' :: U8 = 0 :: U8
                                                                                                       in if c' :: U8 > 1 :: U8 :: Bool
                                                                                                          then
                                                                                                             (c' :: U8
                                                                                                             , i :: U32)
                                                                                                          else
                                                                                                             let (v9' :: U32
                                                                                                                 , i :: U32) = let v6' :: U32 = 1 :: U32
                                                                                                                and v7' :: U32 = i :: U32
                                                                                                                and v8' :: U32 = v7' :: U32 + v6' :: U32 :: U32
                                                                                                                and (v9' :: U32
                                                                                                                    , i :: U32) = (i :: U32
                                                                                                                                  , v8' :: U32)
                                                                                                                in (v9' :: U32
                                                                                                                   , i :: U32) :: (U32
                                                                                                                                  , U32)
                                                                                                             in (0 :: U8
                                                                                                                , i :: U32) :: (U8
                                                                                                                               , U32) :: (U8
                                                                                                                                         , U32) :: (U8
                                                                                                                                                   , U32) ::  { acc : (U8
                                                                                                                                                                      , U32)
                                                                                                                                                              , obsv : () } -> (U8
                                                                                                                                                                               , U32)
                                                                                                       , acc = (0 :: U8
                                                                                                               , i :: U32)
                                                                                                       , obsv = () } ::  { n : U32
                                                                                                                         , stop :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> Bool
                                                                                                                         , step :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> (U8
                                                                                                                                                    , U32)
                                                                                                                         , acc : (U8
                                                                                                                                 , U32)
                                                                                                                         , obsv : () } :: (U8
                                                                                                                                          , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , i :: U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v10' :: U32 = i :: U32
               in (3 :: U8, v10' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf7 : U32 -> U32
cogent_lf7 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v4' :: U32
                                            , i :: U32) = let v1' :: U32 = 12 :: U32
            and v2' :: U32 = i :: U32
            and v3' :: U32 = v1' :: U32
            and (v4' :: U32
                , i :: U32) = (v3' :: U32
                              , v3' :: U32)
            in (v4' :: U32
               , i :: U32) :: (U32, U32)
         and (c' :: U8
             , i :: U32) = let (c' :: U8
                               , i :: U32) = repeat[(U8, U32)
                                                   , ()]{{}} ::  { n : U32
                                                                 , stop :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> Bool
                                                                 , step :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> (U8
                                                                                            , U32)
                                                                 , acc : (U8
                                                                         , U32)
                                                                 , obsv : () } -> (U8
                                                                                  , U32) #{ n = 12 :: U32
                                                                                          , stop = \#{ acc = (c' :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let v7' :: Bool = let v5' :: U32 = i :: U32
                                                                                             and v6' :: U32 = 5 :: U32
                                                                                             and v7' :: Bool = v5' :: U32 > v6' :: U32 :: Bool
                                                                                             in v7' :: Bool :: Bool
                                                                                          in c' :: U8 > 1 :: U8 :: Bool || not v7' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                               , U32)
                                                                                                                                                                       , obsv : () } -> Bool
                                                                                          , step = \#{ acc = (_ :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let c' :: U8 = 0 :: U8
                                                                                          in if c' :: U8 > 1 :: U8 :: Bool
                                                                                             then
                                                                                                (c' :: U8
                                                                                                , i :: U32)
                                                                                             else
                                                                                                let (v11' :: U32
                                                                                                    , i :: U32) = let v8' :: U32 = 1 :: U32
                                                                                                   and v9' :: U32 = i :: U32
                                                                                                   and v10' :: U32 = v9' :: U32 - v8' :: U32 :: U32
                                                                                                   and (v11' :: U32
                                                                                                       , i :: U32) = (i :: U32
                                                                                                                     , v10' :: U32)
                                                                                                   in (v11' :: U32
                                                                                                      , i :: U32) :: (U32
                                                                                                                     , U32)
                                                                                                in (0 :: U8
                                                                                                   , i :: U32) :: (U8
                                                                                                                  , U32) :: (U8
                                                                                                                            , U32) :: (U8
                                                                                                                                      , U32) ::  { acc : (U8
                                                                                                                                                         , U32)
                                                                                                                                                 , obsv : () } -> (U8
                                                                                                                                                                  , U32)
                                                                                          , acc = (0 :: U8
                                                                                                  , i :: U32)
                                                                                          , obsv = () } ::  { n : U32
                                                                                                            , stop :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> Bool
                                                                                                            , step :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> (U8
                                                                                                                                       , U32)
                                                                                                            , acc : (U8
                                                                                                                    , U32)
                                                                                                            , obsv : () } :: (U8
                                                                                                                             , U32)
            in (if c' :: U8 == 2 :: U8 :: Bool
               then 0 :: U8
               else c' :: U8 :: U8
               , i :: U32) :: (U8, U32)
         in (c' :: U8, i :: U32) :: (U8
                                    , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v12' :: U32 = i :: U32
               in (3 :: U8, v12' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf8 : U32 -> U32
cogent_lf8 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v6' :: U32
                                            , i :: U32) = let v3' :: U32 = 12 :: U32
            and v4' :: U32 = i :: U32
            and v5' :: U32 = v3' :: U32
            and (v6' :: U32
                , i :: U32) = (v5' :: U32
                              , v5' :: U32)
            in (v6' :: U32
               , i :: U32) :: (U32, U32)
         and (c' :: U8
             , i :: U32) = let (c' :: U8
                               , i :: U32) = repeat[(U8, U32)
                                                   , ()]{{}} ::  { n : U32
                                                                 , stop :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> Bool
                                                                 , step :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> (U8
                                                                                            , U32)
                                                                 , acc : (U8
                                                                         , U32)
                                                                 , obsv : () } -> (U8
                                                                                  , U32) #{ n = let v' :: U32 = 12 :: U32
                                                                                          and v1' :: U32 = 1 :: U32
                                                                                          and v2' :: U32 = v' :: U32 + v1' :: U32 :: U32
                                                                                          in v2' :: U32 :: U32
                                                                                          , stop = \#{ acc = (c' :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let v9' :: Bool = let v7' :: U32 = i :: U32
                                                                                             and v8' :: U32 = 5 :: U32
                                                                                             and v9' :: Bool = v7' :: U32 >= v8' :: U32 :: Bool
                                                                                             in v9' :: Bool :: Bool
                                                                                          in c' :: U8 > 1 :: U8 :: Bool || not v9' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                               , U32)
                                                                                                                                                                       , obsv : () } -> Bool
                                                                                          , step = \#{ acc = (_ :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let c' :: U8 = 0 :: U8
                                                                                          in if c' :: U8 > 1 :: U8 :: Bool
                                                                                             then
                                                                                                (c' :: U8
                                                                                                , i :: U32)
                                                                                             else
                                                                                                let (v13' :: U32
                                                                                                    , i :: U32) = let v10' :: U32 = 1 :: U32
                                                                                                   and v11' :: U32 = i :: U32
                                                                                                   and v12' :: U32 = v11' :: U32 - v10' :: U32 :: U32
                                                                                                   and (v13' :: U32
                                                                                                       , i :: U32) = (i :: U32
                                                                                                                     , v12' :: U32)
                                                                                                   in (v13' :: U32
                                                                                                      , i :: U32) :: (U32
                                                                                                                     , U32)
                                                                                                in (0 :: U8
                                                                                                   , i :: U32) :: (U8
                                                                                                                  , U32) :: (U8
                                                                                                                            , U32) :: (U8
                                                                                                                                      , U32) ::  { acc : (U8
                                                                                                                                                         , U32)
                                                                                                                                                 , obsv : () } -> (U8
                                                                                                                                                                  , U32)
                                                                                          , acc = (0 :: U8
                                                                                                  , i :: U32)
                                                                                          , obsv = () } ::  { n : U32
                                                                                                            , stop :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> Bool
                                                                                                            , step :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> (U8
                                                                                                                                       , U32)
                                                                                                            , acc : (U8
                                                                                                                    , U32)
                                                                                                            , obsv : () } :: (U8
                                                                                                                             , U32)
            in (if c' :: U8 == 2 :: U8 :: Bool
               then 0 :: U8
               else c' :: U8 :: U8
               , i :: U32) :: (U8, U32)
         in (c' :: U8, i :: U32) :: (U8
                                    , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v14' :: U32 = i :: U32
               in (3 :: U8, v14' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf9 : U32 -> U32
cogent_lf9 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (c' :: U8
                                            , i :: U32) = repeat[(U8, U32)
                                                                , ()]{{}} ::  { n : U32
                                                                              , stop :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> Bool
                                                                              , step :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> (U8
                                                                                                         , U32)
                                                                              , acc : (U8
                                                                                      , U32)
                                                                              , obsv : () } -> (U8
                                                                                               , U32) #{ n = 5 :: U32
                                                                                                       , stop = \#{ acc = (c' :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let v3' :: Bool = let v1' :: U32 = i :: U32
                                                                                                          and v2' :: U32 = 5 :: U32
                                                                                                          and v3' :: Bool = v1' :: U32 < v2' :: U32 :: Bool
                                                                                                          in v3' :: Bool :: Bool
                                                                                                       in c' :: U8 > 1 :: U8 :: Bool || not v3' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                                            , U32)
                                                                                                                                                                                    , obsv : () } -> Bool
                                                                                                       , step = \#{ acc = (_ :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let c' :: U8 = 0 :: U8
                                                                                                       in if c' :: U8 > 1 :: U8 :: Bool
                                                                                                          then
                                                                                                             (c' :: U8
                                                                                                             , i :: U32)
                                                                                                          else
                                                                                                             let (v7' :: U32
                                                                                                                 , i :: U32) = let v4' :: U32 = 3 :: U32
                                                                                                                and v5' :: U32 = i :: U32
                                                                                                                and v6' :: U32 = v5' :: U32 + v4' :: U32 :: U32
                                                                                                                and (v7' :: U32
                                                                                                                    , i :: U32) = (v6' :: U32
                                                                                                                                  , v6' :: U32)
                                                                                                                in (v7' :: U32
                                                                                                                   , i :: U32) :: (U32
                                                                                                                                  , U32)
                                                                                                             in (0 :: U8
                                                                                                                , i :: U32) :: (U8
                                                                                                                               , U32) :: (U8
                                                                                                                                         , U32) :: (U8
                                                                                                                                                   , U32) ::  { acc : (U8
                                                                                                                                                                      , U32)
                                                                                                                                                              , obsv : () } -> (U8
                                                                                                                                                                               , U32)
                                                                                                       , acc = (0 :: U8
                                                                                                               , i :: U32)
                                                                                                       , obsv = () } ::  { n : U32
                                                                                                                         , stop :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> Bool
                                                                                                                         , step :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> (U8
                                                                                                                                                    , U32)
                                                                                                                         , acc : (U8
                                                                                                                                 , U32)
                                                                                                                         , obsv : () } :: (U8
                                                                                                                                          , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , i :: U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v8' :: U32 = i :: U32
               in (3 :: U8, v8' :: U32) :: (U8
                                           , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf10 : U32 -> U32
cogent_lf10 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (c' :: U8
                                            , i :: U32) = repeat[(U8, U32)
                                                                , ()]{{}} ::  { n : U32
                                                                              , stop :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> Bool
                                                                              , step :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> (U8
                                                                                                         , U32)
                                                                              , acc : (U8
                                                                                      , U32)
                                                                              , obsv : () } -> (U8
                                                                                               , U32) #{ n = 5 :: U32
                                                                                                       , stop = \#{ acc = (c' :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let v3' :: Bool = let v1' :: U32 = i :: U32
                                                                                                          and v2' :: U32 = 5 :: U32
                                                                                                          and v3' :: Bool = v1' :: U32 < v2' :: U32 :: Bool
                                                                                                          in v3' :: Bool :: Bool
                                                                                                       in c' :: U8 > 1 :: U8 :: Bool || not v3' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                                            , U32)
                                                                                                                                                                                    , obsv : () } -> Bool
                                                                                                       , step = \#{ acc = (_ :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let c' :: U8 = 0 :: U8
                                                                                                       in if c' :: U8 > 1 :: U8 :: Bool
                                                                                                          then
                                                                                                             (c' :: U8
                                                                                                             , i :: U32)
                                                                                                          else
                                                                                                             let (v9' :: U32
                                                                                                                 , i :: U32) = let v4' :: U32 = i :: U32
                                                                                                                and v5' :: U32 = 3 :: U32
                                                                                                                and v6' :: U32 = v4' :: U32 + v5' :: U32 :: U32
                                                                                                                and v7' :: U32 = i :: U32
                                                                                                                and v8' :: U32 = v6' :: U32
                                                                                                                and (v9' :: U32
                                                                                                                    , i :: U32) = (v8' :: U32
                                                                                                                                  , v8' :: U32)
                                                                                                                in (v9' :: U32
                                                                                                                   , i :: U32) :: (U32
                                                                                                                                  , U32)
                                                                                                             in (0 :: U8
                                                                                                                , i :: U32) :: (U8
                                                                                                                               , U32) :: (U8
                                                                                                                                         , U32) :: (U8
                                                                                                                                                   , U32) ::  { acc : (U8
                                                                                                                                                                      , U32)
                                                                                                                                                              , obsv : () } -> (U8
                                                                                                                                                                               , U32)
                                                                                                       , acc = (0 :: U8
                                                                                                               , i :: U32)
                                                                                                       , obsv = () } ::  { n : U32
                                                                                                                         , stop :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> Bool
                                                                                                                         , step :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> (U8
                                                                                                                                                    , U32)
                                                                                                                         , acc : (U8
                                                                                                                                 , U32)
                                                                                                                         , obsv : () } :: (U8
                                                                                                                                          , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , i :: U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v10' :: U32 = i :: U32
               in (3 :: U8, v10' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf11 : U32 -> U32
cogent_lf11 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (c' :: U8
                                            , i :: U32) = repeat[(U8, U32)
                                                                , ()]{{}} ::  { n : U32
                                                                              , stop :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> Bool
                                                                              , step :  { acc : (U8
                                                                                                , U32)
                                                                                        , obsv : () } -> (U8
                                                                                                         , U32)
                                                                              , acc : (U8
                                                                                      , U32)
                                                                              , obsv : () } -> (U8
                                                                                               , U32) #{ n = 5 :: U32
                                                                                                       , stop = \#{ acc = (c' :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let v3' :: Bool = let v1' :: U32 = i :: U32
                                                                                                          and v2' :: U32 = 5 :: U32
                                                                                                          and v3' :: Bool = v1' :: U32 < v2' :: U32 :: Bool
                                                                                                          in v3' :: Bool :: Bool
                                                                                                       in c' :: U8 > 1 :: U8 :: Bool || not v3' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                                            , U32)
                                                                                                                                                                                    , obsv : () } -> Bool
                                                                                                       , step = \#{ acc = (_ :: U8
                                                                                                                          , i :: U32)
                                                                                                                  , obsv = () :: () } ::  { acc : (U8
                                                                                                                                                  , U32)
                                                                                                                                          , obsv : () } => let c' :: U8 = 0 :: U8
                                                                                                       in if c' :: U8 > 1 :: U8 :: Bool
                                                                                                          then
                                                                                                             (c' :: U8
                                                                                                             , i :: U32)
                                                                                                          else
                                                                                                             let (v9' :: U32
                                                                                                                 , i :: U32) = let v4' :: U32 = 3 :: U32
                                                                                                                and v5' :: U32 = i :: U32
                                                                                                                and v6' :: U32 = v4' :: U32 + v5' :: U32 :: U32
                                                                                                                and v7' :: U32 = i :: U32
                                                                                                                and v8' :: U32 = v6' :: U32
                                                                                                                and (v9' :: U32
                                                                                                                    , i :: U32) = (v8' :: U32
                                                                                                                                  , v8' :: U32)
                                                                                                                in (v9' :: U32
                                                                                                                   , i :: U32) :: (U32
                                                                                                                                  , U32)
                                                                                                             in (0 :: U8
                                                                                                                , i :: U32) :: (U8
                                                                                                                               , U32) :: (U8
                                                                                                                                         , U32) :: (U8
                                                                                                                                                   , U32) ::  { acc : (U8
                                                                                                                                                                      , U32)
                                                                                                                                                              , obsv : () } -> (U8
                                                                                                                                                                               , U32)
                                                                                                       , acc = (0 :: U8
                                                                                                               , i :: U32)
                                                                                                       , obsv = () } ::  { n : U32
                                                                                                                         , stop :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> Bool
                                                                                                                         , step :  { acc : (U8
                                                                                                                                           , U32)
                                                                                                                                   , obsv : () } -> (U8
                                                                                                                                                    , U32)
                                                                                                                         , acc : (U8
                                                                                                                                 , U32)
                                                                                                                         , obsv : () } :: (U8
                                                                                                                                          , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , i :: U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v10' :: U32 = i :: U32
               in (3 :: U8, v10' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf12 : U32 -> U32
cogent_lf12 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v6' :: U32
                                            , i :: U32) = let v3' :: U32 = 12 :: U32
            and v4' :: U32 = i :: U32
            and v5' :: U32 = v3' :: U32
            and (v6' :: U32
                , i :: U32) = (v5' :: U32
                              , v5' :: U32)
            in (v6' :: U32
               , i :: U32) :: (U32, U32)
         and (c' :: U8
             , i :: U32) = let (c' :: U8
                               , i :: U32) = repeat[(U8, U32)
                                                   , ()]{{}} ::  { n : U32
                                                                 , stop :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> Bool
                                                                 , step :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> (U8
                                                                                            , U32)
                                                                 , acc : (U8
                                                                         , U32)
                                                                 , obsv : () } -> (U8
                                                                                  , U32) #{ n = let v' :: U32 = 12 :: U32
                                                                                          and v1' :: U32 = 1 :: U32
                                                                                          and v2' :: U32 = v' :: U32 + v1' :: U32 :: U32
                                                                                          in v2' :: U32 :: U32
                                                                                          , stop = \#{ acc = (c' :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let v9' :: Bool = let v7' :: U32 = i :: U32
                                                                                             and v8' :: U32 = 5 :: U32
                                                                                             and v9' :: Bool = v7' :: U32 >= v8' :: U32 :: Bool
                                                                                             in v9' :: Bool :: Bool
                                                                                          in c' :: U8 > 1 :: U8 :: Bool || not v9' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                               , U32)
                                                                                                                                                                       , obsv : () } -> Bool
                                                                                          , step = \#{ acc = (_ :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let c' :: U8 = 0 :: U8
                                                                                          in if c' :: U8 > 1 :: U8 :: Bool
                                                                                             then
                                                                                                (c' :: U8
                                                                                                , i :: U32)
                                                                                             else
                                                                                                let (v13' :: U32
                                                                                                    , i :: U32) = let v10' :: U32 = 3 :: U32
                                                                                                   and v11' :: U32 = i :: U32
                                                                                                   and v12' :: U32 = v11' :: U32 - v10' :: U32 :: U32
                                                                                                   and (v13' :: U32
                                                                                                       , i :: U32) = (v12' :: U32
                                                                                                                     , v12' :: U32)
                                                                                                   in (v13' :: U32
                                                                                                      , i :: U32) :: (U32
                                                                                                                     , U32)
                                                                                                in (0 :: U8
                                                                                                   , i :: U32) :: (U8
                                                                                                                  , U32) :: (U8
                                                                                                                            , U32) :: (U8
                                                                                                                                      , U32) ::  { acc : (U8
                                                                                                                                                         , U32)
                                                                                                                                                 , obsv : () } -> (U8
                                                                                                                                                                  , U32)
                                                                                          , acc = (0 :: U8
                                                                                                  , i :: U32)
                                                                                          , obsv = () } ::  { n : U32
                                                                                                            , stop :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> Bool
                                                                                                            , step :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> (U8
                                                                                                                                       , U32)
                                                                                                            , acc : (U8
                                                                                                                    , U32)
                                                                                                            , obsv : () } :: (U8
                                                                                                                             , U32)
            in (if c' :: U8 == 2 :: U8 :: Bool
               then 0 :: U8
               else c' :: U8 :: U8
               , i :: U32) :: (U8, U32)
         in (c' :: U8, i :: U32) :: (U8
                                    , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v14' :: U32 = i :: U32
               in (3 :: U8, v14' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf13 : U32 -> U32
cogent_lf13 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v6' :: U32
                                            , i :: U32) = let v3' :: U32 = 12 :: U32
            and v4' :: U32 = i :: U32
            and v5' :: U32 = v3' :: U32
            and (v6' :: U32
                , i :: U32) = (v5' :: U32
                              , v5' :: U32)
            in (v6' :: U32
               , i :: U32) :: (U32, U32)
         and (c' :: U8
             , i :: U32) = let (c' :: U8
                               , i :: U32) = repeat[(U8, U32)
                                                   , ()]{{}} ::  { n : U32
                                                                 , stop :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> Bool
                                                                 , step :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> (U8
                                                                                            , U32)
                                                                 , acc : (U8
                                                                         , U32)
                                                                 , obsv : () } -> (U8
                                                                                  , U32) #{ n = let v' :: U32 = 12 :: U32
                                                                                          and v1' :: U32 = 1 :: U32
                                                                                          and v2' :: U32 = v' :: U32 + v1' :: U32 :: U32
                                                                                          in v2' :: U32 :: U32
                                                                                          , stop = \#{ acc = (c' :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let v9' :: Bool = let v7' :: U32 = i :: U32
                                                                                             and v8' :: U32 = 5 :: U32
                                                                                             and v9' :: Bool = v7' :: U32 >= v8' :: U32 :: Bool
                                                                                             in v9' :: Bool :: Bool
                                                                                          in c' :: U8 > 1 :: U8 :: Bool || not v9' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                               , U32)
                                                                                                                                                                       , obsv : () } -> Bool
                                                                                          , step = \#{ acc = (_ :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let c' :: U8 = 0 :: U8
                                                                                          in if c' :: U8 > 1 :: U8 :: Bool
                                                                                             then
                                                                                                (c' :: U8
                                                                                                , i :: U32)
                                                                                             else
                                                                                                let (v15' :: U32
                                                                                                    , i :: U32) = let v10' :: U32 = i :: U32
                                                                                                   and v11' :: U32 = 3 :: U32
                                                                                                   and v12' :: U32 = v10' :: U32 - v11' :: U32 :: U32
                                                                                                   and v13' :: U32 = i :: U32
                                                                                                   and v14' :: U32 = v12' :: U32
                                                                                                   and (v15' :: U32
                                                                                                       , i :: U32) = (v14' :: U32
                                                                                                                     , v14' :: U32)
                                                                                                   in (v15' :: U32
                                                                                                      , i :: U32) :: (U32
                                                                                                                     , U32)
                                                                                                in (0 :: U8
                                                                                                   , i :: U32) :: (U8
                                                                                                                  , U32) :: (U8
                                                                                                                            , U32) :: (U8
                                                                                                                                      , U32) ::  { acc : (U8
                                                                                                                                                         , U32)
                                                                                                                                                 , obsv : () } -> (U8
                                                                                                                                                                  , U32)
                                                                                          , acc = (0 :: U8
                                                                                                  , i :: U32)
                                                                                          , obsv = () } ::  { n : U32
                                                                                                            , stop :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> Bool
                                                                                                            , step :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> (U8
                                                                                                                                       , U32)
                                                                                                            , acc : (U8
                                                                                                                    , U32)
                                                                                                            , obsv : () } :: (U8
                                                                                                                             , U32)
            in (if c' :: U8 == 2 :: U8 :: Bool
               then 0 :: U8
               else c' :: U8 :: U8
               , i :: U32) :: (U8, U32)
         in (c' :: U8, i :: U32) :: (U8
                                    , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v16' :: U32 = i :: U32
               in (3 :: U8, v16' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf14 : (U32, U32) -> U32
cogent_lf14 (i :: U32
            , j :: U32) =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (c' :: U8
                                            , i :: U32) = repeat[(U8, U32)
                                                                , U32]{{}} ::  { n : U32
                                                                               , stop :  { acc : (U8
                                                                                                 , U32)
                                                                                         , obsv : U32 } -> Bool
                                                                               , step :  { acc : (U8
                                                                                                 , U32)
                                                                                         , obsv : U32 } -> (U8
                                                                                                           , U32)
                                                                               , acc : (U8
                                                                                       , U32)
                                                                               , obsv : U32 } -> (U8
                                                                                                 , U32) #{ n = j :: U32
                                                                                                         , stop = \#{ acc = (c' :: U8
                                                                                                                            , i :: U32)
                                                                                                                    , obsv = j :: U32 } ::  { acc : (U8
                                                                                                                                                    , U32)
                                                                                                                                            , obsv : U32 } => let v3' :: Bool = let v1' :: U32 = i :: U32
                                                                                                            and v2' :: U32 = j :: U32
                                                                                                            and v3' :: Bool = v1' :: U32 < v2' :: U32 :: Bool
                                                                                                            in v3' :: Bool :: Bool
                                                                                                         in c' :: U8 > 1 :: U8 :: Bool || not v3' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                                              , U32)
                                                                                                                                                                                      , obsv : U32 } -> Bool
                                                                                                         , step = \#{ acc = (_ :: U8
                                                                                                                            , i :: U32)
                                                                                                                    , obsv = j :: U32 } ::  { acc : (U8
                                                                                                                                                    , U32)
                                                                                                                                            , obsv : U32 } => let c' :: U8 = 0 :: U8
                                                                                                         in if c' :: U8 > 1 :: U8 :: Bool
                                                                                                            then
                                                                                                               (c' :: U8
                                                                                                               , i :: U32)
                                                                                                            else
                                                                                                               let (v7' :: U32
                                                                                                                   , i :: U32) = let v4' :: U32 = 1 :: U32
                                                                                                                  and v5' :: U32 = i :: U32
                                                                                                                  and v6' :: U32 = v5' :: U32 + v4' :: U32 :: U32
                                                                                                                  and (v7' :: U32
                                                                                                                      , i :: U32) = (i :: U32
                                                                                                                                    , v6' :: U32)
                                                                                                                  in (v7' :: U32
                                                                                                                     , i :: U32) :: (U32
                                                                                                                                    , U32)
                                                                                                               in (0 :: U8
                                                                                                                  , i :: U32) :: (U8
                                                                                                                                 , U32) :: (U8
                                                                                                                                           , U32) :: (U8
                                                                                                                                                     , U32) ::  { acc : (U8
                                                                                                                                                                        , U32)
                                                                                                                                                                , obsv : U32 } -> (U8
                                                                                                                                                                                  , U32)
                                                                                                         , acc = (0 :: U8
                                                                                                                 , i :: U32)
                                                                                                         , obsv = j :: U32 } ::  { n : U32
                                                                                                                                 , stop :  { acc : (U8
                                                                                                                                                   , U32)
                                                                                                                                           , obsv : U32 } -> Bool
                                                                                                                                 , step :  { acc : (U8
                                                                                                                                                   , U32)
                                                                                                                                           , obsv : U32 } -> (U8
                                                                                                                                                             , U32)
                                                                                                                                 , acc : (U8
                                                                                                                                         , U32)
                                                                                                                                 , obsv : U32 } :: (U8
                                                                                                                                                   , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , i :: U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v8' :: U32 = i :: U32
               in (3 :: U8, v8' :: U32) :: (U8
                                           , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf15 : U32 -> U32
cogent_lf15 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v4' :: U32
                                            , i :: U32) = let v1' :: U32 = 0 :: U32
            and v2' :: U32 = i :: U32
            and v3' :: U32 = v1' :: U32
            and (v4' :: U32
                , i :: U32) = (v3' :: U32
                              , v3' :: U32)
            in (v4' :: U32
               , i :: U32) :: (U32, U32)
         and (c' :: U8
             , i :: U32) = let (c' :: U8
                               , i :: U32) = repeat[(U8, U32)
                                                   , ()]{{}} ::  { n : U32
                                                                 , stop :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> Bool
                                                                 , step :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> (U8
                                                                                            , U32)
                                                                 , acc : (U8
                                                                         , U32)
                                                                 , obsv : () } -> (U8
                                                                                  , U32) #{ n = 5 :: U32
                                                                                          , stop = \#{ acc = (c' :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let v7' :: Bool = let v5' :: U32 = i :: U32
                                                                                             and v6' :: U32 = 5 :: U32
                                                                                             and v7' :: Bool = v5' :: U32 /= v6' :: U32 :: Bool
                                                                                             in v7' :: Bool :: Bool
                                                                                          in c' :: U8 > 1 :: U8 :: Bool || not v7' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                               , U32)
                                                                                                                                                                       , obsv : () } -> Bool
                                                                                          , step = \#{ acc = (_ :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let c' :: U8 = 0 :: U8
                                                                                          in if c' :: U8 > 1 :: U8 :: Bool
                                                                                             then
                                                                                                (c' :: U8
                                                                                                , i :: U32)
                                                                                             else
                                                                                                let (v11' :: U32
                                                                                                    , i :: U32) = let v8' :: U32 = 1 :: U32
                                                                                                   and v9' :: U32 = i :: U32
                                                                                                   and v10' :: U32 = v9' :: U32 + v8' :: U32 :: U32
                                                                                                   and (v11' :: U32
                                                                                                       , i :: U32) = (i :: U32
                                                                                                                     , v10' :: U32)
                                                                                                   in (v11' :: U32
                                                                                                      , i :: U32) :: (U32
                                                                                                                     , U32)
                                                                                                in (0 :: U8
                                                                                                   , i :: U32) :: (U8
                                                                                                                  , U32) :: (U8
                                                                                                                            , U32) :: (U8
                                                                                                                                      , U32) ::  { acc : (U8
                                                                                                                                                         , U32)
                                                                                                                                                 , obsv : () } -> (U8
                                                                                                                                                                  , U32)
                                                                                          , acc = (0 :: U8
                                                                                                  , i :: U32)
                                                                                          , obsv = () } ::  { n : U32
                                                                                                            , stop :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> Bool
                                                                                                            , step :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> (U8
                                                                                                                                       , U32)
                                                                                                            , acc : (U8
                                                                                                                    , U32)
                                                                                                            , obsv : () } :: (U8
                                                                                                                             , U32)
            in (if c' :: U8 == 2 :: U8 :: Bool
               then 0 :: U8
               else c' :: U8 :: U8
               , i :: U32) :: (U8, U32)
         in (c' :: U8, i :: U32) :: (U8
                                    , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v12' :: U32 = i :: U32
               in (3 :: U8, v12' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lf16 : U32 -> U32
cogent_lf16 i :: U32 =
   let (c' :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v4' :: U32
                                            , i :: U32) = let v1' :: U32 = 10 :: U32
            and v2' :: U32 = i :: U32
            and v3' :: U32 = v1' :: U32
            and (v4' :: U32
                , i :: U32) = (v3' :: U32
                              , v3' :: U32)
            in (v4' :: U32
               , i :: U32) :: (U32, U32)
         and (c' :: U8
             , i :: U32) = let (c' :: U8
                               , i :: U32) = repeat[(U8, U32)
                                                   , ()]{{}} ::  { n : U32
                                                                 , stop :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> Bool
                                                                 , step :  { acc : (U8
                                                                                   , U32)
                                                                           , obsv : () } -> (U8
                                                                                            , U32)
                                                                 , acc : (U8
                                                                         , U32)
                                                                 , obsv : () } -> (U8
                                                                                  , U32) #{ n = 10 :: U32
                                                                                          , stop = \#{ acc = (c' :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let v7' :: Bool = let v5' :: U32 = i :: U32
                                                                                             and v6' :: U32 = 5 :: U32
                                                                                             and v7' :: Bool = v5' :: U32 /= v6' :: U32 :: Bool
                                                                                             in v7' :: Bool :: Bool
                                                                                          in c' :: U8 > 1 :: U8 :: Bool || not v7' :: Bool :: Bool :: Bool :: Bool ::  { acc : (U8
                                                                                                                                                                               , U32)
                                                                                                                                                                       , obsv : () } -> Bool
                                                                                          , step = \#{ acc = (_ :: U8
                                                                                                             , i :: U32)
                                                                                                     , obsv = () :: () } ::  { acc : (U8
                                                                                                                                     , U32)
                                                                                                                             , obsv : () } => let c' :: U8 = 0 :: U8
                                                                                          in if c' :: U8 > 1 :: U8 :: Bool
                                                                                             then
                                                                                                (c' :: U8
                                                                                                , i :: U32)
                                                                                             else
                                                                                                let (v11' :: U32
                                                                                                    , i :: U32) = let v8' :: U32 = 1 :: U32
                                                                                                   and v9' :: U32 = i :: U32
                                                                                                   and v10' :: U32 = v9' :: U32 - v8' :: U32 :: U32
                                                                                                   and (v11' :: U32
                                                                                                       , i :: U32) = (i :: U32
                                                                                                                     , v10' :: U32)
                                                                                                   in (v11' :: U32
                                                                                                      , i :: U32) :: (U32
                                                                                                                     , U32)
                                                                                                in (0 :: U8
                                                                                                   , i :: U32) :: (U8
                                                                                                                  , U32) :: (U8
                                                                                                                            , U32) :: (U8
                                                                                                                                      , U32) ::  { acc : (U8
                                                                                                                                                         , U32)
                                                                                                                                                 , obsv : () } -> (U8
                                                                                                                                                                  , U32)
                                                                                          , acc = (0 :: U8
                                                                                                  , i :: U32)
                                                                                          , obsv = () } ::  { n : U32
                                                                                                            , stop :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> Bool
                                                                                                            , step :  { acc : (U8
                                                                                                                              , U32)
                                                                                                                      , obsv : () } -> (U8
                                                                                                                                       , U32)
                                                                                                            , acc : (U8
                                                                                                                    , U32)
                                                                                                            , obsv : () } :: (U8
                                                                                                                             , U32)
            in (if c' :: U8 == 2 :: U8 :: Bool
               then 0 :: U8
               else c' :: U8 :: U8
               , i :: U32) :: (U8, U32)
         in (c' :: U8, i :: U32) :: (U8
                                    , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v12' :: U32 = i :: U32
               in (3 :: U8, v12' :: U32) :: (U8
                                            , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_lfe1 : U32 -> U32
cogent_lfe1 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = gencotDummy :: String -> U8 "Unsupported form of for loop: Counting variables modified in body" :: String :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' :: U32 = i :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_lfe2 : (U32, U32) -> U32
cogent_lfe2 (i :: U32
            , j :: U32) =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = gencotDummy :: String -> U8 "Unsupported form of for loop: Controlling expression modified" :: String :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' :: U32 = i :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_lfe3 : U32 -> U32
cogent_lfe3 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = gencotDummy :: String -> U8 "Unsupported form of for loop: No counting variable found" :: String :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' :: U32 = i :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_lfe4 : (U32, U32) -> U32
cogent_lfe4 (i :: U32
            , j :: U32) =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = gencotDummy :: String -> U8 "Unsupported form of for loop: Controlling expression modified" :: String :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' :: U32 = i :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_lfe5 : U32 -> U32
cogent_lfe5 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = gencotDummy :: String -> U8 "Unsupported form of for loop: No upper limit for iterations found" :: String :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' :: U32 = i :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_lfe6 : U32 -> U32
cogent_lfe6 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = gencotDummy :: String -> U8 "Unsupported form of for loop: No upper limit for iterations found" :: String :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' :: U32 = i :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_lfe7 : U32 -> U32
cogent_lfe7 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = gencotDummy :: String -> U8 "Unsupported form of for loop: No upper limit for iterations found" :: String :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' :: U32 = i :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_lfe8 : U32 -> U32
cogent_lfe8 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = gencotDummy :: String -> U8 "Unsupported form of for loop: No upper limit for iterations found" :: String :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' :: U32 = i :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_lfe9 : U32 -> U32
cogent_lfe9 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = gencotDummy :: String -> U8 "Unsupported form of for loop: No upper limit for iterations found" :: String :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' :: U32 = i :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_lfe10 : U32 -> U32
cogent_lfe10 i :: U32 =
   let (c' :: U8
       , r' :: U32) = let c' :: U8 = gencotDummy :: String -> U8 "Unsupported form of for loop: No upper limit for iterations found" :: String :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' :: U32 = i :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
