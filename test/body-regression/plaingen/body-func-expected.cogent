cogent_ffv1 : () -> ()
cogent_ffv1 () :: () =
   let _ = 0 :: U8
   in () :: () :: ()
cogent_ffv2 : () -> ()
cogent_ffv2 () :: () =
   let (_ :: U8
       , r' :: ()) = let v' = let v' = () :: ()
         in v' :: () :: ()
      in (3 :: U8, v' :: ()) :: (U8
                                , ())
   in () :: () :: ()
cogent_ffv11 : MayNull (CPtr =  { cont : U32 }) -> ()
cogent_ffv11 i :: MayNull (CPtr =  { cont : U32 }) =
   let _ = 0 :: U8
   in () :: () :: ()
cogent_ffv12 : MayNull (CPtr =  { cont : U32 }) -> (()
                                                   , MayNull (CPtr =  { cont : U32 }))
cogent_ffv12 i :: MayNull (CPtr =  { cont : U32 }) =
   let _ = 0 :: U8
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_ffv13 : MayNull (CPtr =  { cont : U32 }) -> ()
cogent_ffv13 i :: MayNull (CPtr =  { cont : U32 }) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                             , i :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
         and v' = i :: MayNull (CPtr =  { cont : U32 })
         and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
         and v' = p0' :: U32
         and v' = v1' :: U32
         and (v' :: MayNull (CPtr =  { cont : U32 })
             , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                             , v' :: MayNull (CPtr =  { cont : U32 }))
         and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
         in (v' :: MayNull (CPtr =  { cont : U32 })
            , i :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                               , MayNull  { cont : U32 })
      in (0 :: U8
         , i :: MayNull  { cont : U32 }) :: (U8
                                            , MayNull  { cont : U32 })
   in () :: () :: ()
cogent_ffv14 : MayNull (CPtr =  { cont : U32 }) -> (()
                                                   , MayNull (CPtr =  { cont : U32 }))
cogent_ffv14 i :: MayNull (CPtr =  { cont : U32 }) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                             , i :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
         and v' = i :: MayNull (CPtr =  { cont : U32 })
         and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
         and v' = p0' :: U32
         and v' = v1' :: U32
         and (v' :: MayNull (CPtr =  { cont : U32 })
             , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                             , v' :: MayNull (CPtr =  { cont : U32 }))
         and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
         in (v' :: MayNull (CPtr =  { cont : U32 })
            , i :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                               , MayNull  { cont : U32 })
      in (0 :: U8
         , i :: MayNull  { cont : U32 }) :: (U8
                                            , MayNull  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_ffv15 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })) -> ()
cogent_ffv15 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , j :: MayNull  { cont : U32 }) = let (c' :: U8
                                             , i :: MayNull  { cont : U32 }
                                             , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                                   , i :: MayNull  { cont : U32 }
                                                                                   , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
            and j { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
            and v1' = p1' :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: MayNull (CPtr =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , j :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , j :: MayNull  { cont : U32 })
         else let (c' :: U8
                  , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                        , j :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
                  and v' = j :: MayNull (CPtr =  { cont : U32 })
                  and j { cont = p2' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
                  and v' = p2' :: U32
                  and v' = v1' :: U32
                  and (v' :: MayNull (CPtr =  { cont : U32 })
                      , p2' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                      , v' :: MayNull (CPtr =  { cont : U32 }))
                  and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p2' :: U32 } :: MayNull  { cont : U32 }
                  in (v' :: MayNull (CPtr =  { cont : U32 })
                     , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                        , MayNull  { cont : U32 })
               in (0 :: U8
                  , j :: MayNull  { cont : U32 }) :: (U8
                                                     , MayNull  { cont : U32 })
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 }) :: (U8
                                                                                , MayNull  { cont : U32 }
                                                                                , MayNull  { cont : U32 }) :: (U8
                                                                                                              , MayNull  { cont : U32 }
                                                                                                              , MayNull  { cont : U32 })
   in () :: () :: ()
cogent_ffv16 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })) -> (()
                                                      , MayNull (CPtr =  { cont : U32 }))
cogent_ffv16 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , j :: MayNull  { cont : U32 }) = let (c' :: U8
                                             , i :: MayNull  { cont : U32 }
                                             , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                                   , i :: MayNull  { cont : U32 }
                                                                                   , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
            and j { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
            and v1' = p1' :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: MayNull (CPtr =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , j :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , j :: MayNull  { cont : U32 })
         else let (c' :: U8
                  , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                        , j :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
                  and v' = j :: MayNull (CPtr =  { cont : U32 })
                  and j { cont = p2' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
                  and v' = p2' :: U32
                  and v' = v1' :: U32
                  and (v' :: MayNull (CPtr =  { cont : U32 })
                      , p2' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                      , v' :: MayNull (CPtr =  { cont : U32 }))
                  and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p2' :: U32 } :: MayNull  { cont : U32 }
                  in (v' :: MayNull (CPtr =  { cont : U32 })
                     , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                        , MayNull  { cont : U32 })
               in (0 :: U8
                  , j :: MayNull  { cont : U32 }) :: (U8
                                                     , MayNull  { cont : U32 })
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 }) :: (U8
                                                                                , MayNull  { cont : U32 }
                                                                                , MayNull  { cont : U32 }) :: (U8
                                                                                                              , MayNull  { cont : U32 }
                                                                                                              , MayNull  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_ffv17 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })) -> (()
                                                      , MayNull (CPtr =  { cont : U32 }))
cogent_ffv17 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , j :: MayNull  { cont : U32 }) = let (c' :: U8
                                             , i :: MayNull  { cont : U32 }
                                             , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                                   , i :: MayNull  { cont : U32 }
                                                                                   , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
            and j { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
            and v1' = p1' :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: MayNull (CPtr =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , j :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , j :: MayNull  { cont : U32 })
         else let (c' :: U8
                  , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                        , j :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
                  and v' = j :: MayNull (CPtr =  { cont : U32 })
                  and j { cont = p2' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
                  and v' = p2' :: U32
                  and v' = v1' :: U32
                  and (v' :: MayNull (CPtr =  { cont : U32 })
                      , p2' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                      , v' :: MayNull (CPtr =  { cont : U32 }))
                  and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p2' :: U32 } :: MayNull  { cont : U32 }
                  in (v' :: MayNull (CPtr =  { cont : U32 })
                     , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                        , MayNull  { cont : U32 })
               in (0 :: U8
                  , j :: MayNull  { cont : U32 }) :: (U8
                                                     , MayNull  { cont : U32 })
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 }) :: (U8
                                                                                , MayNull  { cont : U32 }
                                                                                , MayNull  { cont : U32 }) :: (U8
                                                                                                              , MayNull  { cont : U32 }
                                                                                                              , MayNull  { cont : U32 })
   in (() :: ()
      , j :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_ffv18 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })) -> (()
                                                      , MayNull (CPtr =  { cont : U32 })
                                                      , MayNull (CPtr =  { cont : U32 }))
cogent_ffv18 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , j :: MayNull  { cont : U32 }) = let (c' :: U8
                                             , i :: MayNull  { cont : U32 }
                                             , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                                   , i :: MayNull  { cont : U32 }
                                                                                   , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
            and j { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
            and v1' = p1' :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: MayNull (CPtr =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , j :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , j :: MayNull  { cont : U32 })
         else let (c' :: U8
                  , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                        , j :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
                  and v' = j :: MayNull (CPtr =  { cont : U32 })
                  and j { cont = p2' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
                  and v' = p2' :: U32
                  and v' = v1' :: U32
                  and (v' :: MayNull (CPtr =  { cont : U32 })
                      , p2' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                      , v' :: MayNull (CPtr =  { cont : U32 }))
                  and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p2' :: U32 } :: MayNull  { cont : U32 }
                  in (v' :: MayNull (CPtr =  { cont : U32 })
                     , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                        , MayNull  { cont : U32 })
               in (0 :: U8
                  , j :: MayNull  { cont : U32 }) :: (U8
                                                     , MayNull  { cont : U32 })
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 }) :: (U8
                                                                                , MayNull  { cont : U32 }
                                                                                , MayNull  { cont : U32 }) :: (U8
                                                                                                              , MayNull  { cont : U32 }
                                                                                                              , MayNull  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                  , MayNull (CPtr =  { cont : U32 })
                                                  , MayNull (CPtr =  { cont : U32 }))
type GlobState1 =
   (CPtr =  { cont : U32 })
type GlobState2 =
   (CPtr =  { cont : U32 })
cogent_ffv21 : (GlobState1 =  { cont : U32 }) -> (()
                                                 , (GlobState1 =  { cont : U32 }))
cogent_ffv21 g :: (GlobState1 =  { cont : U32 }) =
   let _ = 0 :: U8
   in (() :: ()
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffv22 : (GlobState2 =  { cont : U32 }) -> (()
                                                 , (GlobState2 =  { cont : U32 }))
cogent_ffv22 g :: (GlobState2 =  { cont : U32 }) =
   let _ = 0 :: U8
   in (() :: ()
      , g :: (GlobState2 =  { cont : U32 })) :: (()
                                                , (GlobState2 =  { cont : U32 }))
cogent_ffv23 : ((GlobState1 =  { cont : U32 })
               , (GlobState2 =  { cont : U32 })) -> (()
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
cogent_ffv23 (g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) =
   let _ = 0 :: U8
   in (() :: ()
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (()
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_ffv24 : ((GlobState1 =  { cont : U32 })
               , (GlobState2 =  { cont : U32 })) -> (()
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
cogent_ffv24 (g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) =
   let _ = 0 :: U8
   in (() :: ()
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (()
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_ffv25 : (GlobState1 =  { cont : U32 }) -> (()
                                                 , (GlobState1 =  { cont : U32 }))
cogent_ffv25 g :: (GlobState1 =  { cont : U32 }) =
   let (_ :: U8
       , g ::  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                     , g ::  { cont : U32 }) = let v1' = 5 :: U32
         and v' = g :: (GlobState1 =  { cont : U32 })
         and g { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
         and v' = p0' :: (GlobState1 =  #{ cont : U32 })
         and v' = v1' :: U32
         and (v' :: (GlobState1 =  { cont : U32 })
             , p0' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                         , v' :: (GlobState1 =  { cont : U32 }))
         and g = g :: (GlobState1 =  { cont : U32 }) { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
         in (v' :: (GlobState1 =  { cont : U32 })
            , g ::  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                       ,  { cont : U32 })
      in (0 :: U8
         , g ::  { cont : U32 }) :: (U8
                                    ,  { cont : U32 })
   in (() :: ()
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffv26 : (GlobState1 =  { cont : U32 }) -> (()
                                                 , (GlobState1 =  { cont : U32 }))
cogent_ffv26 g :: (GlobState1 =  { cont : U32 }) =
   let _ = let v' = let v1' = 5 :: U32
         and v' = gencotDummy :: String -> () "Cannot access global variable: glob2" :: String :: ()
         and v' = v1' :: U32
         and (v' :: ()
             , err' :: ()) = (v' :: ()
                             , v' :: ())
         in v' :: () :: ()
      in 0 :: U8 :: U8
   in (() :: ()
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffv27 : (GlobState1 =  { cont : U32 }) -> (()
                                                 , (GlobState1 =  { cont : U32 }))
cogent_ffv27 g :: (GlobState1 =  { cont : U32 }) =
   let (_ :: U8
       , g ::  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                     , g ::  { cont : U32 }) = let v1' = 1 :: U32
         and v' = g :: (GlobState1 =  { cont : U32 })
         and g { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
         and v' = p0' :: (GlobState1 =  #{ cont : U32 })
         and v' = v' :: (GlobState1 =  { cont : U32 }) + v1' :: U32 :: U32
         and (v' :: (GlobState1 =  { cont : U32 })
             , p0' :: (GlobState1 =  #{ cont : U32 })) = (p0' :: (GlobState1 =  #{ cont : U32 })
                                                         , v' :: (GlobState1 =  { cont : U32 }))
         and g = g :: (GlobState1 =  { cont : U32 }) { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
         in (v' :: (GlobState1 =  { cont : U32 })
            , g ::  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                       ,  { cont : U32 })
      in (0 :: U8
         , g ::  { cont : U32 }) :: (U8
                                    ,  { cont : U32 })
   in (() :: ()
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffv28 : ((GlobState1 =  { cont : U32 })
               , (GlobState2 =  { cont : U32 })) -> (()
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
cogent_ffv28 (g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) =
   let (_ :: U8
       , g1 ::  { cont : U32 }
       , g2 ::  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                      , g1 ::  { cont : U32 }
                                      , g2 ::  { cont : U32 }) = let v1' = g2 :: (GlobState2 =  { cont : U32 })
         and g2 { cont = p1' :: (GlobState2 =  #{ cont : U32 }) } = v1' :: (GlobState2 =  { cont : U32 })
         and v1' = p1' :: (GlobState2 =  #{ cont : U32 })
         and v' = g1 :: (GlobState1 =  { cont : U32 })
         and g1 { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
         and v' = p0' :: (GlobState1 =  #{ cont : U32 })
         and v' = v1' :: (GlobState2 =  { cont : U32 })
         and (v' :: (GlobState1 =  { cont : U32 })
             , p0' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                         , v' :: (GlobState1 =  { cont : U32 }))
         and g1 = g1 :: (GlobState1 =  { cont : U32 }) { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
         and g2 = g2 :: (GlobState2 =  { cont : U32 }) { cont = p1' :: (GlobState2 =  #{ cont : U32 }) } ::  { cont : U32 }
         in (v' :: (GlobState1 =  { cont : U32 })
            , g1 ::  { cont : U32 }
            , g2 ::  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                        ,  { cont : U32 }
                                        ,  { cont : U32 })
      in (0 :: U8
         , g1 ::  { cont : U32 }
         , g2 ::  { cont : U32 }) :: (U8
                                     ,  { cont : U32 }
                                     ,  { cont : U32 })
   in (() :: ()
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (()
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_ffv31 : (MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })) -> (()
                                                    , (GlobState1 =  { cont : U32 }))
cogent_ffv31 (i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , g ::  { cont : U32 }
       , i :: MayNull  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                             , g ::  { cont : U32 }
                                             , i :: MayNull  { cont : U32 }) = let v1' = i :: MayNull (CPtr =  { cont : U32 })
         and i { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
         and v1' = p1' :: U32
         and v' = g :: (GlobState1 =  { cont : U32 })
         and g { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
         and v' = p0' :: (GlobState1 =  #{ cont : U32 })
         and v' = v1' :: MayNull (CPtr =  { cont : U32 })
         and (v' :: (GlobState1 =  { cont : U32 })
             , p0' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                         , v' :: (GlobState1 =  { cont : U32 }))
         and g = g :: (GlobState1 =  { cont : U32 }) { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
         and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
         in (v' :: (GlobState1 =  { cont : U32 })
            , g ::  { cont : U32 }
            , i :: MayNull  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                               ,  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in (0 :: U8
         , g ::  { cont : U32 }
         , i :: MayNull  { cont : U32 }) :: (U8
                                            ,  { cont : U32 }
                                            , MayNull  { cont : U32 })
   in (() :: ()
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffv32 : (MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })) -> (()
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 }))
cogent_ffv32 (i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                     , i :: MayNull  { cont : U32 }
                                     , g ::  { cont : U32 }) = let v1' = g :: (GlobState1 =  { cont : U32 })
         and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
         and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
         and v' = i :: MayNull (CPtr =  { cont : U32 })
         and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
         and v' = p0' :: U32
         and v' = v1' :: (GlobState1 =  { cont : U32 })
         and (v' :: MayNull (CPtr =  { cont : U32 })
             , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                             , v' :: MayNull (CPtr =  { cont : U32 }))
         and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
         and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
         in (v' :: MayNull (CPtr =  { cont : U32 })
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in (0 :: U8
         , i :: MayNull  { cont : U32 }
         , g ::  { cont : U32 }) :: (U8
                                    , MayNull  { cont : U32 }
                                    ,  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffv33 : (MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })) -> (()
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 }))
cogent_ffv33 (i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                     , i :: MayNull  { cont : U32 }
                                     , g ::  { cont : U32 }) = let v2' = 1 :: U32
         and v1' = g :: (GlobState1 =  { cont : U32 })
         and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
         and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
         and v1' = v1' :: (GlobState1 =  { cont : U32 }) + v2' :: U32 :: U32
         and (v1' :: (GlobState1 =  { cont : U32 })
             , p1' :: (GlobState1 =  #{ cont : U32 })) = (p1' :: (GlobState1 =  #{ cont : U32 })
                                                         , v1' :: (GlobState1 =  { cont : U32 }))
         and v' = i :: MayNull (CPtr =  { cont : U32 })
         and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
         and v' = p0' :: U32
         and v' = v1' :: (GlobState1 =  { cont : U32 })
         and (v' :: MayNull (CPtr =  { cont : U32 })
             , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                             , v' :: MayNull (CPtr =  { cont : U32 }))
         and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
         and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
         in (v' :: MayNull (CPtr =  { cont : U32 })
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in (0 :: U8
         , i :: MayNull  { cont : U32 }
         , g ::  { cont : U32 }) :: (U8
                                    , MayNull  { cont : U32 }
                                    ,  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffv34 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })) -> (()
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 }))
cogent_ffv34 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }
       , j :: MayNull  { cont : U32 }) = let (c' :: U8
                                             , i :: MayNull  { cont : U32 }
                                             , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                           , i :: MayNull  { cont : U32 }
                                                                           , g ::  { cont : U32 }) = let v1' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
            and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: (GlobState1 =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                          , MayNull  { cont : U32 }
                                          ,  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (U8
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , g ::  { cont : U32 }
              , j :: MayNull  { cont : U32 })
         else let (c' :: U8
                  , g ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                        , g ::  { cont : U32 }
                                                        , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
                  and j { cont = p3' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
                  and v1' = p3' :: U32
                  and v' = g :: (GlobState1 =  { cont : U32 })
                  and g { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
                  and v' = p2' :: (GlobState1 =  #{ cont : U32 })
                  and v' = v1' :: MayNull (CPtr =  { cont : U32 })
                  and (v' :: (GlobState1 =  { cont : U32 })
                      , p2' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                                  , v' :: (GlobState1 =  { cont : U32 }))
                  and g = g :: (GlobState1 =  { cont : U32 }) { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
                  and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p3' :: U32 } :: MayNull  { cont : U32 }
                  in (v' :: (GlobState1 =  { cont : U32 })
                     , g ::  { cont : U32 }
                     , j :: MayNull  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                                        ,  { cont : U32 }
                                                        , MayNull  { cont : U32 })
               in (0 :: U8
                  , g ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }) :: (U8
                                                     ,  { cont : U32 }
                                                     , MayNull  { cont : U32 })
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  ,  { cont : U32 }
                                                  , MayNull  { cont : U32 }) :: (U8
                                                                                , MayNull  { cont : U32 }
                                                                                ,  { cont : U32 }
                                                                                , MayNull  { cont : U32 }) :: (U8
                                                                                                              , MayNull  { cont : U32 }
                                                                                                              ,  { cont : U32 }
                                                                                                              , MayNull  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffv35 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })) -> (()
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 }))
cogent_ffv35 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }
       , j :: MayNull  { cont : U32 }) = let (c' :: U8
                                             , i :: MayNull  { cont : U32 }
                                             , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                           , i :: MayNull  { cont : U32 }
                                                                           , g ::  { cont : U32 }) = let v1' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
            and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: (GlobState1 =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                          , MayNull  { cont : U32 }
                                          ,  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (U8
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , g ::  { cont : U32 }
              , j :: MayNull  { cont : U32 })
         else let (c' :: U8
                  , g ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                        , g ::  { cont : U32 }
                                                        , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
                  and j { cont = p3' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
                  and v1' = p3' :: U32
                  and v' = g :: (GlobState1 =  { cont : U32 })
                  and g { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
                  and v' = p2' :: (GlobState1 =  #{ cont : U32 })
                  and v' = v1' :: MayNull (CPtr =  { cont : U32 })
                  and (v' :: (GlobState1 =  { cont : U32 })
                      , p2' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                                  , v' :: (GlobState1 =  { cont : U32 }))
                  and g = g :: (GlobState1 =  { cont : U32 }) { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
                  and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p3' :: U32 } :: MayNull  { cont : U32 }
                  in (v' :: (GlobState1 =  { cont : U32 })
                     , g ::  { cont : U32 }
                     , j :: MayNull  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                                        ,  { cont : U32 }
                                                        , MayNull  { cont : U32 })
               in (0 :: U8
                  , g ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }) :: (U8
                                                     ,  { cont : U32 }
                                                     , MayNull  { cont : U32 })
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  ,  { cont : U32 }
                                                  , MayNull  { cont : U32 }) :: (U8
                                                                                , MayNull  { cont : U32 }
                                                                                ,  { cont : U32 }
                                                                                , MayNull  { cont : U32 }) :: (U8
                                                                                                              , MayNull  { cont : U32 }
                                                                                                              ,  { cont : U32 }
                                                                                                              , MayNull  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffv36 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })
               , (GlobState2 =  { cont : U32 })) -> (()
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
cogent_ffv36 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g1 ::  { cont : U32 }
       , g2 ::  { cont : U32 }
       , j :: MayNull  { cont : U32 }) = let (c' :: U8
                                             , i :: MayNull  { cont : U32 }
                                             , g1 ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                            , i :: MayNull  { cont : U32 }
                                                                            , g1 ::  { cont : U32 }) = let v1' = g1 :: (GlobState1 =  { cont : U32 })
            and g1 { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
            and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: (GlobState1 =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and g1 = g1 :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , g1 ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                           , MayNull  { cont : U32 }
                                           ,  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , g1 ::  { cont : U32 }) :: (U8
                                        , MayNull  { cont : U32 }
                                        ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , g1 ::  { cont : U32 }
              , g2 ::  { cont : U32 }
              , j :: MayNull  { cont : U32 })
         else let (c' :: U8
                  , g2 ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }) = let (v' :: (GlobState2 =  { cont : U32 })
                                                        , g2 ::  { cont : U32 }
                                                        , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
                  and j { cont = p3' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
                  and v1' = p3' :: U32
                  and v' = g2 :: (GlobState2 =  { cont : U32 })
                  and g2 { cont = p2' :: (GlobState2 =  #{ cont : U32 }) } = v' :: (GlobState2 =  { cont : U32 })
                  and v' = p2' :: (GlobState2 =  #{ cont : U32 })
                  and v' = v1' :: MayNull (CPtr =  { cont : U32 })
                  and (v' :: (GlobState2 =  { cont : U32 })
                      , p2' :: (GlobState2 =  #{ cont : U32 })) = (v' :: (GlobState2 =  { cont : U32 })
                                                                  , v' :: (GlobState2 =  { cont : U32 }))
                  and g2 = g2 :: (GlobState2 =  { cont : U32 }) { cont = p2' :: (GlobState2 =  #{ cont : U32 }) } ::  { cont : U32 }
                  and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p3' :: U32 } :: MayNull  { cont : U32 }
                  in (v' :: (GlobState2 =  { cont : U32 })
                     , g2 ::  { cont : U32 }
                     , j :: MayNull  { cont : U32 }) :: ((GlobState2 =  { cont : U32 })
                                                        ,  { cont : U32 }
                                                        , MayNull  { cont : U32 })
               in (0 :: U8
                  , g2 ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }) :: (U8
                                                     ,  { cont : U32 }
                                                     , MayNull  { cont : U32 })
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , g1 ::  { cont : U32 }
               , g2 ::  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  ,  { cont : U32 }
                                                  ,  { cont : U32 }
                                                  , MayNull  { cont : U32 }) :: (U8
                                                                                , MayNull  { cont : U32 }
                                                                                ,  { cont : U32 }
                                                                                ,  { cont : U32 }
                                                                                , MayNull  { cont : U32 }) :: (U8
                                                                                                              , MayNull  { cont : U32 }
                                                                                                              ,  { cont : U32 }
                                                                                                              ,  { cont : U32 }
                                                                                                              , MayNull  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (()
                                                 , MayNull (CPtr =  { cont : U32 })
                                                 , MayNull (CPtr =  { cont : U32 })
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_ffv41 : Heap -> (()
                       , Heap)
cogent_ffv41 heap :: Heap =
   let _ = 0 :: U8
   in (() :: ()
      , heap :: Heap) :: ((), Heap)
cogent_ffv42 : ((GlobState1 =  { cont : U32 })
               , Heap) -> (()
                          , (GlobState1 =  { cont : U32 })
                          , Heap)
cogent_ffv42 (g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) =
   let _ = 0 :: U8
   in (() :: ()
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (()
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_ffv43 : (MayNull (CPtr =  { cont : U32 })
               , Heap) -> ((), Heap)
cogent_ffv43 (i :: MayNull (CPtr =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                             , i :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
         and v' = i :: MayNull (CPtr =  { cont : U32 })
         and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
         and v' = p0' :: U32
         and v' = v1' :: U32
         and (v' :: MayNull (CPtr =  { cont : U32 })
             , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                             , v' :: MayNull (CPtr =  { cont : U32 }))
         and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
         in (v' :: MayNull (CPtr =  { cont : U32 })
            , i :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                               , MayNull  { cont : U32 })
      in (0 :: U8
         , i :: MayNull  { cont : U32 }) :: (U8
                                            , MayNull  { cont : U32 })
   in (() :: ()
      , heap :: Heap) :: ((), Heap)
cogent_ffv44 : (MayNull (CPtr =  { cont : U32 })
               , Heap) -> (()
                          , MayNull (CPtr =  { cont : U32 })
                          , Heap)
cogent_ffv44 (i :: MayNull (CPtr =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                             , i :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
         and v' = i :: MayNull (CPtr =  { cont : U32 })
         and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
         and v' = p0' :: U32
         and v' = v1' :: U32
         and (v' :: MayNull (CPtr =  { cont : U32 })
             , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                             , v' :: MayNull (CPtr =  { cont : U32 }))
         and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
         in (v' :: MayNull (CPtr =  { cont : U32 })
            , i :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                               , MayNull  { cont : U32 })
      in (0 :: U8
         , i :: MayNull  { cont : U32 }) :: (U8
                                            , MayNull  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , heap :: Heap) :: (()
                         , MayNull (CPtr =  { cont : U32 })
                         , Heap)
cogent_ffv45 : (MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })
               , Heap) -> (()
                          , (GlobState1 =  { cont : U32 })
                          , Heap)
cogent_ffv45 (i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , g ::  { cont : U32 }
       , i :: MayNull  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                             , g ::  { cont : U32 }
                                             , i :: MayNull  { cont : U32 }) = let v1' = i :: MayNull (CPtr =  { cont : U32 })
         and i { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
         and v1' = p1' :: U32
         and v' = g :: (GlobState1 =  { cont : U32 })
         and g { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
         and v' = p0' :: (GlobState1 =  #{ cont : U32 })
         and v' = v1' :: MayNull (CPtr =  { cont : U32 })
         and (v' :: (GlobState1 =  { cont : U32 })
             , p0' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                         , v' :: (GlobState1 =  { cont : U32 }))
         and g = g :: (GlobState1 =  { cont : U32 }) { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
         and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
         in (v' :: (GlobState1 =  { cont : U32 })
            , g ::  { cont : U32 }
            , i :: MayNull  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                               ,  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in (0 :: U8
         , g ::  { cont : U32 }
         , i :: MayNull  { cont : U32 }) :: (U8
                                            ,  { cont : U32 }
                                            , MayNull  { cont : U32 })
   in (() :: ()
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (()
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_ffv46 : (MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })
               , Heap) -> (()
                          , MayNull (CPtr =  { cont : U32 })
                          , (GlobState1 =  { cont : U32 })
                          , Heap)
cogent_ffv46 (i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                     , i :: MayNull  { cont : U32 }
                                     , g ::  { cont : U32 }) = let v1' = g :: (GlobState1 =  { cont : U32 })
         and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
         and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
         and v' = i :: MayNull (CPtr =  { cont : U32 })
         and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
         and v' = p0' :: U32
         and v' = v1' :: (GlobState1 =  { cont : U32 })
         and (v' :: MayNull (CPtr =  { cont : U32 })
             , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                             , v' :: MayNull (CPtr =  { cont : U32 }))
         and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
         and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
         in (v' :: MayNull (CPtr =  { cont : U32 })
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in (0 :: U8
         , i :: MayNull  { cont : U32 }
         , g ::  { cont : U32 }) :: (U8
                                    , MayNull  { cont : U32 }
                                    ,  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (()
                         , MayNull (CPtr =  { cont : U32 })
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_ffv47 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })
               , Heap) -> (()
                          , MayNull (CPtr =  { cont : U32 })
                          , MayNull (CPtr =  { cont : U32 })
                          , Heap)
cogent_ffv47 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , j :: MayNull  { cont : U32 }) = let (c' :: U8
                                             , i :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                                   , i :: MayNull  { cont : U32 }) = let v1' = gencotDummy :: String -> () "Cannot access global variable: glob1" :: String :: ()
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: ()
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , j :: MayNull  { cont : U32 })
         else let (c' :: U8
                  , j :: MayNull  { cont : U32 }) = let (v' :: ()
                                                        , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
                  and j { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
                  and v1' = p1' :: U32
                  and v' = gencotDummy :: String -> () "Cannot access global variable: glob1" :: String :: ()
                  and v' = v1' :: MayNull (CPtr =  { cont : U32 })
                  and (v' :: ()
                      , err' :: ()) = (v' :: ()
                                      , v' :: ())
                  and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
                  in (v' :: ()
                     , j :: MayNull  { cont : U32 }) :: (()
                                                        , MayNull  { cont : U32 })
               in (0 :: U8
                  , j :: MayNull  { cont : U32 }) :: (U8
                                                     , MayNull  { cont : U32 })
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 }) :: (U8
                                                                                , MayNull  { cont : U32 }
                                                                                , MayNull  { cont : U32 }) :: (U8
                                                                                                              , MayNull  { cont : U32 }
                                                                                                              , MayNull  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , heap :: Heap) :: (()
                         , MayNull (CPtr =  { cont : U32 })
                         , MayNull (CPtr =  { cont : U32 })
                         , Heap)
cogent_ffv48 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })
               , Heap) -> (()
                          , MayNull (CPtr =  { cont : U32 })
                          , MayNull (CPtr =  { cont : U32 })
                          , (GlobState1 =  { cont : U32 })
                          , Heap)
cogent_ffv48 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }
       , j :: MayNull  { cont : U32 }) = let (c' :: U8
                                             , i :: MayNull  { cont : U32 }
                                             , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                           , i :: MayNull  { cont : U32 }
                                                                           , g ::  { cont : U32 }) = let v1' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
            and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: (GlobState1 =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                          , MayNull  { cont : U32 }
                                          ,  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (U8
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , g ::  { cont : U32 }
              , j :: MayNull  { cont : U32 })
         else let (c' :: U8
                  , g ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                        , g ::  { cont : U32 }
                                                        , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
                  and j { cont = p3' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
                  and v1' = p3' :: U32
                  and v' = g :: (GlobState1 =  { cont : U32 })
                  and g { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
                  and v' = p2' :: (GlobState1 =  #{ cont : U32 })
                  and v' = v1' :: MayNull (CPtr =  { cont : U32 })
                  and (v' :: (GlobState1 =  { cont : U32 })
                      , p2' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                                  , v' :: (GlobState1 =  { cont : U32 }))
                  and g = g :: (GlobState1 =  { cont : U32 }) { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
                  and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p3' :: U32 } :: MayNull  { cont : U32 }
                  in (v' :: (GlobState1 =  { cont : U32 })
                     , g ::  { cont : U32 }
                     , j :: MayNull  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                                        ,  { cont : U32 }
                                                        , MayNull  { cont : U32 })
               in (0 :: U8
                  , g ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }) :: (U8
                                                     ,  { cont : U32 }
                                                     , MayNull  { cont : U32 })
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  ,  { cont : U32 }
                                                  , MayNull  { cont : U32 }) :: (U8
                                                                                , MayNull  { cont : U32 }
                                                                                ,  { cont : U32 }
                                                                                , MayNull  { cont : U32 }) :: (U8
                                                                                                              , MayNull  { cont : U32 }
                                                                                                              ,  { cont : U32 }
                                                                                                              , MayNull  { cont : U32 })
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (()
                         , MayNull (CPtr =  { cont : U32 })
                         , MayNull (CPtr =  { cont : U32 })
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_ffi1 : () -> U32
cogent_ffi1 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = 5 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_ffi11 : MayNull (CPtr =  { cont : U32 }) -> U32
cogent_ffi11 i :: MayNull (CPtr =  { cont : U32 }) =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = 5 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_ffi12 : MayNull (CPtr =  { cont : U32 }) -> (U32
                                                   , MayNull (CPtr =  { cont : U32 }))
cogent_ffi12 i :: MayNull (CPtr =  { cont : U32 }) =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = 5 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_ffi13 : MayNull (CPtr =  { cont : U32 }) -> U32
cogent_ffi13 i :: MayNull (CPtr =  { cont : U32 }) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                , i :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: U32
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in r' :: U32 :: U32
cogent_ffi14 : MayNull (CPtr =  { cont : U32 }) -> (U32
                                                   , MayNull (CPtr =  { cont : U32 }))
cogent_ffi14 i :: MayNull (CPtr =  { cont : U32 }) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                , i :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: U32
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_ffi15 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })) -> U32
cogent_ffi15 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , j :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                , i :: MayNull  { cont : U32 }
                                                                , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
            and j { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
            and v1' = p1' :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: MayNull (CPtr =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , j :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , j :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , j :: MayNull  { cont : U32 }
                  , r' :: U32) = let (c' :: U8
                                     , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                           , j :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
                     and v' = j :: MayNull (CPtr =  { cont : U32 })
                     and j { cont = p2' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
                     and v' = p2' :: U32
                     and v' = v1' :: U32
                     and (v' :: MayNull (CPtr =  { cont : U32 })
                         , p2' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                         , v' :: MayNull (CPtr =  { cont : U32 }))
                     and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p2' :: U32 } :: MayNull  { cont : U32 }
                     in (v' :: MayNull (CPtr =  { cont : U32 })
                        , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                           , MayNull  { cont : U32 })
                  in (0 :: U8
                     , j :: MayNull  { cont : U32 }) :: (U8
                                                        , MayNull  { cont : U32 })
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: MayNull  { cont : U32 }
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = 2 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , j :: MayNull  { cont : U32 }
                        , r' :: U32) :: (U8
                                        , MayNull  { cont : U32 }
                                        , U32) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  , U32) :: (U8
                                                            , MayNull  { cont : U32 }
                                                            , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in r' :: U32 :: U32
cogent_ffi16 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                      , MayNull (CPtr =  { cont : U32 }))
cogent_ffi16 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , j :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                , i :: MayNull  { cont : U32 }
                                                                , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
            and j { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
            and v1' = p1' :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: MayNull (CPtr =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , j :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , j :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , j :: MayNull  { cont : U32 }
                  , r' :: U32) = let (c' :: U8
                                     , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                           , j :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
                     and v' = j :: MayNull (CPtr =  { cont : U32 })
                     and j { cont = p2' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
                     and v' = p2' :: U32
                     and v' = v1' :: U32
                     and (v' :: MayNull (CPtr =  { cont : U32 })
                         , p2' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                         , v' :: MayNull (CPtr =  { cont : U32 }))
                     and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p2' :: U32 } :: MayNull  { cont : U32 }
                     in (v' :: MayNull (CPtr =  { cont : U32 })
                        , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                           , MayNull  { cont : U32 })
                  in (0 :: U8
                     , j :: MayNull  { cont : U32 }) :: (U8
                                                        , MayNull  { cont : U32 })
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: MayNull  { cont : U32 }
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = 2 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , j :: MayNull  { cont : U32 }
                        , r' :: U32) :: (U8
                                        , MayNull  { cont : U32 }
                                        , U32) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  , U32) :: (U8
                                                            , MayNull  { cont : U32 }
                                                            , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_ffi17 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                      , MayNull (CPtr =  { cont : U32 }))
cogent_ffi17 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , j :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                , i :: MayNull  { cont : U32 }
                                                                , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
            and j { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
            and v1' = p1' :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: MayNull (CPtr =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , j :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , j :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , j :: MayNull  { cont : U32 }
                  , r' :: U32) = let (c' :: U8
                                     , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                           , j :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
                     and v' = j :: MayNull (CPtr =  { cont : U32 })
                     and j { cont = p2' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
                     and v' = p2' :: U32
                     and v' = v1' :: U32
                     and (v' :: MayNull (CPtr =  { cont : U32 })
                         , p2' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                         , v' :: MayNull (CPtr =  { cont : U32 }))
                     and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p2' :: U32 } :: MayNull  { cont : U32 }
                     in (v' :: MayNull (CPtr =  { cont : U32 })
                        , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                           , MayNull  { cont : U32 })
                  in (0 :: U8
                     , j :: MayNull  { cont : U32 }) :: (U8
                                                        , MayNull  { cont : U32 })
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: MayNull  { cont : U32 }
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = 2 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , j :: MayNull  { cont : U32 }
                        , r' :: U32) :: (U8
                                        , MayNull  { cont : U32 }
                                        , U32) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  , U32) :: (U8
                                                            , MayNull  { cont : U32 }
                                                            , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , j :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_ffi18 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                      , MayNull (CPtr =  { cont : U32 })
                                                      , MayNull (CPtr =  { cont : U32 }))
cogent_ffi18 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , j :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                , i :: MayNull  { cont : U32 }
                                                                , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
            and j { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
            and v1' = p1' :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: MayNull (CPtr =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , j :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , j :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , j :: MayNull  { cont : U32 }
                  , r' :: U32) = let (c' :: U8
                                     , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                           , j :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
                     and v' = j :: MayNull (CPtr =  { cont : U32 })
                     and j { cont = p2' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
                     and v' = p2' :: U32
                     and v' = v1' :: U32
                     and (v' :: MayNull (CPtr =  { cont : U32 })
                         , p2' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                         , v' :: MayNull (CPtr =  { cont : U32 }))
                     and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p2' :: U32 } :: MayNull  { cont : U32 }
                     in (v' :: MayNull (CPtr =  { cont : U32 })
                        , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                           , MayNull  { cont : U32 })
                  in (0 :: U8
                     , j :: MayNull  { cont : U32 }) :: (U8
                                                        , MayNull  { cont : U32 })
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: MayNull  { cont : U32 }
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = 2 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , j :: MayNull  { cont : U32 }
                        , r' :: U32) :: (U8
                                        , MayNull  { cont : U32 }
                                        , U32) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  , U32) :: (U8
                                                            , MayNull  { cont : U32 }
                                                            , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 })
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_ffi21 : (GlobState1 =  { cont : U32 }) -> (U32
                                                 , (GlobState1 =  { cont : U32 }))
cogent_ffi21 g :: (GlobState1 =  { cont : U32 }) =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = 5 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in (r' :: U32
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffi22 : (GlobState2 =  { cont : U32 }) -> (U32
                                                 , (GlobState2 =  { cont : U32 }))
cogent_ffi22 g :: (GlobState2 =  { cont : U32 }) =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = 5 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in (r' :: U32
      , g :: (GlobState2 =  { cont : U32 })) :: (U32
                                                , (GlobState2 =  { cont : U32 }))
cogent_ffi23 : ((GlobState1 =  { cont : U32 })
               , (GlobState2 =  { cont : U32 })) -> (U32
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
cogent_ffi23 (g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = 5 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in (r' :: U32
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (U32
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_ffi24 : ((GlobState1 =  { cont : U32 })
               , (GlobState2 =  { cont : U32 })) -> (U32
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
cogent_ffi24 (g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = 5 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in (r' :: U32
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (U32
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_ffi25 : (GlobState1 =  { cont : U32 }) -> (U32
                                                 , (GlobState1 =  { cont : U32 }))
cogent_ffi25 g :: (GlobState1 =  { cont : U32 }) =
   let (_ :: U8
       , g ::  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , g ::  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                        , g ::  { cont : U32 }) = let v1' = 5 :: U32
            and v' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
            and v' = p0' :: (GlobState1 =  #{ cont : U32 })
            and v' = v1' :: U32
            and (v' :: (GlobState1 =  { cont : U32 })
                , p0' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                            , v' :: (GlobState1 =  { cont : U32 }))
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: (GlobState1 =  { cont : U32 })
               , g ::  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                          ,  { cont : U32 })
         in (0 :: U8
            , g ::  { cont : U32 }) :: (U8
                                       ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , g ::  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , g ::  { cont : U32 }
               , r' :: U32) :: (U8
                               ,  { cont : U32 }
                               , U32) :: (U8
                                         ,  { cont : U32 }
                                         , U32) :: (U8
                                                   ,  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffi26 : (GlobState1 =  { cont : U32 }) -> (U32
                                                 , (GlobState1 =  { cont : U32 }))
cogent_ffi26 g :: (GlobState1 =  { cont : U32 }) =
   let (_ :: U8
       , r' :: U32) = let c' = let v' = let v1' = 5 :: U32
            and v' = gencotDummy :: String -> () "Cannot access global variable: glob2" :: String :: ()
            and v' = v1' :: U32
            and (v' :: ()
                , err' :: ()) = (v' :: ()
                                , v' :: ())
            in v' :: () :: ()
         in 0 :: U8 :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in (r' :: U32
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffi27 : (GlobState1 =  { cont : U32 }) -> (U32
                                                 , (GlobState1 =  { cont : U32 }))
cogent_ffi27 g :: (GlobState1 =  { cont : U32 }) =
   let (_ :: U8
       , g ::  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , g ::  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                        , g ::  { cont : U32 }) = let v1' = 1 :: U32
            and v' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
            and v' = p0' :: (GlobState1 =  #{ cont : U32 })
            and v' = v' :: (GlobState1 =  { cont : U32 }) + v1' :: U32 :: U32
            and (v' :: (GlobState1 =  { cont : U32 })
                , p0' :: (GlobState1 =  #{ cont : U32 })) = (p0' :: (GlobState1 =  #{ cont : U32 })
                                                            , v' :: (GlobState1 =  { cont : U32 }))
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: (GlobState1 =  { cont : U32 })
               , g ::  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                          ,  { cont : U32 })
         in (0 :: U8
            , g ::  { cont : U32 }) :: (U8
                                       ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , g ::  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , g ::  { cont : U32 }
               , r' :: U32) :: (U8
                               ,  { cont : U32 }
                               , U32) :: (U8
                                         ,  { cont : U32 }
                                         , U32) :: (U8
                                                   ,  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffi28 : ((GlobState1 =  { cont : U32 })
               , (GlobState2 =  { cont : U32 })) -> (U32
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
cogent_ffi28 (g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) =
   let (_ :: U8
       , g1 ::  { cont : U32 }
       , g2 ::  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , g1 ::  { cont : U32 }
                          , g2 ::  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                         , g1 ::  { cont : U32 }
                                                         , g2 ::  { cont : U32 }) = let v1' = g2 :: (GlobState2 =  { cont : U32 })
            and g2 { cont = p1' :: (GlobState2 =  #{ cont : U32 }) } = v1' :: (GlobState2 =  { cont : U32 })
            and v1' = p1' :: (GlobState2 =  #{ cont : U32 })
            and v' = g1 :: (GlobState1 =  { cont : U32 })
            and g1 { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
            and v' = p0' :: (GlobState1 =  #{ cont : U32 })
            and v' = v1' :: (GlobState2 =  { cont : U32 })
            and (v' :: (GlobState1 =  { cont : U32 })
                , p0' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                            , v' :: (GlobState1 =  { cont : U32 }))
            and g1 = g1 :: (GlobState1 =  { cont : U32 }) { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            and g2 = g2 :: (GlobState2 =  { cont : U32 }) { cont = p1' :: (GlobState2 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: (GlobState1 =  { cont : U32 })
               , g1 ::  { cont : U32 }
               , g2 ::  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                           ,  { cont : U32 }
                                           ,  { cont : U32 })
         in (0 :: U8
            , g1 ::  { cont : U32 }
            , g2 ::  { cont : U32 }) :: (U8
                                        ,  { cont : U32 }
                                        ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , g1 ::  { cont : U32 }
              , g2 ::  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , g1 ::  { cont : U32 }
               , g2 ::  { cont : U32 }
               , r' :: U32) :: (U8
                               ,  { cont : U32 }
                               ,  { cont : U32 }
                               , U32) :: (U8
                                         ,  { cont : U32 }
                                         ,  { cont : U32 }
                                         , U32) :: (U8
                                                   ,  { cont : U32 }
                                                   ,  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (U32
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_ffi31 : (MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })) -> (U32
                                                    , (GlobState1 =  { cont : U32 }))
cogent_ffi31 (i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , g ::  { cont : U32 }
       , i :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , g ::  { cont : U32 }
                          , i :: MayNull  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                                , g ::  { cont : U32 }
                                                                , i :: MayNull  { cont : U32 }) = let v1' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
            and v1' = p1' :: U32
            and v' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
            and v' = p0' :: (GlobState1 =  #{ cont : U32 })
            and v' = v1' :: MayNull (CPtr =  { cont : U32 })
            and (v' :: (GlobState1 =  { cont : U32 })
                , p0' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                            , v' :: (GlobState1 =  { cont : U32 }))
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: (GlobState1 =  { cont : U32 })
               , g ::  { cont : U32 }
               , i :: MayNull  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                                  ,  { cont : U32 }
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , g ::  { cont : U32 }
            , i :: MayNull  { cont : U32 }) :: (U8
                                               ,  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , g ::  { cont : U32 }
              , i :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , g ::  { cont : U32 }
               , i :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               ,  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         ,  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   ,  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffi32 : (MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })) -> (U32
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 }))
cogent_ffi32 (i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                        , i :: MayNull  { cont : U32 }
                                                        , g ::  { cont : U32 }) = let v1' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
            and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: (GlobState1 =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                          , MayNull  { cont : U32 }
                                          ,  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (U8
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , g ::  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               ,  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         ,  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   ,  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffi33 : (MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })) -> (U32
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 }))
cogent_ffi33 (i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                        , i :: MayNull  { cont : U32 }
                                                        , g ::  { cont : U32 }) = let v2' = 1 :: U32
            and v1' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
            and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
            and v1' = v1' :: (GlobState1 =  { cont : U32 }) + v2' :: U32 :: U32
            and (v1' :: (GlobState1 =  { cont : U32 })
                , p1' :: (GlobState1 =  #{ cont : U32 })) = (p1' :: (GlobState1 =  #{ cont : U32 })
                                                            , v1' :: (GlobState1 =  { cont : U32 }))
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: (GlobState1 =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                          , MayNull  { cont : U32 }
                                          ,  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (U8
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , g ::  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               ,  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         ,  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   ,  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffi34 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })) -> (U32
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 }))
cogent_ffi34 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }
       , j :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                        , i :: MayNull  { cont : U32 }
                                                        , g ::  { cont : U32 }) = let v1' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
            and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: (GlobState1 =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                          , MayNull  { cont : U32 }
                                          ,  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (U8
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , g ::  { cont : U32 }
              , j :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , g ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }
                  , r' :: U32) = let (c' :: U8
                                     , g ::  { cont : U32 }
                                     , j :: MayNull  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                                           , g ::  { cont : U32 }
                                                                           , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
                     and j { cont = p3' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
                     and v1' = p3' :: U32
                     and v' = g :: (GlobState1 =  { cont : U32 })
                     and g { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
                     and v' = p2' :: (GlobState1 =  #{ cont : U32 })
                     and v' = v1' :: MayNull (CPtr =  { cont : U32 })
                     and (v' :: (GlobState1 =  { cont : U32 })
                         , p2' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                                     , v' :: (GlobState1 =  { cont : U32 }))
                     and g = g :: (GlobState1 =  { cont : U32 }) { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
                     and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p3' :: U32 } :: MayNull  { cont : U32 }
                     in (v' :: (GlobState1 =  { cont : U32 })
                        , g ::  { cont : U32 }
                        , j :: MayNull  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                                           ,  { cont : U32 }
                                                           , MayNull  { cont : U32 })
                  in (0 :: U8
                     , g ::  { cont : U32 }
                     , j :: MayNull  { cont : U32 }) :: (U8
                                                        ,  { cont : U32 }
                                                        , MayNull  { cont : U32 })
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , g ::  { cont : U32 }
                       , j :: MayNull  { cont : U32 }
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = 2 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , g ::  { cont : U32 }
                        , j :: MayNull  { cont : U32 }
                        , r' :: U32) :: (U8
                                        ,  { cont : U32 }
                                        , MayNull  { cont : U32 }
                                        , U32) :: (U8
                                                  ,  { cont : U32 }
                                                  , MayNull  { cont : U32 }
                                                  , U32) :: (U8
                                                            ,  { cont : U32 }
                                                            , MayNull  { cont : U32 }
                                                            , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }
               , j :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               ,  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         ,  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   ,  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffi35 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })) -> (U32
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 }))
cogent_ffi35 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }
       , j :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                        , i :: MayNull  { cont : U32 }
                                                        , g ::  { cont : U32 }) = let v1' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
            and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: (GlobState1 =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                          , MayNull  { cont : U32 }
                                          ,  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (U8
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , g ::  { cont : U32 }
              , j :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , g ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }
                  , r' :: U32) = let (c' :: U8
                                     , g ::  { cont : U32 }
                                     , j :: MayNull  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                                           , g ::  { cont : U32 }
                                                                           , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
                     and j { cont = p3' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
                     and v1' = p3' :: U32
                     and v' = g :: (GlobState1 =  { cont : U32 })
                     and g { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
                     and v' = p2' :: (GlobState1 =  #{ cont : U32 })
                     and v' = v1' :: MayNull (CPtr =  { cont : U32 })
                     and (v' :: (GlobState1 =  { cont : U32 })
                         , p2' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                                     , v' :: (GlobState1 =  { cont : U32 }))
                     and g = g :: (GlobState1 =  { cont : U32 }) { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
                     and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p3' :: U32 } :: MayNull  { cont : U32 }
                     in (v' :: (GlobState1 =  { cont : U32 })
                        , g ::  { cont : U32 }
                        , j :: MayNull  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                                           ,  { cont : U32 }
                                                           , MayNull  { cont : U32 })
                  in (0 :: U8
                     , g ::  { cont : U32 }
                     , j :: MayNull  { cont : U32 }) :: (U8
                                                        ,  { cont : U32 }
                                                        , MayNull  { cont : U32 })
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , g ::  { cont : U32 }
                       , j :: MayNull  { cont : U32 }
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = 2 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , g ::  { cont : U32 }
                        , j :: MayNull  { cont : U32 }
                        , r' :: U32) :: (U8
                                        ,  { cont : U32 }
                                        , MayNull  { cont : U32 }
                                        , U32) :: (U8
                                                  ,  { cont : U32 }
                                                  , MayNull  { cont : U32 }
                                                  , U32) :: (U8
                                                            ,  { cont : U32 }
                                                            , MayNull  { cont : U32 }
                                                            , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }
               , j :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               ,  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         ,  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   ,  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , MayNull (CPtr =  { cont : U32 })
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_ffi36 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })
               , (GlobState2 =  { cont : U32 })) -> (U32
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
cogent_ffi36 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g2 ::  { cont : U32 }
       , g1 ::  { cont : U32 }
       , j :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , g2 ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                         , i :: MayNull  { cont : U32 }
                                                         , g2 ::  { cont : U32 }) = let v1' = g2 :: (GlobState2 =  { cont : U32 })
            and g2 { cont = p1' :: (GlobState2 =  #{ cont : U32 }) } = v1' :: (GlobState2 =  { cont : U32 })
            and v1' = p1' :: (GlobState2 =  #{ cont : U32 })
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: (GlobState2 =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and g2 = g2 :: (GlobState2 =  { cont : U32 }) { cont = p1' :: (GlobState2 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , g2 ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                           , MayNull  { cont : U32 }
                                           ,  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , g2 ::  { cont : U32 }) :: (U8
                                        , MayNull  { cont : U32 }
                                        ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , g2 ::  { cont : U32 }
              , g1 ::  { cont : U32 }
              , j :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , g1 ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }
                  , r' :: U32) = let (c' :: U8
                                     , g1 ::  { cont : U32 }
                                     , j :: MayNull  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                                           , g1 ::  { cont : U32 }
                                                                           , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
                     and j { cont = p3' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
                     and v1' = p3' :: U32
                     and v' = g1 :: (GlobState1 =  { cont : U32 })
                     and g1 { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
                     and v' = p2' :: (GlobState1 =  #{ cont : U32 })
                     and v' = v1' :: MayNull (CPtr =  { cont : U32 })
                     and (v' :: (GlobState1 =  { cont : U32 })
                         , p2' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                                     , v' :: (GlobState1 =  { cont : U32 }))
                     and g1 = g1 :: (GlobState1 =  { cont : U32 }) { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
                     and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p3' :: U32 } :: MayNull  { cont : U32 }
                     in (v' :: (GlobState1 =  { cont : U32 })
                        , g1 ::  { cont : U32 }
                        , j :: MayNull  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                                           ,  { cont : U32 }
                                                           , MayNull  { cont : U32 })
                  in (0 :: U8
                     , g1 ::  { cont : U32 }
                     , j :: MayNull  { cont : U32 }) :: (U8
                                                        ,  { cont : U32 }
                                                        , MayNull  { cont : U32 })
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , g1 ::  { cont : U32 }
                       , j :: MayNull  { cont : U32 }
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = 2 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , g1 ::  { cont : U32 }
                        , j :: MayNull  { cont : U32 }
                        , r' :: U32) :: (U8
                                        ,  { cont : U32 }
                                        , MayNull  { cont : U32 }
                                        , U32) :: (U8
                                                  ,  { cont : U32 }
                                                  , MayNull  { cont : U32 }
                                                  , U32) :: (U8
                                                            ,  { cont : U32 }
                                                            , MayNull  { cont : U32 }
                                                            , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , g2 ::  { cont : U32 }
               , g1 ::  { cont : U32 }
               , j :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               ,  { cont : U32 }
                               ,  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         ,  { cont : U32 }
                                         ,  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   ,  { cont : U32 }
                                                   ,  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (U32
                                                 , MayNull (CPtr =  { cont : U32 })
                                                 , MayNull (CPtr =  { cont : U32 })
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_ffi41 : Heap -> (U32
                       , Heap)
cogent_ffi41 heap :: Heap =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = 5 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in (r' :: U32
      , heap :: Heap) :: (U32, Heap)
cogent_ffi42 : ((GlobState1 =  { cont : U32 })
               , Heap) -> (U32
                          , (GlobState1 =  { cont : U32 })
                          , Heap)
cogent_ffi42 (g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = 5 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in (r' :: U32
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_ffi43 : (MayNull (CPtr =  { cont : U32 })
               , Heap) -> (U32, Heap)
cogent_ffi43 (i :: MayNull (CPtr =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                , i :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: U32
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , heap :: Heap) :: (U32, Heap)
cogent_ffi44 : (MayNull (CPtr =  { cont : U32 })
               , Heap) -> (U32
                          , MayNull (CPtr =  { cont : U32 })
                          , Heap)
cogent_ffi44 (i :: MayNull (CPtr =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                , i :: MayNull  { cont : U32 }) = let v1' = 5 :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: U32
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , MayNull (CPtr =  { cont : U32 })
                         , Heap)
cogent_ffi45 : (MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })
               , Heap) -> (U32
                          , (GlobState1 =  { cont : U32 })
                          , Heap)
cogent_ffi45 (i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , g ::  { cont : U32 }
       , i :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , g ::  { cont : U32 }
                          , i :: MayNull  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                                , g ::  { cont : U32 }
                                                                , i :: MayNull  { cont : U32 }) = let v1' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
            and v1' = p1' :: U32
            and v' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
            and v' = p0' :: (GlobState1 =  #{ cont : U32 })
            and v' = v1' :: MayNull (CPtr =  { cont : U32 })
            and (v' :: (GlobState1 =  { cont : U32 })
                , p0' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                            , v' :: (GlobState1 =  { cont : U32 }))
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p0' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: (GlobState1 =  { cont : U32 })
               , g ::  { cont : U32 }
               , i :: MayNull  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                                  ,  { cont : U32 }
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , g ::  { cont : U32 }
            , i :: MayNull  { cont : U32 }) :: (U8
                                               ,  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , g ::  { cont : U32 }
              , i :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , g ::  { cont : U32 }
               , i :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               ,  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         ,  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   ,  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_ffi46 : (MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })
               , Heap) -> (U32
                          , MayNull (CPtr =  { cont : U32 })
                          , (GlobState1 =  { cont : U32 })
                          , Heap)
cogent_ffi46 (i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                        , i :: MayNull  { cont : U32 }
                                                        , g ::  { cont : U32 }) = let v1' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
            and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: (GlobState1 =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                          , MayNull  { cont : U32 }
                                          ,  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (U8
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , g ::  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               ,  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         ,  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   ,  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , MayNull (CPtr =  { cont : U32 })
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_ffi47 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })
               , Heap) -> (U32
                          , MayNull (CPtr =  { cont : U32 })
                          , MayNull (CPtr =  { cont : U32 })
                          , Heap)
cogent_ffi47 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , j :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                , i :: MayNull  { cont : U32 }) = let v1' = gencotDummy :: String -> () "Cannot access global variable: glob1" :: String :: ()
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: ()
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , j :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , j :: MayNull  { cont : U32 }
                  , r' :: U32) = let (c' :: U8
                                     , j :: MayNull  { cont : U32 }) = let (v' :: ()
                                                                           , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
                     and j { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
                     and v1' = p1' :: U32
                     and v' = gencotDummy :: String -> () "Cannot access global variable: glob1" :: String :: ()
                     and v' = v1' :: MayNull (CPtr =  { cont : U32 })
                     and (v' :: ()
                         , err' :: ()) = (v' :: ()
                                         , v' :: ())
                     and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
                     in (v' :: ()
                        , j :: MayNull  { cont : U32 }) :: (()
                                                           , MayNull  { cont : U32 })
                  in (0 :: U8
                     , j :: MayNull  { cont : U32 }) :: (U8
                                                        , MayNull  { cont : U32 })
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: MayNull  { cont : U32 }
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = 2 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , j :: MayNull  { cont : U32 }
                        , r' :: U32) :: (U8
                                        , MayNull  { cont : U32 }
                                        , U32) :: (U8
                                                  , MayNull  { cont : U32 }
                                                  , U32) :: (U8
                                                            , MayNull  { cont : U32 }
                                                            , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , MayNull (CPtr =  { cont : U32 })
                         , MayNull (CPtr =  { cont : U32 })
                         , Heap)
cogent_ffi48 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })
               , Heap) -> (U32
                          , MayNull (CPtr =  { cont : U32 })
                          , MayNull (CPtr =  { cont : U32 })
                          , (GlobState1 =  { cont : U32 })
                          , Heap)
cogent_ffi48 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , g ::  { cont : U32 }
       , j :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , g ::  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                        , i :: MayNull  { cont : U32 }
                                                        , g ::  { cont : U32 }) = let v1' = g :: (GlobState1 =  { cont : U32 })
            and g { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } = v1' :: (GlobState1 =  { cont : U32 })
            and v1' = p1' :: (GlobState1 =  #{ cont : U32 })
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: (GlobState1 =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and g = g :: (GlobState1 =  { cont : U32 }) { cont = p1' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                          , MayNull  { cont : U32 }
                                          ,  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , g ::  { cont : U32 }) :: (U8
                                       , MayNull  { cont : U32 }
                                       ,  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , g ::  { cont : U32 }
              , j :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , g ::  { cont : U32 }
                  , j :: MayNull  { cont : U32 }
                  , r' :: U32) = let (c' :: U8
                                     , g ::  { cont : U32 }
                                     , j :: MayNull  { cont : U32 }) = let (v' :: (GlobState1 =  { cont : U32 })
                                                                           , g ::  { cont : U32 }
                                                                           , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
                     and j { cont = p3' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
                     and v1' = p3' :: U32
                     and v' = g :: (GlobState1 =  { cont : U32 })
                     and g { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } = v' :: (GlobState1 =  { cont : U32 })
                     and v' = p2' :: (GlobState1 =  #{ cont : U32 })
                     and v' = v1' :: MayNull (CPtr =  { cont : U32 })
                     and (v' :: (GlobState1 =  { cont : U32 })
                         , p2' :: (GlobState1 =  #{ cont : U32 })) = (v' :: (GlobState1 =  { cont : U32 })
                                                                     , v' :: (GlobState1 =  { cont : U32 }))
                     and g = g :: (GlobState1 =  { cont : U32 }) { cont = p2' :: (GlobState1 =  #{ cont : U32 }) } ::  { cont : U32 }
                     and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p3' :: U32 } :: MayNull  { cont : U32 }
                     in (v' :: (GlobState1 =  { cont : U32 })
                        , g ::  { cont : U32 }
                        , j :: MayNull  { cont : U32 }) :: ((GlobState1 =  { cont : U32 })
                                                           ,  { cont : U32 }
                                                           , MayNull  { cont : U32 })
                  in (0 :: U8
                     , g ::  { cont : U32 }
                     , j :: MayNull  { cont : U32 }) :: (U8
                                                        ,  { cont : U32 }
                                                        , MayNull  { cont : U32 })
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , g ::  { cont : U32 }
                       , j :: MayNull  { cont : U32 }
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = 2 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , g ::  { cont : U32 }
                        , j :: MayNull  { cont : U32 }
                        , r' :: U32) :: (U8
                                        ,  { cont : U32 }
                                        , MayNull  { cont : U32 }
                                        , U32) :: (U8
                                                  ,  { cont : U32 }
                                                  , MayNull  { cont : U32 }
                                                  , U32) :: (U8
                                                            ,  { cont : U32 }
                                                            , MayNull  { cont : U32 }
                                                            , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , g ::  { cont : U32 }
               , j :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               ,  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         ,  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   ,  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , MayNull (CPtr =  { cont : U32 })
                         , MayNull (CPtr =  { cont : U32 })
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_ffi49 : (MayNull (CPtr =  { cont : U32 })
               , MayNull (CPtr =  { cont : U32 })
               , (GlobState1 =  { cont : U32 })
               , Heap) -> (U32
                          , MayNull (CPtr =  { cont : U32 })
                          , MayNull (CPtr =  { cont : U32 })
                          , (GlobState1 =  { cont : U32 })
                          , Heap)
cogent_ffi49 (i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull  { cont : U32 }
       , j :: MayNull  { cont : U32 }
       , r' :: U32) = let (c' :: U8
                          , i :: MayNull  { cont : U32 }
                          , j :: MayNull  { cont : U32 }) = let (v' :: MayNull (CPtr =  { cont : U32 })
                                                                , i :: MayNull  { cont : U32 }
                                                                , j :: MayNull  { cont : U32 }) = let v1' = j :: MayNull (CPtr =  { cont : U32 })
            and j { cont = p1' :: U32 } = v1' :: MayNull (CPtr =  { cont : U32 })
            and v1' = p1' :: U32
            and v' = i :: MayNull (CPtr =  { cont : U32 })
            and i { cont = p0' :: U32 } = v' :: MayNull (CPtr =  { cont : U32 })
            and v' = p0' :: U32
            and v' = v1' :: MayNull (CPtr =  { cont : U32 })
            and (v' :: MayNull (CPtr =  { cont : U32 })
                , p0' :: U32) = (v' :: MayNull (CPtr =  { cont : U32 })
                                , v' :: MayNull (CPtr =  { cont : U32 }))
            and i = i :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull  { cont : U32 }
            and j = j :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull  { cont : U32 }
            in (v' :: MayNull (CPtr =  { cont : U32 })
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }) :: (MayNull (CPtr =  { cont : U32 })
                                                  , MayNull  { cont : U32 }
                                                  , MayNull  { cont : U32 })
         in (0 :: U8
            , i :: MayNull  { cont : U32 }
            , j :: MayNull  { cont : U32 }) :: (U8
                                               , MayNull  { cont : U32 }
                                               , MayNull  { cont : U32 })
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: MayNull  { cont : U32 }
              , j :: MayNull  { cont : U32 }
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = 2 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: MayNull  { cont : U32 }
               , j :: MayNull  { cont : U32 }
               , r' :: U32) :: (U8
                               , MayNull  { cont : U32 }
                               , MayNull  { cont : U32 }
                               , U32) :: (U8
                                         , MayNull  { cont : U32 }
                                         , MayNull  { cont : U32 }
                                         , U32) :: (U8
                                                   , MayNull  { cont : U32 }
                                                   , MayNull  { cont : U32 }
                                                   , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , MayNull (CPtr =  { cont : U32 })
                         , MayNull (CPtr =  { cont : U32 })
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_cffv1 : () -> ()
cogent_cffv1 () :: () =
   let _ = let v' = let v' = cogent_ffv1 :: () -> ()
         and v' = v' :: () -> () () :: ()
         in v' :: () :: ()
      in 0 :: U8 :: U8
   in () :: () :: ()
cogent_cffv11 : MayNull (CPtr =  { cont : U32 }) -> (()
                                                    , MayNull (CPtr =  { cont : U32 }))
cogent_cffv11 i :: MayNull (CPtr =  { cont : U32 }) =
   let _ = let v' = let v' = cogent_ffv11 :: MayNull (CPtr =  { cont : U32 }) -> ()
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v' = v' :: MayNull (CPtr =  { cont : U32 }) -> () v1' :: MayNull (CPtr =  { cont : U32 }) :: ()
         in v' :: () :: ()
      in 0 :: U8 :: U8
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffv12 : MayNull (CPtr =  { cont : U32 }) -> (()
                                                    , MayNull (CPtr =  { cont : U32 }))
cogent_cffv12 i :: MayNull (CPtr =  { cont : U32 }) =
   let (_ :: U8
       , i :: MayNull (CPtr =  { cont : U32 })) = let (v' :: ()
                                                      , i :: MayNull (CPtr =  { cont : U32 })) = let v' = cogent_ffv12 :: MayNull (CPtr =  { cont : U32 }) -> (()
                                                                                                                                                              , MayNull (CPtr =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and (v' :: ()
             , i :: MayNull (CPtr =  { cont : U32 })) = v' :: MayNull (CPtr =  { cont : U32 }) -> (()
                                                                                                  , MayNull (CPtr =  { cont : U32 })) v1' :: MayNull (CPtr =  { cont : U32 }) :: (()
                                                                                                                                                                                 , MayNull (CPtr =  { cont : U32 }))
         in (v' :: ()
            , i :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                        , MayNull (CPtr =  { cont : U32 }))
      in (0 :: U8
         , i :: MayNull (CPtr =  { cont : U32 })) :: (U8
                                                     , MayNull (CPtr =  { cont : U32 }))
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffv15 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })) -> (()
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , MayNull (CPtr =  { cont : U32 }))
cogent_cffv15 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })) =
   let _ = let v' = let v' = cogent_ffv15 :: (MayNull (CPtr =  { cont : U32 })
                                             , MayNull (CPtr =  { cont : U32 })) -> ()
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v' = v' :: (MayNull (CPtr =  { cont : U32 })
                        , MayNull (CPtr =  { cont : U32 })) -> () (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                  , v2' :: MayNull (CPtr =  { cont : U32 })) :: ()
         in v' :: () :: ()
      in 0 :: U8 :: U8
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                  , MayNull (CPtr =  { cont : U32 })
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffv16 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })) -> (()
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , MayNull (CPtr =  { cont : U32 }))
cogent_cffv16 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull (CPtr =  { cont : U32 })) = let (v' :: ()
                                                      , i :: MayNull (CPtr =  { cont : U32 })) = let v' = cogent_ffv16 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                          , MayNull (CPtr =  { cont : U32 })) -> (()
                                                                                                                                                                 , MayNull (CPtr =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and (v' :: ()
             , i :: MayNull (CPtr =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                              , MayNull (CPtr =  { cont : U32 })) -> (()
                                                                                                     , MayNull (CPtr =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                         , v2' :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                                                                                                                                                       , MayNull (CPtr =  { cont : U32 }))
         in (v' :: ()
            , i :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                        , MayNull (CPtr =  { cont : U32 }))
      in (0 :: U8
         , i :: MayNull (CPtr =  { cont : U32 })) :: (U8
                                                     , MayNull (CPtr =  { cont : U32 }))
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                  , MayNull (CPtr =  { cont : U32 })
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffv17 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })) -> (()
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , MayNull (CPtr =  { cont : U32 }))
cogent_cffv17 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , j :: MayNull (CPtr =  { cont : U32 })) = let (v' :: ()
                                                      , j :: MayNull (CPtr =  { cont : U32 })) = let v' = cogent_ffv17 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                          , MayNull (CPtr =  { cont : U32 })) -> (()
                                                                                                                                                                 , MayNull (CPtr =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and (v' :: ()
             , j :: MayNull (CPtr =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                              , MayNull (CPtr =  { cont : U32 })) -> (()
                                                                                                     , MayNull (CPtr =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                         , v2' :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                                                                                                                                                       , MayNull (CPtr =  { cont : U32 }))
         in (v' :: ()
            , j :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                        , MayNull (CPtr =  { cont : U32 }))
      in (0 :: U8
         , j :: MayNull (CPtr =  { cont : U32 })) :: (U8
                                                     , MayNull (CPtr =  { cont : U32 }))
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                  , MayNull (CPtr =  { cont : U32 })
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffv18 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })) -> (()
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , MayNull (CPtr =  { cont : U32 }))
cogent_cffv18 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull (CPtr =  { cont : U32 })
       , j :: MayNull (CPtr =  { cont : U32 })) = let (v' :: ()
                                                      , i :: MayNull (CPtr =  { cont : U32 })
                                                      , j :: MayNull (CPtr =  { cont : U32 })) = let v' = cogent_ffv18 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                          , MayNull (CPtr =  { cont : U32 })) -> (()
                                                                                                                                                                 , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                 , MayNull (CPtr =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and (v' :: ()
             , i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                              , MayNull (CPtr =  { cont : U32 })) -> (()
                                                                                                     , MayNull (CPtr =  { cont : U32 })
                                                                                                     , MayNull (CPtr =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                         , v2' :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                                                                                                                                                       , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                                       , MayNull (CPtr =  { cont : U32 }))
         in (v' :: ()
            , i :: MayNull (CPtr =  { cont : U32 })
            , j :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                        , MayNull (CPtr =  { cont : U32 })
                                                        , MayNull (CPtr =  { cont : U32 }))
      in (0 :: U8
         , i :: MayNull (CPtr =  { cont : U32 })
         , j :: MayNull (CPtr =  { cont : U32 })) :: (U8
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , MayNull (CPtr =  { cont : U32 }))
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })) :: (()
                                                  , MayNull (CPtr =  { cont : U32 })
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffv21 : (GlobState1 =  { cont : U32 }) -> (()
                                                  , (GlobState1 =  { cont : U32 }))
cogent_cffv21 g :: (GlobState1 =  { cont : U32 }) =
   let (_ :: U8
       , g :: (GlobState1 =  { cont : U32 })) = let (v' :: ()
                                                    , g :: (GlobState1 =  { cont : U32 })) = let v' = cogent_ffv21 :: (GlobState1 =  { cont : U32 }) -> (()
                                                                                                                                                        , (GlobState1 =  { cont : U32 }))
         and v1' = g :: (GlobState1 =  { cont : U32 })
         and (v' :: ()
             , g :: (GlobState1 =  { cont : U32 })) = v' :: (GlobState1 =  { cont : U32 }) -> (()
                                                                                              , (GlobState1 =  { cont : U32 })) v1' :: (GlobState1 =  { cont : U32 }) :: (()
                                                                                                                                                                         , (GlobState1 =  { cont : U32 }))
         in (v' :: ()
            , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                      , (GlobState1 =  { cont : U32 }))
      in (0 :: U8
         , g :: (GlobState1 =  { cont : U32 })) :: (U8
                                                   , (GlobState1 =  { cont : U32 }))
   in (() :: ()
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , (GlobState1 =  { cont : U32 }))
cogent_cffv22 : (GlobState1 =  { cont : U32 }) -> (()
                                                  , (GlobState1 =  { cont : U32 }))
cogent_cffv22 g :: (GlobState1 =  { cont : U32 }) =
   let _ = let v' = let v' = cogent_ffv22 :: (GlobState2 =  { cont : U32 }) -> (()
                                                                               , (GlobState2 =  { cont : U32 }))
         and v1' = gencotDummy :: String -> () "no context parameter for property gs2" :: String :: ()
         and (v' :: ()
             , err' :: ()) = v' :: (GlobState2 =  { cont : U32 }) -> (()
                                                                     , (GlobState2 =  { cont : U32 })) v1' :: () :: (()
                                                                                                                    , (GlobState2 =  { cont : U32 }))
         in v' :: () :: ()
      in 0 :: U8 :: U8
   in (() :: ()
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , (GlobState1 =  { cont : U32 }))
cogent_cffv23 : ((GlobState1 =  { cont : U32 })
                , (GlobState2 =  { cont : U32 })) -> (()
                                                     , (GlobState1 =  { cont : U32 })
                                                     , (GlobState2 =  { cont : U32 }))
cogent_cffv23 (g1 :: (GlobState1 =  { cont : U32 })
              , g2 :: (GlobState2 =  { cont : U32 })) =
   let (_ :: U8
       , g1 :: (GlobState1 =  { cont : U32 })
       , g2 :: (GlobState2 =  { cont : U32 })) = let (v' :: ()
                                                     , g1 :: (GlobState1 =  { cont : U32 })
                                                     , g2 :: (GlobState2 =  { cont : U32 })) = let v' = cogent_ffv23 :: ((GlobState1 =  { cont : U32 })
                                                                                                                        , (GlobState2 =  { cont : U32 })) -> (()
                                                                                                                                                             , (GlobState1 =  { cont : U32 })
                                                                                                                                                             , (GlobState2 =  { cont : U32 }))
         and v1' = g1 :: (GlobState1 =  { cont : U32 })
         and v2' = g2 :: (GlobState2 =  { cont : U32 })
         and (v' :: ()
             , g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) = v' :: ((GlobState1 =  { cont : U32 })
                                                             , (GlobState2 =  { cont : U32 })) -> (()
                                                                                                  , (GlobState1 =  { cont : U32 })
                                                                                                  , (GlobState2 =  { cont : U32 })) (v1' :: (GlobState1 =  { cont : U32 })
                                                                                                                                    , v2' :: (GlobState2 =  { cont : U32 })) :: (()
                                                                                                                                                                                , (GlobState1 =  { cont : U32 })
                                                                                                                                                                                , (GlobState2 =  { cont : U32 }))
         in (v' :: ()
            , g1 :: (GlobState1 =  { cont : U32 })
            , g2 :: (GlobState2 =  { cont : U32 })) :: (()
                                                       , (GlobState1 =  { cont : U32 })
                                                       , (GlobState2 =  { cont : U32 }))
      in (0 :: U8
         , g1 :: (GlobState1 =  { cont : U32 })
         , g2 :: (GlobState2 =  { cont : U32 })) :: (U8
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
   in (() :: ()
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (()
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_cffv31 : (MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })) -> (()
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , (GlobState1 =  { cont : U32 }))
cogent_cffv31 (i :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , g :: (GlobState1 =  { cont : U32 })) = let (v' :: ()
                                                    , g :: (GlobState1 =  { cont : U32 })) = let v' = cogent_ffv31 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                      , (GlobState1 =  { cont : U32 })) -> (()
                                                                                                                                                           , (GlobState1 =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = g :: (GlobState1 =  { cont : U32 })
         and (v' :: ()
             , g :: (GlobState1 =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                            , (GlobState1 =  { cont : U32 })) -> (()
                                                                                                 , (GlobState1 =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v2' :: (GlobState1 =  { cont : U32 })) :: (()
                                                                                                                                                                               , (GlobState1 =  { cont : U32 }))
         in (v' :: ()
            , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                      , (GlobState1 =  { cont : U32 }))
      in (0 :: U8
         , g :: (GlobState1 =  { cont : U32 })) :: (U8
                                                   , (GlobState1 =  { cont : U32 }))
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_cffv32 : (MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })) -> (()
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , (GlobState1 =  { cont : U32 }))
cogent_cffv32 (i :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull (CPtr =  { cont : U32 })
       , g :: (GlobState1 =  { cont : U32 })) = let (v' :: ()
                                                    , i :: MayNull (CPtr =  { cont : U32 })
                                                    , g :: (GlobState1 =  { cont : U32 })) = let v' = cogent_ffv32 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                      , (GlobState1 =  { cont : U32 })) -> (()
                                                                                                                                                           , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                           , (GlobState1 =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = g :: (GlobState1 =  { cont : U32 })
         and (v' :: ()
             , i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                            , (GlobState1 =  { cont : U32 })) -> (()
                                                                                                 , MayNull (CPtr =  { cont : U32 })
                                                                                                 , (GlobState1 =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v2' :: (GlobState1 =  { cont : U32 })) :: (()
                                                                                                                                                                               , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                               , (GlobState1 =  { cont : U32 }))
         in (v' :: ()
            , i :: MayNull (CPtr =  { cont : U32 })
            , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                      , MayNull (CPtr =  { cont : U32 })
                                                      , (GlobState1 =  { cont : U32 }))
      in (0 :: U8
         , i :: MayNull (CPtr =  { cont : U32 })
         , g :: (GlobState1 =  { cont : U32 })) :: (U8
                                                   , MayNull (CPtr =  { cont : U32 })
                                                   , (GlobState1 =  { cont : U32 }))
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_cffv34 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })) -> (()
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , (GlobState1 =  { cont : U32 }))
cogent_cffv34 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull (CPtr =  { cont : U32 })
       , g :: (GlobState1 =  { cont : U32 })) = let (v' :: ()
                                                    , i :: MayNull (CPtr =  { cont : U32 })
                                                    , g :: (GlobState1 =  { cont : U32 })) = let v' = cogent_ffv34 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                      , MayNull (CPtr =  { cont : U32 })
                                                                                                                      , (GlobState1 =  { cont : U32 })) -> (()
                                                                                                                                                           , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                           , (GlobState1 =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v3' = g :: (GlobState1 =  { cont : U32 })
         and (v' :: ()
             , i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                            , MayNull (CPtr =  { cont : U32 })
                                                            , (GlobState1 =  { cont : U32 })) -> (()
                                                                                                 , MayNull (CPtr =  { cont : U32 })
                                                                                                 , (GlobState1 =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v2' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v3' :: (GlobState1 =  { cont : U32 })) :: (()
                                                                                                                                                                               , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                               , (GlobState1 =  { cont : U32 }))
         in (v' :: ()
            , i :: MayNull (CPtr =  { cont : U32 })
            , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                      , MayNull (CPtr =  { cont : U32 })
                                                      , (GlobState1 =  { cont : U32 }))
      in (0 :: U8
         , i :: MayNull (CPtr =  { cont : U32 })
         , g :: (GlobState1 =  { cont : U32 })) :: (U8
                                                   , MayNull (CPtr =  { cont : U32 })
                                                   , (GlobState1 =  { cont : U32 }))
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_cffv35 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })) -> (()
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , (GlobState1 =  { cont : U32 }))
cogent_cffv35 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull (CPtr =  { cont : U32 })
       , j :: MayNull (CPtr =  { cont : U32 })
       , g :: (GlobState1 =  { cont : U32 })) = let (v' :: ()
                                                    , i :: MayNull (CPtr =  { cont : U32 })
                                                    , j :: MayNull (CPtr =  { cont : U32 })
                                                    , g :: (GlobState1 =  { cont : U32 })) = let v' = cogent_ffv35 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                      , MayNull (CPtr =  { cont : U32 })
                                                                                                                      , (GlobState1 =  { cont : U32 })) -> (()
                                                                                                                                                           , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                           , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                           , (GlobState1 =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v3' = g :: (GlobState1 =  { cont : U32 })
         and (v' :: ()
             , i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                            , MayNull (CPtr =  { cont : U32 })
                                                            , (GlobState1 =  { cont : U32 })) -> (()
                                                                                                 , MayNull (CPtr =  { cont : U32 })
                                                                                                 , MayNull (CPtr =  { cont : U32 })
                                                                                                 , (GlobState1 =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v2' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v3' :: (GlobState1 =  { cont : U32 })) :: (()
                                                                                                                                                                               , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                               , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                               , (GlobState1 =  { cont : U32 }))
         in (v' :: ()
            , i :: MayNull (CPtr =  { cont : U32 })
            , j :: MayNull (CPtr =  { cont : U32 })
            , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                      , MayNull (CPtr =  { cont : U32 })
                                                      , MayNull (CPtr =  { cont : U32 })
                                                      , (GlobState1 =  { cont : U32 }))
      in (0 :: U8
         , i :: MayNull (CPtr =  { cont : U32 })
         , j :: MayNull (CPtr =  { cont : U32 })
         , g :: (GlobState1 =  { cont : U32 })) :: (U8
                                                   , MayNull (CPtr =  { cont : U32 })
                                                   , MayNull (CPtr =  { cont : U32 })
                                                   , (GlobState1 =  { cont : U32 }))
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_cffv36 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })
                , (GlobState2 =  { cont : U32 })) -> (()
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , (GlobState1 =  { cont : U32 })
                                                     , (GlobState2 =  { cont : U32 }))
cogent_cffv36 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })
              , g1 :: (GlobState1 =  { cont : U32 })
              , g2 :: (GlobState2 =  { cont : U32 })) =
   let (_ :: U8
       , i :: MayNull (CPtr =  { cont : U32 })
       , j :: MayNull (CPtr =  { cont : U32 })
       , g1 :: (GlobState1 =  { cont : U32 })
       , g2 :: (GlobState2 =  { cont : U32 })) = let (v' :: ()
                                                     , i :: MayNull (CPtr =  { cont : U32 })
                                                     , j :: MayNull (CPtr =  { cont : U32 })
                                                     , g1 :: (GlobState1 =  { cont : U32 })
                                                     , g2 :: (GlobState2 =  { cont : U32 })) = let v' = cogent_ffv36 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                        , MayNull (CPtr =  { cont : U32 })
                                                                                                                        , (GlobState1 =  { cont : U32 })
                                                                                                                        , (GlobState2 =  { cont : U32 })) -> (()
                                                                                                                                                             , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                             , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                             , (GlobState1 =  { cont : U32 })
                                                                                                                                                             , (GlobState2 =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v3' = g1 :: (GlobState1 =  { cont : U32 })
         and v4' = g2 :: (GlobState2 =  { cont : U32 })
         and (v' :: ()
             , i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                             , MayNull (CPtr =  { cont : U32 })
                                                             , (GlobState1 =  { cont : U32 })
                                                             , (GlobState2 =  { cont : U32 })) -> (()
                                                                                                  , MayNull (CPtr =  { cont : U32 })
                                                                                                  , MayNull (CPtr =  { cont : U32 })
                                                                                                  , (GlobState1 =  { cont : U32 })
                                                                                                  , (GlobState2 =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                    , v2' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                    , v3' :: (GlobState1 =  { cont : U32 })
                                                                                                                                    , v4' :: (GlobState2 =  { cont : U32 })) :: (()
                                                                                                                                                                                , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                                , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                                , (GlobState1 =  { cont : U32 })
                                                                                                                                                                                , (GlobState2 =  { cont : U32 }))
         in (v' :: ()
            , i :: MayNull (CPtr =  { cont : U32 })
            , j :: MayNull (CPtr =  { cont : U32 })
            , g1 :: (GlobState1 =  { cont : U32 })
            , g2 :: (GlobState2 =  { cont : U32 })) :: (()
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , (GlobState1 =  { cont : U32 })
                                                       , (GlobState2 =  { cont : U32 }))
      in (0 :: U8
         , i :: MayNull (CPtr =  { cont : U32 })
         , j :: MayNull (CPtr =  { cont : U32 })
         , g1 :: (GlobState1 =  { cont : U32 })
         , g2 :: (GlobState2 =  { cont : U32 })) :: (U8
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (()
                                                 , MayNull (CPtr =  { cont : U32 })
                                                 , MayNull (CPtr =  { cont : U32 })
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_cffv41 : Heap -> (()
                        , Heap)
cogent_cffv41 heap :: Heap =
   let (_ :: U8
       , heap :: Heap) = let (v' :: ()
                             , heap :: Heap) = let v' = cogent_ffv41 :: Heap -> (()
                                                                                , Heap)
         and v1' = heap :: Heap
         and (v' :: ()
             , heap :: Heap) = v' :: Heap -> (()
                                             , Heap) v1' :: Heap :: (()
                                                                    , Heap)
         in (v' :: ()
            , heap :: Heap) :: ((), Heap)
      in (0 :: U8
         , heap :: Heap) :: (U8, Heap)
   in (() :: ()
      , heap :: Heap) :: ((), Heap)
cogent_cffv42 : ((GlobState1 =  { cont : U32 })
                , Heap) -> (()
                           , (GlobState1 =  { cont : U32 })
                           , Heap)
cogent_cffv42 (g :: (GlobState1 =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , g :: (GlobState1 =  { cont : U32 })
       , heap :: Heap) = let (v' :: ()
                             , g :: (GlobState1 =  { cont : U32 })
                             , heap :: Heap) = let v' = cogent_ffv42 :: ((GlobState1 =  { cont : U32 })
                                                                        , Heap) -> (()
                                                                                   , (GlobState1 =  { cont : U32 })
                                                                                   , Heap)
         and v1' = g :: (GlobState1 =  { cont : U32 })
         and v2' = heap :: Heap
         and (v' :: ()
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) = v' :: ((GlobState1 =  { cont : U32 })
                                     , Heap) -> (()
                                                , (GlobState1 =  { cont : U32 })
                                                , Heap) (v1' :: (GlobState1 =  { cont : U32 })
                                                        , v2' :: Heap) :: (()
                                                                          , (GlobState1 =  { cont : U32 })
                                                                          , Heap)
         in (v' :: ()
            , g :: (GlobState1 =  { cont : U32 })
            , heap :: Heap) :: (()
                               , (GlobState1 =  { cont : U32 })
                               , Heap)
      in (0 :: U8
         , g :: (GlobState1 =  { cont : U32 })
         , heap :: Heap) :: (U8
                            , (GlobState1 =  { cont : U32 })
                            , Heap)
   in (() :: ()
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (()
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_cffv43 : (MayNull (CPtr =  { cont : U32 })
                , Heap) -> (()
                           , MayNull (CPtr =  { cont : U32 })
                           , Heap)
cogent_cffv43 (i :: MayNull (CPtr =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , heap :: Heap) = let (v' :: ()
                             , heap :: Heap) = let v' = cogent_ffv43 :: (MayNull (CPtr =  { cont : U32 })
                                                                        , Heap) -> (()
                                                                                   , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = heap :: Heap
         and (v' :: ()
             , heap :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                     , Heap) -> (()
                                                , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                        , v2' :: Heap) :: (()
                                                                          , Heap)
         in (v' :: ()
            , heap :: Heap) :: ((), Heap)
      in (0 :: U8
         , heap :: Heap) :: (U8, Heap)
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , heap :: Heap) :: (()
                         , MayNull (CPtr =  { cont : U32 })
                         , Heap)
cogent_cffv44 : (MayNull (CPtr =  { cont : U32 })
                , Heap) -> (()
                           , MayNull (CPtr =  { cont : U32 })
                           , Heap)
cogent_cffv44 (i :: MayNull (CPtr =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull (CPtr =  { cont : U32 })
       , heap :: Heap) = let (v' :: ()
                             , i :: MayNull (CPtr =  { cont : U32 })
                             , heap :: Heap) = let v' = cogent_ffv44 :: (MayNull (CPtr =  { cont : U32 })
                                                                        , Heap) -> (()
                                                                                   , MayNull (CPtr =  { cont : U32 })
                                                                                   , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = heap :: Heap
         and (v' :: ()
             , i :: MayNull (CPtr =  { cont : U32 })
             , heap :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                     , Heap) -> (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                        , v2' :: Heap) :: (()
                                                                          , MayNull (CPtr =  { cont : U32 })
                                                                          , Heap)
         in (v' :: ()
            , i :: MayNull (CPtr =  { cont : U32 })
            , heap :: Heap) :: (()
                               , MayNull (CPtr =  { cont : U32 })
                               , Heap)
      in (0 :: U8
         , i :: MayNull (CPtr =  { cont : U32 })
         , heap :: Heap) :: (U8
                            , MayNull (CPtr =  { cont : U32 })
                            , Heap)
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , heap :: Heap) :: (()
                         , MayNull (CPtr =  { cont : U32 })
                         , Heap)
cogent_cffv45 : (MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })
                , Heap) -> (()
                           , MayNull (CPtr =  { cont : U32 })
                           , (GlobState1 =  { cont : U32 })
                           , Heap)
cogent_cffv45 (i :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , g :: (GlobState1 =  { cont : U32 })
       , heap :: Heap) = let (v' :: ()
                             , g :: (GlobState1 =  { cont : U32 })
                             , heap :: Heap) = let v' = cogent_ffv45 :: (MayNull (CPtr =  { cont : U32 })
                                                                        , (GlobState1 =  { cont : U32 })
                                                                        , Heap) -> (()
                                                                                   , (GlobState1 =  { cont : U32 })
                                                                                   , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = g :: (GlobState1 =  { cont : U32 })
         and v3' = heap :: Heap
         and (v' :: ()
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                     , (GlobState1 =  { cont : U32 })
                                     , Heap) -> (()
                                                , (GlobState1 =  { cont : U32 })
                                                , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                        , v2' :: (GlobState1 =  { cont : U32 })
                                                        , v3' :: Heap) :: (()
                                                                          , (GlobState1 =  { cont : U32 })
                                                                          , Heap)
         in (v' :: ()
            , g :: (GlobState1 =  { cont : U32 })
            , heap :: Heap) :: (()
                               , (GlobState1 =  { cont : U32 })
                               , Heap)
      in (0 :: U8
         , g :: (GlobState1 =  { cont : U32 })
         , heap :: Heap) :: (U8
                            , (GlobState1 =  { cont : U32 })
                            , Heap)
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (()
                         , MayNull (CPtr =  { cont : U32 })
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_cffv46 : (MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })
                , Heap) -> (()
                           , MayNull (CPtr =  { cont : U32 })
                           , (GlobState1 =  { cont : U32 })
                           , Heap)
cogent_cffv46 (i :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull (CPtr =  { cont : U32 })
       , g :: (GlobState1 =  { cont : U32 })
       , heap :: Heap) = let (v' :: ()
                             , i :: MayNull (CPtr =  { cont : U32 })
                             , g :: (GlobState1 =  { cont : U32 })
                             , heap :: Heap) = let v' = cogent_ffv46 :: (MayNull (CPtr =  { cont : U32 })
                                                                        , (GlobState1 =  { cont : U32 })
                                                                        , Heap) -> (()
                                                                                   , MayNull (CPtr =  { cont : U32 })
                                                                                   , (GlobState1 =  { cont : U32 })
                                                                                   , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = g :: (GlobState1 =  { cont : U32 })
         and v3' = heap :: Heap
         and (v' :: ()
             , i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                     , (GlobState1 =  { cont : U32 })
                                     , Heap) -> (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 })
                                                , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                        , v2' :: (GlobState1 =  { cont : U32 })
                                                        , v3' :: Heap) :: (()
                                                                          , MayNull (CPtr =  { cont : U32 })
                                                                          , (GlobState1 =  { cont : U32 })
                                                                          , Heap)
         in (v' :: ()
            , i :: MayNull (CPtr =  { cont : U32 })
            , g :: (GlobState1 =  { cont : U32 })
            , heap :: Heap) :: (()
                               , MayNull (CPtr =  { cont : U32 })
                               , (GlobState1 =  { cont : U32 })
                               , Heap)
      in (0 :: U8
         , i :: MayNull (CPtr =  { cont : U32 })
         , g :: (GlobState1 =  { cont : U32 })
         , heap :: Heap) :: (U8
                            , MayNull (CPtr =  { cont : U32 })
                            , (GlobState1 =  { cont : U32 })
                            , Heap)
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (()
                         , MayNull (CPtr =  { cont : U32 })
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_cffv47 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })
                , Heap) -> (()
                           , MayNull (CPtr =  { cont : U32 })
                           , MayNull (CPtr =  { cont : U32 })
                           , Heap)
cogent_cffv47 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull (CPtr =  { cont : U32 })
       , j :: MayNull (CPtr =  { cont : U32 })
       , heap :: Heap) = let (v' :: ()
                             , i :: MayNull (CPtr =  { cont : U32 })
                             , j :: MayNull (CPtr =  { cont : U32 })
                             , heap :: Heap) = let v' = cogent_ffv47 :: (MayNull (CPtr =  { cont : U32 })
                                                                        , MayNull (CPtr =  { cont : U32 })
                                                                        , Heap) -> (()
                                                                                   , MayNull (CPtr =  { cont : U32 })
                                                                                   , MayNull (CPtr =  { cont : U32 })
                                                                                   , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v3' = heap :: Heap
         and (v' :: ()
             , i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , heap :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                     , MayNull (CPtr =  { cont : U32 })
                                     , Heap) -> (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , MayNull (CPtr =  { cont : U32 })
                                                , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                        , v2' :: MayNull (CPtr =  { cont : U32 })
                                                        , v3' :: Heap) :: (()
                                                                          , MayNull (CPtr =  { cont : U32 })
                                                                          , MayNull (CPtr =  { cont : U32 })
                                                                          , Heap)
         in (v' :: ()
            , i :: MayNull (CPtr =  { cont : U32 })
            , j :: MayNull (CPtr =  { cont : U32 })
            , heap :: Heap) :: (()
                               , MayNull (CPtr =  { cont : U32 })
                               , MayNull (CPtr =  { cont : U32 })
                               , Heap)
      in (0 :: U8
         , i :: MayNull (CPtr =  { cont : U32 })
         , j :: MayNull (CPtr =  { cont : U32 })
         , heap :: Heap) :: (U8
                            , MayNull (CPtr =  { cont : U32 })
                            , MayNull (CPtr =  { cont : U32 })
                            , Heap)
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , heap :: Heap) :: (()
                         , MayNull (CPtr =  { cont : U32 })
                         , MayNull (CPtr =  { cont : U32 })
                         , Heap)
cogent_cffv48 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })
                , Heap) -> (()
                           , MayNull (CPtr =  { cont : U32 })
                           , MayNull (CPtr =  { cont : U32 })
                           , (GlobState1 =  { cont : U32 })
                           , Heap)
cogent_cffv48 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , i :: MayNull (CPtr =  { cont : U32 })
       , j :: MayNull (CPtr =  { cont : U32 })
       , g :: (GlobState1 =  { cont : U32 })
       , heap :: Heap) = let (v' :: ()
                             , i :: MayNull (CPtr =  { cont : U32 })
                             , j :: MayNull (CPtr =  { cont : U32 })
                             , g :: (GlobState1 =  { cont : U32 })
                             , heap :: Heap) = let v' = cogent_ffv48 :: (MayNull (CPtr =  { cont : U32 })
                                                                        , MayNull (CPtr =  { cont : U32 })
                                                                        , (GlobState1 =  { cont : U32 })
                                                                        , Heap) -> (()
                                                                                   , MayNull (CPtr =  { cont : U32 })
                                                                                   , MayNull (CPtr =  { cont : U32 })
                                                                                   , (GlobState1 =  { cont : U32 })
                                                                                   , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v3' = g :: (GlobState1 =  { cont : U32 })
         and v4' = heap :: Heap
         and (v' :: ()
             , i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                     , MayNull (CPtr =  { cont : U32 })
                                     , (GlobState1 =  { cont : U32 })
                                     , Heap) -> (()
                                                , MayNull (CPtr =  { cont : U32 })
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 })
                                                , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                        , v2' :: MayNull (CPtr =  { cont : U32 })
                                                        , v3' :: (GlobState1 =  { cont : U32 })
                                                        , v4' :: Heap) :: (()
                                                                          , MayNull (CPtr =  { cont : U32 })
                                                                          , MayNull (CPtr =  { cont : U32 })
                                                                          , (GlobState1 =  { cont : U32 })
                                                                          , Heap)
         in (v' :: ()
            , i :: MayNull (CPtr =  { cont : U32 })
            , j :: MayNull (CPtr =  { cont : U32 })
            , g :: (GlobState1 =  { cont : U32 })
            , heap :: Heap) :: (()
                               , MayNull (CPtr =  { cont : U32 })
                               , MayNull (CPtr =  { cont : U32 })
                               , (GlobState1 =  { cont : U32 })
                               , Heap)
      in (0 :: U8
         , i :: MayNull (CPtr =  { cont : U32 })
         , j :: MayNull (CPtr =  { cont : U32 })
         , g :: (GlobState1 =  { cont : U32 })
         , heap :: Heap) :: (U8
                            , MayNull (CPtr =  { cont : U32 })
                            , MayNull (CPtr =  { cont : U32 })
                            , (GlobState1 =  { cont : U32 })
                            , Heap)
   in (() :: ()
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (()
                         , MayNull (CPtr =  { cont : U32 })
                         , MayNull (CPtr =  { cont : U32 })
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_cffi1 : () -> U32
cogent_cffi1 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = cogent_ffi1 :: () -> U32
         and v' = v' :: () -> U32 () :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_cffi11 : MayNull (CPtr =  { cont : U32 }) -> (U32
                                                    , MayNull (CPtr =  { cont : U32 }))
cogent_cffi11 i :: MayNull (CPtr =  { cont : U32 }) =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = cogent_ffi11 :: MayNull (CPtr =  { cont : U32 }) -> U32
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v' = v' :: MayNull (CPtr =  { cont : U32 }) -> U32 v1' :: MayNull (CPtr =  { cont : U32 }) :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffi12 : MayNull (CPtr =  { cont : U32 }) -> (U32
                                                    , MayNull (CPtr =  { cont : U32 }))
cogent_cffi12 i :: MayNull (CPtr =  { cont : U32 }) =
   let (_ :: U8
       , r' :: U32
       , i :: MayNull (CPtr =  { cont : U32 })) = let (v' :: U32
                                                      , i :: MayNull (CPtr =  { cont : U32 })) = let v' = cogent_ffi12 :: MayNull (CPtr =  { cont : U32 }) -> (U32
                                                                                                                                                              , MayNull (CPtr =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and (v' :: U32
             , i :: MayNull (CPtr =  { cont : U32 })) = v' :: MayNull (CPtr =  { cont : U32 }) -> (U32
                                                                                                  , MayNull (CPtr =  { cont : U32 })) v1' :: MayNull (CPtr =  { cont : U32 }) :: (U32
                                                                                                                                                                                 , MayNull (CPtr =  { cont : U32 }))
         in (v' :: U32
            , i :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                        , MayNull (CPtr =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , i :: MayNull (CPtr =  { cont : U32 })) :: (U8
                                                     , U32
                                                     , MayNull (CPtr =  { cont : U32 }))
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffi15 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , MayNull (CPtr =  { cont : U32 }))
cogent_cffi15 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = cogent_ffi15 :: (MayNull (CPtr =  { cont : U32 })
                                                        , MayNull (CPtr =  { cont : U32 })) -> U32
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v' = v' :: (MayNull (CPtr =  { cont : U32 })
                        , MayNull (CPtr =  { cont : U32 })) -> U32 (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                   , v2' :: MayNull (CPtr =  { cont : U32 })) :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 })
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffi16 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , MayNull (CPtr =  { cont : U32 }))
cogent_cffi16 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32
       , i :: MayNull (CPtr =  { cont : U32 })) = let (v' :: U32
                                                      , i :: MayNull (CPtr =  { cont : U32 })) = let v' = cogent_ffi16 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                          , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                                                                                                                                 , MayNull (CPtr =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and (v' :: U32
             , i :: MayNull (CPtr =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                              , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                                                                     , MayNull (CPtr =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                         , v2' :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                                                                                                                                                       , MayNull (CPtr =  { cont : U32 }))
         in (v' :: U32
            , i :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                        , MayNull (CPtr =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , i :: MayNull (CPtr =  { cont : U32 })) :: (U8
                                                     , U32
                                                     , MayNull (CPtr =  { cont : U32 }))
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 })
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffi17 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , MayNull (CPtr =  { cont : U32 }))
cogent_cffi17 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32
       , j :: MayNull (CPtr =  { cont : U32 })) = let (v' :: U32
                                                      , j :: MayNull (CPtr =  { cont : U32 })) = let v' = cogent_ffi17 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                          , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                                                                                                                                 , MayNull (CPtr =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and (v' :: U32
             , j :: MayNull (CPtr =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                              , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                                                                     , MayNull (CPtr =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                         , v2' :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                                                                                                                                                       , MayNull (CPtr =  { cont : U32 }))
         in (v' :: U32
            , j :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                        , MayNull (CPtr =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , j :: MayNull (CPtr =  { cont : U32 })) :: (U8
                                                     , U32
                                                     , MayNull (CPtr =  { cont : U32 }))
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 })
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffi18 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , MayNull (CPtr =  { cont : U32 }))
cogent_cffi18 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32
       , i :: MayNull (CPtr =  { cont : U32 })
       , j :: MayNull (CPtr =  { cont : U32 })) = let (v' :: U32
                                                      , i :: MayNull (CPtr =  { cont : U32 })
                                                      , j :: MayNull (CPtr =  { cont : U32 })) = let v' = cogent_ffi18 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                          , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                                                                                                                                 , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                 , MayNull (CPtr =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and (v' :: U32
             , i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                              , MayNull (CPtr =  { cont : U32 })) -> (U32
                                                                                                     , MayNull (CPtr =  { cont : U32 })
                                                                                                     , MayNull (CPtr =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                         , v2' :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                                                                                                                                                       , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                                       , MayNull (CPtr =  { cont : U32 }))
         in (v' :: U32
            , i :: MayNull (CPtr =  { cont : U32 })
            , j :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                        , MayNull (CPtr =  { cont : U32 })
                                                        , MayNull (CPtr =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , i :: MayNull (CPtr =  { cont : U32 })
         , j :: MayNull (CPtr =  { cont : U32 })) :: (U8
                                                     , U32
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , MayNull (CPtr =  { cont : U32 }))
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 })
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_cffi21 : (GlobState1 =  { cont : U32 }) -> (U32
                                                  , (GlobState1 =  { cont : U32 }))
cogent_cffi21 g :: (GlobState1 =  { cont : U32 }) =
   let (_ :: U8
       , r' :: U32
       , g :: (GlobState1 =  { cont : U32 })) = let (v' :: U32
                                                    , g :: (GlobState1 =  { cont : U32 })) = let v' = cogent_ffi21 :: (GlobState1 =  { cont : U32 }) -> (U32
                                                                                                                                                        , (GlobState1 =  { cont : U32 }))
         and v1' = g :: (GlobState1 =  { cont : U32 })
         and (v' :: U32
             , g :: (GlobState1 =  { cont : U32 })) = v' :: (GlobState1 =  { cont : U32 }) -> (U32
                                                                                              , (GlobState1 =  { cont : U32 })) v1' :: (GlobState1 =  { cont : U32 }) :: (U32
                                                                                                                                                                         , (GlobState1 =  { cont : U32 }))
         in (v' :: U32
            , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                      , (GlobState1 =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , g :: (GlobState1 =  { cont : U32 })) :: (U8
                                                   , U32
                                                   , (GlobState1 =  { cont : U32 }))
   in (r' :: U32
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , (GlobState1 =  { cont : U32 }))
cogent_cffi22 : (GlobState2 =  { cont : U32 }) -> (U32
                                                  , (GlobState2 =  { cont : U32 }))
cogent_cffi22 g :: (GlobState2 =  { cont : U32 }) =
   let (_ :: U8
       , r' :: U32
       , g :: (GlobState2 =  { cont : U32 })) = let (v' :: U32
                                                    , g :: (GlobState2 =  { cont : U32 })) = let v' = cogent_ffi22 :: (GlobState2 =  { cont : U32 }) -> (U32
                                                                                                                                                        , (GlobState2 =  { cont : U32 }))
         and v1' = g :: (GlobState2 =  { cont : U32 })
         and (v' :: U32
             , g :: (GlobState2 =  { cont : U32 })) = v' :: (GlobState2 =  { cont : U32 }) -> (U32
                                                                                              , (GlobState2 =  { cont : U32 })) v1' :: (GlobState2 =  { cont : U32 }) :: (U32
                                                                                                                                                                         , (GlobState2 =  { cont : U32 }))
         in (v' :: U32
            , g :: (GlobState2 =  { cont : U32 })) :: (U32
                                                      , (GlobState2 =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , g :: (GlobState2 =  { cont : U32 })) :: (U8
                                                   , U32
                                                   , (GlobState2 =  { cont : U32 }))
   in (r' :: U32
      , g :: (GlobState2 =  { cont : U32 })) :: (U32
                                                , (GlobState2 =  { cont : U32 }))
cogent_cffi23 : ((GlobState1 =  { cont : U32 })
                , (GlobState2 =  { cont : U32 })) -> (U32
                                                     , (GlobState1 =  { cont : U32 })
                                                     , (GlobState2 =  { cont : U32 }))
cogent_cffi23 (g1 :: (GlobState1 =  { cont : U32 })
              , g2 :: (GlobState2 =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32
       , g1 :: (GlobState1 =  { cont : U32 })
       , g2 :: (GlobState2 =  { cont : U32 })) = let (v' :: U32
                                                     , g1 :: (GlobState1 =  { cont : U32 })
                                                     , g2 :: (GlobState2 =  { cont : U32 })) = let v' = cogent_ffi23 :: ((GlobState1 =  { cont : U32 })
                                                                                                                        , (GlobState2 =  { cont : U32 })) -> (U32
                                                                                                                                                             , (GlobState1 =  { cont : U32 })
                                                                                                                                                             , (GlobState2 =  { cont : U32 }))
         and v1' = g1 :: (GlobState1 =  { cont : U32 })
         and v2' = g2 :: (GlobState2 =  { cont : U32 })
         and (v' :: U32
             , g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) = v' :: ((GlobState1 =  { cont : U32 })
                                                             , (GlobState2 =  { cont : U32 })) -> (U32
                                                                                                  , (GlobState1 =  { cont : U32 })
                                                                                                  , (GlobState2 =  { cont : U32 })) (v1' :: (GlobState1 =  { cont : U32 })
                                                                                                                                    , v2' :: (GlobState2 =  { cont : U32 })) :: (U32
                                                                                                                                                                                , (GlobState1 =  { cont : U32 })
                                                                                                                                                                                , (GlobState2 =  { cont : U32 }))
         in (v' :: U32
            , g1 :: (GlobState1 =  { cont : U32 })
            , g2 :: (GlobState2 =  { cont : U32 })) :: (U32
                                                       , (GlobState1 =  { cont : U32 })
                                                       , (GlobState2 =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , g1 :: (GlobState1 =  { cont : U32 })
         , g2 :: (GlobState2 =  { cont : U32 })) :: (U8
                                                    , U32
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
   in (r' :: U32
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (U32
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_cffi31 : (MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })) -> (U32
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , (GlobState1 =  { cont : U32 }))
cogent_cffi31 (i :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32
       , g :: (GlobState1 =  { cont : U32 })) = let (v' :: U32
                                                    , g :: (GlobState1 =  { cont : U32 })) = let v' = cogent_ffi31 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                      , (GlobState1 =  { cont : U32 })) -> (U32
                                                                                                                                                           , (GlobState1 =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = g :: (GlobState1 =  { cont : U32 })
         and (v' :: U32
             , g :: (GlobState1 =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                            , (GlobState1 =  { cont : U32 })) -> (U32
                                                                                                 , (GlobState1 =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v2' :: (GlobState1 =  { cont : U32 })) :: (U32
                                                                                                                                                                               , (GlobState1 =  { cont : U32 }))
         in (v' :: U32
            , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                      , (GlobState1 =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , g :: (GlobState1 =  { cont : U32 })) :: (U8
                                                   , U32
                                                   , (GlobState1 =  { cont : U32 }))
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_cffi32 : (MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })) -> (U32
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , (GlobState1 =  { cont : U32 }))
cogent_cffi32 (i :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32
       , i :: MayNull (CPtr =  { cont : U32 })
       , g :: (GlobState1 =  { cont : U32 })) = let (v' :: U32
                                                    , i :: MayNull (CPtr =  { cont : U32 })
                                                    , g :: (GlobState1 =  { cont : U32 })) = let v' = cogent_ffi32 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                      , (GlobState1 =  { cont : U32 })) -> (U32
                                                                                                                                                           , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                           , (GlobState1 =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = g :: (GlobState1 =  { cont : U32 })
         and (v' :: U32
             , i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                            , (GlobState1 =  { cont : U32 })) -> (U32
                                                                                                 , MayNull (CPtr =  { cont : U32 })
                                                                                                 , (GlobState1 =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v2' :: (GlobState1 =  { cont : U32 })) :: (U32
                                                                                                                                                                               , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                               , (GlobState1 =  { cont : U32 }))
         in (v' :: U32
            , i :: MayNull (CPtr =  { cont : U32 })
            , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                      , MayNull (CPtr =  { cont : U32 })
                                                      , (GlobState1 =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , i :: MayNull (CPtr =  { cont : U32 })
         , g :: (GlobState1 =  { cont : U32 })) :: (U8
                                                   , U32
                                                   , MayNull (CPtr =  { cont : U32 })
                                                   , (GlobState1 =  { cont : U32 }))
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_cffi34 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })) -> (U32
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , (GlobState1 =  { cont : U32 }))
cogent_cffi34 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32
       , i :: MayNull (CPtr =  { cont : U32 })
       , g :: (GlobState1 =  { cont : U32 })) = let (v' :: U32
                                                    , i :: MayNull (CPtr =  { cont : U32 })
                                                    , g :: (GlobState1 =  { cont : U32 })) = let v' = cogent_ffi34 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                      , MayNull (CPtr =  { cont : U32 })
                                                                                                                      , (GlobState1 =  { cont : U32 })) -> (U32
                                                                                                                                                           , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                           , (GlobState1 =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v3' = g :: (GlobState1 =  { cont : U32 })
         and (v' :: U32
             , i :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                            , MayNull (CPtr =  { cont : U32 })
                                                            , (GlobState1 =  { cont : U32 })) -> (U32
                                                                                                 , MayNull (CPtr =  { cont : U32 })
                                                                                                 , (GlobState1 =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v2' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v3' :: (GlobState1 =  { cont : U32 })) :: (U32
                                                                                                                                                                               , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                               , (GlobState1 =  { cont : U32 }))
         in (v' :: U32
            , i :: MayNull (CPtr =  { cont : U32 })
            , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                      , MayNull (CPtr =  { cont : U32 })
                                                      , (GlobState1 =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , i :: MayNull (CPtr =  { cont : U32 })
         , g :: (GlobState1 =  { cont : U32 })) :: (U8
                                                   , U32
                                                   , MayNull (CPtr =  { cont : U32 })
                                                   , (GlobState1 =  { cont : U32 }))
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , MayNull (CPtr =  { cont : U32 })
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_cffi35 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })) -> (U32
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , (GlobState1 =  { cont : U32 }))
cogent_cffi35 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32
       , i :: MayNull (CPtr =  { cont : U32 })
       , j :: MayNull (CPtr =  { cont : U32 })
       , g :: (GlobState1 =  { cont : U32 })) = let (v' :: U32
                                                    , i :: MayNull (CPtr =  { cont : U32 })
                                                    , j :: MayNull (CPtr =  { cont : U32 })
                                                    , g :: (GlobState1 =  { cont : U32 })) = let v' = cogent_ffi35 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                      , MayNull (CPtr =  { cont : U32 })
                                                                                                                      , (GlobState1 =  { cont : U32 })) -> (U32
                                                                                                                                                           , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                           , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                           , (GlobState1 =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v3' = g :: (GlobState1 =  { cont : U32 })
         and (v' :: U32
             , i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                            , MayNull (CPtr =  { cont : U32 })
                                                            , (GlobState1 =  { cont : U32 })) -> (U32
                                                                                                 , MayNull (CPtr =  { cont : U32 })
                                                                                                 , MayNull (CPtr =  { cont : U32 })
                                                                                                 , (GlobState1 =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v2' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                   , v3' :: (GlobState1 =  { cont : U32 })) :: (U32
                                                                                                                                                                               , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                               , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                               , (GlobState1 =  { cont : U32 }))
         in (v' :: U32
            , i :: MayNull (CPtr =  { cont : U32 })
            , j :: MayNull (CPtr =  { cont : U32 })
            , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                      , MayNull (CPtr =  { cont : U32 })
                                                      , MayNull (CPtr =  { cont : U32 })
                                                      , (GlobState1 =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , i :: MayNull (CPtr =  { cont : U32 })
         , j :: MayNull (CPtr =  { cont : U32 })
         , g :: (GlobState1 =  { cont : U32 })) :: (U8
                                                   , U32
                                                   , MayNull (CPtr =  { cont : U32 })
                                                   , MayNull (CPtr =  { cont : U32 })
                                                   , (GlobState1 =  { cont : U32 }))
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })) :: (U32
                                                , MayNull (CPtr =  { cont : U32 })
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 }))
cogent_cffi36 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })
                , (GlobState2 =  { cont : U32 })) -> (U32
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , (GlobState1 =  { cont : U32 })
                                                     , (GlobState2 =  { cont : U32 }))
cogent_cffi36 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })
              , g1 :: (GlobState1 =  { cont : U32 })
              , g2 :: (GlobState2 =  { cont : U32 })) =
   let (_ :: U8
       , r' :: U32
       , i :: MayNull (CPtr =  { cont : U32 })
       , j :: MayNull (CPtr =  { cont : U32 })
       , g1 :: (GlobState1 =  { cont : U32 })
       , g2 :: (GlobState2 =  { cont : U32 })) = let (v' :: U32
                                                     , i :: MayNull (CPtr =  { cont : U32 })
                                                     , j :: MayNull (CPtr =  { cont : U32 })
                                                     , g1 :: (GlobState1 =  { cont : U32 })
                                                     , g2 :: (GlobState2 =  { cont : U32 })) = let v' = cogent_ffi36 :: (MayNull (CPtr =  { cont : U32 })
                                                                                                                        , MayNull (CPtr =  { cont : U32 })
                                                                                                                        , (GlobState1 =  { cont : U32 })
                                                                                                                        , (GlobState2 =  { cont : U32 })) -> (U32
                                                                                                                                                             , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                             , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                             , (GlobState1 =  { cont : U32 })
                                                                                                                                                             , (GlobState2 =  { cont : U32 }))
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v3' = g1 :: (GlobState1 =  { cont : U32 })
         and v4' = g2 :: (GlobState2 =  { cont : U32 })
         and (v' :: U32
             , i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g1 :: (GlobState1 =  { cont : U32 })
             , g2 :: (GlobState2 =  { cont : U32 })) = v' :: (MayNull (CPtr =  { cont : U32 })
                                                             , MayNull (CPtr =  { cont : U32 })
                                                             , (GlobState1 =  { cont : U32 })
                                                             , (GlobState2 =  { cont : U32 })) -> (U32
                                                                                                  , MayNull (CPtr =  { cont : U32 })
                                                                                                  , MayNull (CPtr =  { cont : U32 })
                                                                                                  , (GlobState1 =  { cont : U32 })
                                                                                                  , (GlobState2 =  { cont : U32 })) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                    , v2' :: MayNull (CPtr =  { cont : U32 })
                                                                                                                                    , v3' :: (GlobState1 =  { cont : U32 })
                                                                                                                                    , v4' :: (GlobState2 =  { cont : U32 })) :: (U32
                                                                                                                                                                                , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                                , MayNull (CPtr =  { cont : U32 })
                                                                                                                                                                                , (GlobState1 =  { cont : U32 })
                                                                                                                                                                                , (GlobState2 =  { cont : U32 }))
         in (v' :: U32
            , i :: MayNull (CPtr =  { cont : U32 })
            , j :: MayNull (CPtr =  { cont : U32 })
            , g1 :: (GlobState1 =  { cont : U32 })
            , g2 :: (GlobState2 =  { cont : U32 })) :: (U32
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , MayNull (CPtr =  { cont : U32 })
                                                       , (GlobState1 =  { cont : U32 })
                                                       , (GlobState2 =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , i :: MayNull (CPtr =  { cont : U32 })
         , j :: MayNull (CPtr =  { cont : U32 })
         , g1 :: (GlobState1 =  { cont : U32 })
         , g2 :: (GlobState2 =  { cont : U32 })) :: (U8
                                                    , U32
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , MayNull (CPtr =  { cont : U32 })
                                                    , (GlobState1 =  { cont : U32 })
                                                    , (GlobState2 =  { cont : U32 }))
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g1 :: (GlobState1 =  { cont : U32 })
      , g2 :: (GlobState2 =  { cont : U32 })) :: (U32
                                                 , MayNull (CPtr =  { cont : U32 })
                                                 , MayNull (CPtr =  { cont : U32 })
                                                 , (GlobState1 =  { cont : U32 })
                                                 , (GlobState2 =  { cont : U32 }))
cogent_cffi41 : Heap -> (U32
                        , Heap)
cogent_cffi41 heap :: Heap =
   let (_ :: U8
       , r' :: U32
       , heap :: Heap) = let (v' :: U32
                             , heap :: Heap) = let v' = cogent_ffi41 :: Heap -> (U32
                                                                                , Heap)
         and v1' = heap :: Heap
         and (v' :: U32
             , heap :: Heap) = v' :: Heap -> (U32
                                             , Heap) v1' :: Heap :: (U32
                                                                    , Heap)
         in (v' :: U32
            , heap :: Heap) :: (U32, Heap)
      in (3 :: U8
         , v' :: U32
         , heap :: Heap) :: (U8
                            , U32
                            , Heap)
   in (r' :: U32
      , heap :: Heap) :: (U32, Heap)
cogent_cffi42 : ((GlobState1 =  { cont : U32 })
                , Heap) -> (U32
                           , (GlobState1 =  { cont : U32 })
                           , Heap)
cogent_cffi42 (g :: (GlobState1 =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , r' :: U32
       , g :: (GlobState1 =  { cont : U32 })
       , heap :: Heap) = let (v' :: U32
                             , g :: (GlobState1 =  { cont : U32 })
                             , heap :: Heap) = let v' = cogent_ffi42 :: ((GlobState1 =  { cont : U32 })
                                                                        , Heap) -> (U32
                                                                                   , (GlobState1 =  { cont : U32 })
                                                                                   , Heap)
         and v1' = g :: (GlobState1 =  { cont : U32 })
         and v2' = heap :: Heap
         and (v' :: U32
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) = v' :: ((GlobState1 =  { cont : U32 })
                                     , Heap) -> (U32
                                                , (GlobState1 =  { cont : U32 })
                                                , Heap) (v1' :: (GlobState1 =  { cont : U32 })
                                                        , v2' :: Heap) :: (U32
                                                                          , (GlobState1 =  { cont : U32 })
                                                                          , Heap)
         in (v' :: U32
            , g :: (GlobState1 =  { cont : U32 })
            , heap :: Heap) :: (U32
                               , (GlobState1 =  { cont : U32 })
                               , Heap)
      in (3 :: U8
         , v' :: U32
         , g :: (GlobState1 =  { cont : U32 })
         , heap :: Heap) :: (U8
                            , U32
                            , (GlobState1 =  { cont : U32 })
                            , Heap)
   in (r' :: U32
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_cffi43 : (MayNull (CPtr =  { cont : U32 })
                , Heap) -> (U32
                           , MayNull (CPtr =  { cont : U32 })
                           , Heap)
cogent_cffi43 (i :: MayNull (CPtr =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , r' :: U32
       , heap :: Heap) = let (v' :: U32
                             , heap :: Heap) = let v' = cogent_ffi43 :: (MayNull (CPtr =  { cont : U32 })
                                                                        , Heap) -> (U32
                                                                                   , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = heap :: Heap
         and (v' :: U32
             , heap :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                     , Heap) -> (U32
                                                , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                        , v2' :: Heap) :: (U32
                                                                          , Heap)
         in (v' :: U32
            , heap :: Heap) :: (U32, Heap)
      in (3 :: U8
         , v' :: U32
         , heap :: Heap) :: (U8
                            , U32
                            , Heap)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , MayNull (CPtr =  { cont : U32 })
                         , Heap)
cogent_cffi44 : (MayNull (CPtr =  { cont : U32 })
                , Heap) -> (U32
                           , MayNull (CPtr =  { cont : U32 })
                           , Heap)
cogent_cffi44 (i :: MayNull (CPtr =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , r' :: U32
       , i :: MayNull (CPtr =  { cont : U32 })
       , heap :: Heap) = let (v' :: U32
                             , i :: MayNull (CPtr =  { cont : U32 })
                             , heap :: Heap) = let v' = cogent_ffi44 :: (MayNull (CPtr =  { cont : U32 })
                                                                        , Heap) -> (U32
                                                                                   , MayNull (CPtr =  { cont : U32 })
                                                                                   , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = heap :: Heap
         and (v' :: U32
             , i :: MayNull (CPtr =  { cont : U32 })
             , heap :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                     , Heap) -> (U32
                                                , MayNull (CPtr =  { cont : U32 })
                                                , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                        , v2' :: Heap) :: (U32
                                                                          , MayNull (CPtr =  { cont : U32 })
                                                                          , Heap)
         in (v' :: U32
            , i :: MayNull (CPtr =  { cont : U32 })
            , heap :: Heap) :: (U32
                               , MayNull (CPtr =  { cont : U32 })
                               , Heap)
      in (3 :: U8
         , v' :: U32
         , i :: MayNull (CPtr =  { cont : U32 })
         , heap :: Heap) :: (U8
                            , U32
                            , MayNull (CPtr =  { cont : U32 })
                            , Heap)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , MayNull (CPtr =  { cont : U32 })
                         , Heap)
cogent_cffi45 : (MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })
                , Heap) -> (U32
                           , MayNull (CPtr =  { cont : U32 })
                           , (GlobState1 =  { cont : U32 })
                           , Heap)
cogent_cffi45 (i :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , r' :: U32
       , g :: (GlobState1 =  { cont : U32 })
       , heap :: Heap) = let (v' :: U32
                             , g :: (GlobState1 =  { cont : U32 })
                             , heap :: Heap) = let v' = cogent_ffi45 :: (MayNull (CPtr =  { cont : U32 })
                                                                        , (GlobState1 =  { cont : U32 })
                                                                        , Heap) -> (U32
                                                                                   , (GlobState1 =  { cont : U32 })
                                                                                   , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = g :: (GlobState1 =  { cont : U32 })
         and v3' = heap :: Heap
         and (v' :: U32
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                     , (GlobState1 =  { cont : U32 })
                                     , Heap) -> (U32
                                                , (GlobState1 =  { cont : U32 })
                                                , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                        , v2' :: (GlobState1 =  { cont : U32 })
                                                        , v3' :: Heap) :: (U32
                                                                          , (GlobState1 =  { cont : U32 })
                                                                          , Heap)
         in (v' :: U32
            , g :: (GlobState1 =  { cont : U32 })
            , heap :: Heap) :: (U32
                               , (GlobState1 =  { cont : U32 })
                               , Heap)
      in (3 :: U8
         , v' :: U32
         , g :: (GlobState1 =  { cont : U32 })
         , heap :: Heap) :: (U8
                            , U32
                            , (GlobState1 =  { cont : U32 })
                            , Heap)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , MayNull (CPtr =  { cont : U32 })
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_cffi46 : (MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })
                , Heap) -> (U32
                           , MayNull (CPtr =  { cont : U32 })
                           , (GlobState1 =  { cont : U32 })
                           , Heap)
cogent_cffi46 (i :: MayNull (CPtr =  { cont : U32 })
              , heap :: (GlobState1 =  { cont : U32 })
              , globheap1 :: Heap) =
   let (_ :: U8
       , r' :: U32
       , i :: MayNull (CPtr =  { cont : U32 })
       , heap :: (GlobState1 =  { cont : U32 })
       , globheap1 :: Heap) = let (v' :: U32
                                  , i :: MayNull (CPtr =  { cont : U32 })
                                  , heap :: (GlobState1 =  { cont : U32 })
                                  , globheap1 :: Heap) = let v' = cogent_ffi46 :: (MayNull (CPtr =  { cont : U32 })
                                                                                  , (GlobState1 =  { cont : U32 })
                                                                                  , Heap) -> (U32
                                                                                             , MayNull (CPtr =  { cont : U32 })
                                                                                             , (GlobState1 =  { cont : U32 })
                                                                                             , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = heap :: (GlobState1 =  { cont : U32 })
         and v3' = globheap1 :: Heap
         and (v' :: U32
             , i :: MayNull (CPtr =  { cont : U32 })
             , heap :: (GlobState1 =  { cont : U32 })
             , globheap1 :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                          , (GlobState1 =  { cont : U32 })
                                          , Heap) -> (U32
                                                     , MayNull (CPtr =  { cont : U32 })
                                                     , (GlobState1 =  { cont : U32 })
                                                     , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                             , v2' :: (GlobState1 =  { cont : U32 })
                                                             , v3' :: Heap) :: (U32
                                                                               , MayNull (CPtr =  { cont : U32 })
                                                                               , (GlobState1 =  { cont : U32 })
                                                                               , Heap)
         in (v' :: U32
            , i :: MayNull (CPtr =  { cont : U32 })
            , heap :: (GlobState1 =  { cont : U32 })
            , globheap1 :: Heap) :: (U32
                                    , MayNull (CPtr =  { cont : U32 })
                                    , (GlobState1 =  { cont : U32 })
                                    , Heap)
      in (3 :: U8
         , v' :: U32
         , i :: MayNull (CPtr =  { cont : U32 })
         , heap :: (GlobState1 =  { cont : U32 })
         , globheap1 :: Heap) :: (U8
                                 , U32
                                 , MayNull (CPtr =  { cont : U32 })
                                 , (GlobState1 =  { cont : U32 })
                                 , Heap)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , heap :: (GlobState1 =  { cont : U32 })
      , globheap1 :: Heap) :: (U32
                              , MayNull (CPtr =  { cont : U32 })
                              , (GlobState1 =  { cont : U32 })
                              , Heap)
cogent_cffi48 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })
                , Heap) -> (U32
                           , MayNull (CPtr =  { cont : U32 })
                           , MayNull (CPtr =  { cont : U32 })
                           , (GlobState1 =  { cont : U32 })
                           , Heap)
cogent_cffi48 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , r' :: U32
       , i :: MayNull (CPtr =  { cont : U32 })
       , j :: MayNull (CPtr =  { cont : U32 })
       , g :: (GlobState1 =  { cont : U32 })
       , heap :: Heap) = let (v' :: U32
                             , i :: MayNull (CPtr =  { cont : U32 })
                             , j :: MayNull (CPtr =  { cont : U32 })
                             , g :: (GlobState1 =  { cont : U32 })
                             , heap :: Heap) = let v' = cogent_ffi48 :: (MayNull (CPtr =  { cont : U32 })
                                                                        , MayNull (CPtr =  { cont : U32 })
                                                                        , (GlobState1 =  { cont : U32 })
                                                                        , Heap) -> (U32
                                                                                   , MayNull (CPtr =  { cont : U32 })
                                                                                   , MayNull (CPtr =  { cont : U32 })
                                                                                   , (GlobState1 =  { cont : U32 })
                                                                                   , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v3' = g :: (GlobState1 =  { cont : U32 })
         and v4' = heap :: Heap
         and (v' :: U32
             , i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                     , MayNull (CPtr =  { cont : U32 })
                                     , (GlobState1 =  { cont : U32 })
                                     , Heap) -> (U32
                                                , MayNull (CPtr =  { cont : U32 })
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 })
                                                , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                        , v2' :: MayNull (CPtr =  { cont : U32 })
                                                        , v3' :: (GlobState1 =  { cont : U32 })
                                                        , v4' :: Heap) :: (U32
                                                                          , MayNull (CPtr =  { cont : U32 })
                                                                          , MayNull (CPtr =  { cont : U32 })
                                                                          , (GlobState1 =  { cont : U32 })
                                                                          , Heap)
         in (v' :: U32
            , i :: MayNull (CPtr =  { cont : U32 })
            , j :: MayNull (CPtr =  { cont : U32 })
            , g :: (GlobState1 =  { cont : U32 })
            , heap :: Heap) :: (U32
                               , MayNull (CPtr =  { cont : U32 })
                               , MayNull (CPtr =  { cont : U32 })
                               , (GlobState1 =  { cont : U32 })
                               , Heap)
      in (3 :: U8
         , v' :: U32
         , i :: MayNull (CPtr =  { cont : U32 })
         , j :: MayNull (CPtr =  { cont : U32 })
         , g :: (GlobState1 =  { cont : U32 })
         , heap :: Heap) :: (U8
                            , U32
                            , MayNull (CPtr =  { cont : U32 })
                            , MayNull (CPtr =  { cont : U32 })
                            , (GlobState1 =  { cont : U32 })
                            , Heap)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , MayNull (CPtr =  { cont : U32 })
                         , MayNull (CPtr =  { cont : U32 })
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
cogent_cffi49 : (MayNull (CPtr =  { cont : U32 })
                , MayNull (CPtr =  { cont : U32 })
                , (GlobState1 =  { cont : U32 })
                , Heap) -> (U32
                           , MayNull (CPtr =  { cont : U32 })
                           , MayNull (CPtr =  { cont : U32 })
                           , (GlobState1 =  { cont : U32 })
                           , Heap)
cogent_cffi49 (i :: MayNull (CPtr =  { cont : U32 })
              , j :: MayNull (CPtr =  { cont : U32 })
              , g :: (GlobState1 =  { cont : U32 })
              , heap :: Heap) =
   let (_ :: U8
       , r' :: U32
       , i :: MayNull (CPtr =  { cont : U32 })
       , j :: MayNull (CPtr =  { cont : U32 })
       , g :: (GlobState1 =  { cont : U32 })
       , heap :: Heap) = let (v' :: U32
                             , i :: MayNull (CPtr =  { cont : U32 })
                             , j :: MayNull (CPtr =  { cont : U32 })
                             , g :: (GlobState1 =  { cont : U32 })
                             , heap :: Heap) = let v' = cogent_ffi49 :: (MayNull (CPtr =  { cont : U32 })
                                                                        , MayNull (CPtr =  { cont : U32 })
                                                                        , (GlobState1 =  { cont : U32 })
                                                                        , Heap) -> (U32
                                                                                   , MayNull (CPtr =  { cont : U32 })
                                                                                   , MayNull (CPtr =  { cont : U32 })
                                                                                   , (GlobState1 =  { cont : U32 })
                                                                                   , Heap)
         and v1' = i :: MayNull (CPtr =  { cont : U32 })
         and v2' = j :: MayNull (CPtr =  { cont : U32 })
         and v3' = g :: (GlobState1 =  { cont : U32 })
         and v4' = heap :: Heap
         and (v' :: U32
             , i :: MayNull (CPtr =  { cont : U32 })
             , j :: MayNull (CPtr =  { cont : U32 })
             , g :: (GlobState1 =  { cont : U32 })
             , heap :: Heap) = v' :: (MayNull (CPtr =  { cont : U32 })
                                     , MayNull (CPtr =  { cont : U32 })
                                     , (GlobState1 =  { cont : U32 })
                                     , Heap) -> (U32
                                                , MayNull (CPtr =  { cont : U32 })
                                                , MayNull (CPtr =  { cont : U32 })
                                                , (GlobState1 =  { cont : U32 })
                                                , Heap) (v1' :: MayNull (CPtr =  { cont : U32 })
                                                        , v2' :: MayNull (CPtr =  { cont : U32 })
                                                        , v3' :: (GlobState1 =  { cont : U32 })
                                                        , v4' :: Heap) :: (U32
                                                                          , MayNull (CPtr =  { cont : U32 })
                                                                          , MayNull (CPtr =  { cont : U32 })
                                                                          , (GlobState1 =  { cont : U32 })
                                                                          , Heap)
         in (v' :: U32
            , i :: MayNull (CPtr =  { cont : U32 })
            , j :: MayNull (CPtr =  { cont : U32 })
            , g :: (GlobState1 =  { cont : U32 })
            , heap :: Heap) :: (U32
                               , MayNull (CPtr =  { cont : U32 })
                               , MayNull (CPtr =  { cont : U32 })
                               , (GlobState1 =  { cont : U32 })
                               , Heap)
      in (3 :: U8
         , v' :: U32
         , i :: MayNull (CPtr =  { cont : U32 })
         , j :: MayNull (CPtr =  { cont : U32 })
         , g :: (GlobState1 =  { cont : U32 })
         , heap :: Heap) :: (U8
                            , U32
                            , MayNull (CPtr =  { cont : U32 })
                            , MayNull (CPtr =  { cont : U32 })
                            , (GlobState1 =  { cont : U32 })
                            , Heap)
   in (r' :: U32
      , i :: MayNull (CPtr =  { cont : U32 })
      , j :: MayNull (CPtr =  { cont : U32 })
      , g :: (GlobState1 =  { cont : U32 })
      , heap :: Heap) :: (U32
                         , MayNull (CPtr =  { cont : U32 })
                         , MayNull (CPtr =  { cont : U32 })
                         , (GlobState1 =  { cont : U32 })
                         , Heap)
