

{- Dummy type used only for its size -}
type Union_Sembedtls_ssl_premaster_secret

{-
 * SSL state machine
 -}
type Sembedtls_ssl_states = U32
sEMBEDTLS_SSL_HELLO_REQUEST : U32
sEMBEDTLS_SSL_HELLO_REQUEST = 0
sEMBEDTLS_SSL_CLIENT_HELLO : U32
sEMBEDTLS_SSL_CLIENT_HELLO = 1

{-*
 * \brief          Callback type: send data on the network.
 *
 * \note           That callback may be either blocking or non-blocking.
 *
 * \param ctx      Context for the send callback (typically a file descriptor)
 * \param buf      Buffer holding the data to send
 * \param len      Length of the data to send
 *
 * \return         The callback must return the number of bytes sent if any,
 *                 or a non-zero error code.
 *                 If performing non-blocking I/O, \c MBEDTLS_ERR_SSL_WANT_WRITE
 *                 must be returned when the operation would block.
 *
 * \note           The callback is allowed to send fewer bytes than requested.
 *                 It must always return the number of bytes actually sent.
 -}
type Sembedtls_ssl_send_t =
   ( CPointerTo (), 
   CPointerTo U8, 
   #Cogent_size_t ) -> U32

{- Defined below -}
type Sembedtls_ssl_session =
   Struct_Sembedtls_ssl_session
type Sembedtls_ssl_context =
   Struct_Sembedtls_ssl_context
type Sembedtls_ssl_config =
   Struct_Sembedtls_ssl_config

{- Defined in ssl_internal.h -}
type Sembedtls_ssl_transform =
   Struct_Sembedtls_ssl_transform
type Sembedtls_ssl_handshake_params =
   Struct_Sembedtls_ssl_handshake_params
type Sembedtls_ssl_sig_hash_set_t =
   Struct_Sembedtls_ssl_sig_hash_set_t
type Sembedtls_ssl_key_cert =
   Struct_Sembedtls_ssl_key_cert
type Sembedtls_ssl_flight_item =
   Struct_Sembedtls_ssl_flight_item
{-*
 * \brief           Callback type: start external signature operation.
 -}
type Sembedtls_ssl_async_sign_t =
   ( Sembedtls_ssl_context, 
   CPointerTo U8, 
   #Cogent_size_t ) -> U32

{-
 * This structure is used for storing current session data.
 -}
type Struct_Sembedtls_ssl_session =
   { 
   ciphersuite : U32, {-!< chosen ciphersuite -}
   id_len : #Cogent_size_t, {-!< session id length  -}
   id : #CArrayOf U8 }{-!< session identifier -}


{-*
 * SSL/TLS configuration to be shared between mbedtls_ssl_context structures.
 -}
type Struct_Sembedtls_ssl_config =
   { 
    {- Group items by size (largest first) to minimize padding overhead -}

    {-
     * Pointers
     -}

   ciphersuite_list : #CArrayOf (CPointerTo U32), {-!< allowed ciphersuites per version   -}

    {-* Callback for printing debug output                                  -}
   f_dbg : ( CPointerTo (), 

    {-* Callback for printing debug output                                  -}
   U32, 
   CPointerTo U8, 

    {-* Callback for printing debug output                                  -}
   U32, 
   CPointerTo U8 ) -> (), 
   p_dbg : CPointerTo (), {-!< context for the debug function     -}

    {-* Callback to customize X.509 certificate chain verification          -}
   f_vrfy : ( CPointerTo (), 

    {-* Callback to customize X.509 certificate chain verification          -}
   U32, 
   CPointerTo #Cogent_uint32_t ) -> U32, 
   p_vrfy : CPointerTo (), {-!< context for X.509 verify calllback -}
   f_async_sign_start : Sembedtls_ssl_async_sign_t, {-!< start asynchronous signature operation -}
   dhm_P : #Sembedtls_mpi, {-!< prime modulus for DHM              -}
   alpn_list : CPointerTo (CPointerTo U8), {-!< ordered list of protocols          -}

    {-
     * Flags (bitfields)
     -}

   cogent_bitfield1 : U32 }{-!< 0: client, 1: server               -}



type Struct_Sembedtls_ssl_context =
   { 
   conf : Sembedtls_ssl_config, {-!< configuration information          -}

    {-
     * Miscellaneous
     -}
   state : U32 }{-!< SSL handshake: current state     -}


type Sembedtls_ssl_cookie_write_t =
   ( CPointerTo (), 
   CPointerTo (CPointerTo U8), CPointerTo U8, 
   CPointerTo U8, #Cogent_size_t ) -> U32
