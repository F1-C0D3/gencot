#! /bin/csh -f

# Expand transitively all quoted include directives in the input.
# This is a filter from stdin to stdout with an additional directory list argument and an additional file name argument.
# The directory list uses ":" as separator and specifies the directories to be searched for included Files.
# For the current directory "." use the empty string "". Do not append a trailing "/" to directory pathnames.
# The file name is the full pathname of the processed file to prevent including itself.

if ( $#argv != 2) then
  echo "Error: Include directory search list and own file pathname expected as arguments."
  exit 0
endif

awk \
'BEGIN { \
   ndirs = split(ARGV[1], dirs, ":"); delete ARGV[1] \
   ownname = ARGV[2]; delete ARGV[2] \
   processed[ownname] = 1 \
   stackptr = 0 \
   input[stackptr] = "/dev/stdin" \
   curdir[stackptr] = "-" \
   lnr[stackptr] = 0 \
   curnam = "<stdin>" \
   print "# 1 \"" curnam "\"" \
   for (; stackptr >= 0; stackptr--) { \
     while ((getline < input[stackptr]) > 0) { \
       lnr[stackptr]++ \
       if ($0 ~ /^[[:blank:]]*#[[:blank:]]*include[[:blank:]]*\"/) { \
         gsub(/^[[:blank:]]*#[[:blank:]]*include[[:blank:]]*\"/, "#include \"") \
         $0 = $0 \
         ipath = substr($2,2,length($2)-2) \
         fpath = "" \
         if (curdir[stackptr] != "-") { \
           t = (curdir[stackptr] ipath) \
           if ((getline junk < t) > 0) { \
             close(t); fpath = t; \
           } \
         } \
         if (! fpath) { \
           for (i = 1; i <= ndirs; i++) { \
             t = (dirs[i] (dirs[i]?"/":"") ipath) \
             if ((getline junk < t) > 0) { \
               close(t); fpath = t; break; \
             } \
           } \
         } \
         if (! fpath) { \
           printf("cannot find %s (included in %s)\n", ipath, input[stackptr]) > "/dev/stderr" \
           continue \
         } \
         printf("# 1 \"%s\" 1\n", fpath) \
         if (! (fpath in processed)) { \
           processed[fpath] = 1 \
           input[++stackptr] = fpath \
           flen = split(fpath,apath,"/") \
           hdir = ""; for (i = 1; i < flen; i++) hdir = hdir apath[i] "/" \
           curdir[stackptr] = hdir \
           lnr[stackptr] = 0 \
         } \
         else printf("# %d \"%s\" 2\n", lnr[stackptr]+1, input[stackptr] == "/dev/stdin"?curnam:input[stackptr]) \
       } \
       else if ($0 ~ /^[[:blank:]]*#[[:blank:]]*[[:digit:]]+/) { \
         gsub(/^[[:blank:]]*#[[:blank:]]*/, "# ") \
         $0 = $0 \
         lnr[stackptr] = $2 - 1 \
         if (stackptr == 0) curnam = substr($3,2,length($3)-2) \
         print \
       } \
       else { \
         print; continue \
       } \
     } \
     if (stackptr > 0) { \
       printf("# %d \"%s\" 2\n", lnr[stackptr-1]+1, input[stackptr-1] == "/dev/stdin"?curnam:input[stackptr-1]) \
     } \
     close(input[stackptr]) \
   } \
}' $1 $2

# documentation:
# 
# The implementation is based on a stack where each level corresponds to one transitive included file. Variable
# stackptr keeps track of the level. The original input file corresponds to level 0, every included file increases
# the level. For each level the following information is stored in arrays:
# - input: the full file pathname, either absolute or relative to the current directory of the awk process. Used
#   for reading the input with getline. For level 0 it is /dev/stdin. It is also used in the generated
#   line directives, here for level 0 <stdin> is used instead.
# - curdir: the full directory pathname of the file. Used for searching included files. For level 0 it is "-".
#   Otherwise it has a trailing "/" or is "" for the current directory of the awk process.
# - lnr: the current line number in the file. It is the number of the last line read with getline on the level.
# For level 0 also the current file name is stored in variable curname. This is usually "<stdin>" but can be
# modified by explicit line directives in the input file, to support "included" information on level 0.
#
# Implementation in awk:
# - The program consists only of a BEGIN rule, it reads all input lines and the lines of all included
#   files explicitly with getline.
# - The argument directory list is read into the array dirs, the number of directories in the list is stored in ndirs.
# - For reading the standard input on level 0 with getline the pseudo pathname /dev/stdin is used which is 
#   interpreted by awk.
# - The for loop processes one file in each iteration. After each file the stack is popped by decrementing stackptr.
#   When it becomes negative the file on level 0 is finished and the program ends.
# - The while loop processes one line in the file of the current level. It processes include directives and
#   line directives, all other lines are copied to the output without modifications.
# - An include directive may be written with or without whitespace before and after the include keyword and at
#   the beginning of the line. All these possibilities are covered by the regular expression
#     /^[[:blank:]]*#[[:blank:]]*include[[:blank:]]*\"/
#   Due to the quote at the end it matches only quoted include directives, no system include directives.
#   The matched include directive is then normalized by creating the form where there is only one space after 
#   the keyword. The statement $0 = $0 is used to reprocess the input line so that the quoted file name is in 
#   field $2. The quotes are removed and the result is stored in ipath.
# - Searching the included file is implemented by constructing the possible file name in t and trying to read 
#   from the file with getline. When this succeeds, the file has been found.
# - ipath is first searched using curdir on the current level, then the directories in dirs. If found, fpath
#   is set to the pathname used for the successful file access.
# - Multiple includes are prevented using the boolean array processed. It uses the full pathname of every included
#   file as index. Upon the first include the value is set to 1.
# - The line directive for the included file is generated whenever the file ahas been found, even if this is
#   a repeated include.
# - Upon first include of a file, a new level is pushed onto the stack. input is the full file pathname fpath, curdir
#   is derived from fpath, and lnr is set to 0. Upon a repeated include only the final line directive is generated.
# - If a line directive is found in the input on level 0, it is used to update curnam and lnr on the current level.
#   On all other levels only lnr is updated but the filename is ignored. That implies that in included files line
#   directives may never signal switching to another input file. In all cases, line directives are copied to the
#   output without modifications.
# - After the while loop we generate the final line directive after the included file. Since the stack has not yet
#   been popped we explicitly address the next lower level by stackptr-1. At the end of the main input file on
#   level 0 no line directive is generated.
