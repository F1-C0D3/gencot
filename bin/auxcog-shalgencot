#! /bin/sh

# Generate an Isabelle theory for the extended shallow embedding (core or HOL-tupled). Intended to be applied to 
# X_ShallowShared.thy or X_ShallowShared_Tuples.thy generated by Cogent.
# This is a filter from stdin to stdout with an additional filename argument.
# The argument file must contain a sequence of lines of the form
#   <id>: <id>

if [ $# != 1 ]
then
  echo "Error: Single file name expected as argument."
  exit 0
fi

awk \
'BEGIN { 
   cfile = ARGV[1]; delete ARGV[1]
   gencot_theories = "Default Memory MayNull CPointer CArray"
   common_theories = "common"
   nr_sizes = 0
   nr_funs = split("getArr setArr modifyArr modifyArrDflt modrefArr modrefArrDflt", funs)
 } 
{
  if ($1 == "theory" && NF == 2) {
    if ($2 ~ /_ShallowShared_Tuples$/) { tup = "_Tuples"; prfnam = substr($2,1,length($2)-21) }
    else if ($2 ~ /_ShallowShared$/) { tup = ""; prfnam = substr($2,1,length($2)-14) }
    else {
      printf("Error: auxcog-shalgencot input must be a theory named X_ShallowShared or X_ShallowShared_Tuples.\n")
      exited = 1
      exit 1
    }
    printf("theory %s_Shallow_Gencot%s\n", prfnam, tup)
    printf("  imports \"%s_ShallowShared%s\"\n", prfnam, tup)
    while ((getline cline < cfile) > 0) { 
      if (2 == split(cline,a)) { 
        if (a[1] == "gencot:" && match(gencot_theories,a[2])) printf("  \"Gencot_%s%s\"\n", a[2], tup)
        if (a[1] == "common:" && match(common_theories,a[2])) printf("  \"CogentCommon_%s%s\"\n", a[2], tup)
      } 
    }
    close(cfile) 
    printf("  \"HOL-Library.Adhoc_Overloading\"\n")
    printf("begin\n\n")
  } else if ($1 == "type_synonym" && substr($3,1,4) == "CArr" && $7 == "FixedList") {
    size = substr($3,5,length($3)-12)
    nr_sizes += 1
    sizes[nr_sizes] = size
    fixtyp = substr($5,2,length($5)-1) " " $6 " " $7
    printf("definition arr%s\\<^sub>T\\<^sub>f :: \"%s CArr%s\\<^sub>T \\<Rightarrow> %s \"\n",size,$2,size,fixtyp)
    printf("  where \"arr%s\\<^sub>T\\<^sub>f arr \\<equiv> arr%s\\<^sub>f arr\"\n",size,size)
    printf("interpretation CArrFuns%s: CArrFuns arr%s\\<^sub>T\\<^sub>f CArr%s.make .\n", size, size, size)
    printf("adhoc_overloading %s CArrFuns%s.%sFxd\n", funs[1], size, funs[1])
    for (i=2; i <= nr_funs; i++) printf("  and %s CArrFuns%s.%sFxd\n", funs[i], size, funs[i])
    printf("\n")
  }
}
END {
  if (exited == "") {
    print "end"
  }
}' $1

# documentation:
#
# The generated theory has the following form:
# - the name of the input theory must be X_ShallowShared with an optional suffix _Tuples, which
#   is stored in the variable tup. Otherwise an error message is written to stderr.
# - the name of the output theory is X_Shallow_Gencot with the tup-suffix appended.
# - the output theory imports the input theory, "HOL-Library.Adhoc_Overloading"
#   and for every line 
#     gencot: id
#   in the argument file for which id is in gencot_theories the theory Gencot_id with the tup-suffix 
#   appended, and for every line
#     common: id
#   in the argument file for which id is in common_theories the theory CogentCommon_id with the tup-suffix 
#   appended.
# - the output theory contains for every type synonym definition of the form
#     type_synonym 'el CArr<size>\<^sub>T = "<fixtyp> CArr<size>"
#   in the input theory a definition of the form 
#     definition arr<size>\<^sub>T\<^sub>f :: "'el CArr<size>\<^sub>T \<Rightarrow> <fixtyp>"
#       where "arr<size>\<^sub>T\<^sub>f arr \<equiv> arr<size>\<^sub>f arr"
#   and a locale interpretation of the form
#     interpretation CArrFuns<size>: CArrFuns arr<size>\<^sub>T\<^sub>f CArr<size>.make .
#   and an adhoc overloading of the form
#     adhoc_overloading getArr CArrFuns<size>.getArrFxd
#       and setArr CArrFuns<size>.setArrFxd
#       ...
#   for all Gencot array operations.
#
# The list of theories which can be imported is specified by the string variables 
# gencot_theories and common_thories as a sequence of words separated by blanks.
# The list of array functions is specified in the array funs of length nr_funs,
#
# The input is read until a line of the form "theory <name>" is found. Using the <name>, the tup-suffix
# is determined and the output theory header is generated. The argument file is read using getline to 
# generate the corresponding imports.
# 
# Then the rest of the input is read and for each matching type synonym definition the 
# interpretation and adhoc overloading is generated and the size is stored in the array sizes,
# counting the entries in nr_sizes.
# 
# In the END rule the theory is finished by an "end".
#
# Implementation in awk:
# - The filename argument for the comment file must be copied and removed from the argument list ARGV
#   to prevent its processing as normal input to awk. The argument file is explicitly read by getline.
# - The theory lists gencot_theories and common_thories are defined in the BEGIN rule.
# - The function array is filled in the BEGIN rule by splitting a string of words.
# - Since in '...' the ' cannot be escaped, we avoid using it in match expressions and print it 
#   by reusing parts of the input.
# - To test whether an entry from the argument file is a member of a theory list the awk builtin function
#   match is used. The theory list is specified as the string, the entry is used as regexp. If a match
#   is found the function returns the index of the first position of the match (which is equivalent to true),
#   otherwise it returns 0 (which is equivalent to false). Note that this works only if no theory name 
#   is a substring of another theory name in the list.
