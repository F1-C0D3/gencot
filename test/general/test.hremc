# 1 "<stdin>"
# 12 "<stdin>"
#ifndef MBEDTLS_SSL_H
#define MBEDTLS_SSL_H

#if !defined(MBEDTLS_CONFIG_FILE)
# 1 "include/mbedtls/config.h" 1
# 29 "include/mbedtls/config.h"
#ifndef MBEDTLS_CONFIG_H
#define MBEDTLS_CONFIG_H

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
#define _CRT_SECURE_NO_DEPRECATE 1
#endif
# 61 "include/mbedtls/config.h"
#define MBEDTLS_HAVE_ASM
# 135 "include/mbedtls/config.h"
#define MBEDTLS_HAVE_TIME
# 147 "include/mbedtls/config.h"
#define MBEDTLS_HAVE_TIME_DATE
# 528 "include/mbedtls/config.h"
#define MBEDTLS_CIPHER_MODE_CBC






#define MBEDTLS_CIPHER_MODE_CFB






#define MBEDTLS_CIPHER_MODE_CTR






#define MBEDTLS_CIPHER_MODE_OFB






#define MBEDTLS_CIPHER_MODE_XTS
# 602 "include/mbedtls/config.h"
#define MBEDTLS_CIPHER_PADDING_PKCS7
#define MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS
#define MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN
#define MBEDTLS_CIPHER_PADDING_ZEROS
# 636 "include/mbedtls/config.h"
#define MBEDTLS_REMOVE_ARC4_CIPHERSUITES
# 646 "include/mbedtls/config.h"
#define MBEDTLS_ECP_DP_SECP192R1_ENABLED
#define MBEDTLS_ECP_DP_SECP224R1_ENABLED
#define MBEDTLS_ECP_DP_SECP256R1_ENABLED
#define MBEDTLS_ECP_DP_SECP384R1_ENABLED
#define MBEDTLS_ECP_DP_SECP521R1_ENABLED
#define MBEDTLS_ECP_DP_SECP192K1_ENABLED
#define MBEDTLS_ECP_DP_SECP224K1_ENABLED
#define MBEDTLS_ECP_DP_SECP256K1_ENABLED
#define MBEDTLS_ECP_DP_BP256R1_ENABLED
#define MBEDTLS_ECP_DP_BP384R1_ENABLED
#define MBEDTLS_ECP_DP_BP512R1_ENABLED
#define MBEDTLS_ECP_DP_CURVE25519_ENABLED
#define MBEDTLS_ECP_DP_CURVE448_ENABLED
# 669 "include/mbedtls/config.h"
#define MBEDTLS_ECP_NIST_OPTIM
# 683 "include/mbedtls/config.h"
#define MBEDTLS_ECDSA_DETERMINISTIC
# 705 "include/mbedtls/config.h"
#define MBEDTLS_KEY_EXCHANGE_PSK_ENABLED
# 736 "include/mbedtls/config.h"
#define MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED
# 756 "include/mbedtls/config.h"
#define MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED
# 781 "include/mbedtls/config.h"
#define MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
# 809 "include/mbedtls/config.h"
#define MBEDTLS_KEY_EXCHANGE_RSA_ENABLED
# 842 "include/mbedtls/config.h"
#define MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED
# 867 "include/mbedtls/config.h"
#define MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
# 891 "include/mbedtls/config.h"
#define MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
# 915 "include/mbedtls/config.h"
#define MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED
# 939 "include/mbedtls/config.h"
#define MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
# 972 "include/mbedtls/config.h"
#define MBEDTLS_PK_PARSE_EC_EXTENDED
# 987 "include/mbedtls/config.h"
#define MBEDTLS_ERROR_STRERROR_DUMMY
# 996 "include/mbedtls/config.h"
#define MBEDTLS_GENPRIME






#define MBEDTLS_FS_IO
# 1105 "include/mbedtls/config.h"
#define MBEDTLS_PK_RSA_ALT_SUPPORT
# 1116 "include/mbedtls/config.h"
#define MBEDTLS_PKCS1_V15
# 1127 "include/mbedtls/config.h"
#define MBEDTLS_PKCS1_V21
# 1145 "include/mbedtls/config.h"
#define MBEDTLS_SELF_TEST
# 1175 "include/mbedtls/config.h"
#define MBEDTLS_SSL_ALL_ALERT_MESSAGES
# 1220 "include/mbedtls/config.h"
#define MBEDTLS_SSL_ENCRYPT_THEN_MAC
# 1238 "include/mbedtls/config.h"
#define MBEDTLS_SSL_EXTENDED_MASTER_SECRET
# 1255 "include/mbedtls/config.h"
#define MBEDTLS_SSL_FALLBACK_SCSV
# 1277 "include/mbedtls/config.h"
#define MBEDTLS_SSL_CBC_RECORD_SPLITTING
# 1299 "include/mbedtls/config.h"
#define MBEDTLS_SSL_RENEGOTIATION
# 1328 "include/mbedtls/config.h"
#define MBEDTLS_SSL_MAX_FRAGMENT_LENGTH
# 1352 "include/mbedtls/config.h"
#define MBEDTLS_SSL_PROTO_TLS1
# 1364 "include/mbedtls/config.h"
#define MBEDTLS_SSL_PROTO_TLS1_1
# 1376 "include/mbedtls/config.h"
#define MBEDTLS_SSL_PROTO_TLS1_2
# 1391 "include/mbedtls/config.h"
#define MBEDTLS_SSL_PROTO_DTLS
# 1400 "include/mbedtls/config.h"
#define MBEDTLS_SSL_ALPN
# 1415 "include/mbedtls/config.h"
#define MBEDTLS_SSL_DTLS_ANTI_REPLAY
# 1433 "include/mbedtls/config.h"
#define MBEDTLS_SSL_DTLS_HELLO_VERIFY
# 1449 "include/mbedtls/config.h"
#define MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE
# 1460 "include/mbedtls/config.h"
#define MBEDTLS_SSL_DTLS_BADMAC_LIMIT
# 1474 "include/mbedtls/config.h"
#define MBEDTLS_SSL_SESSION_TICKETS
# 1484 "include/mbedtls/config.h"
#define MBEDTLS_SSL_EXPORT_KEYS
# 1495 "include/mbedtls/config.h"
#define MBEDTLS_SSL_SERVER_NAME_INDICATION
# 1504 "include/mbedtls/config.h"
#define MBEDTLS_SSL_TRUNCATED_HMAC
# 1563 "include/mbedtls/config.h"
#define MBEDTLS_VERSION_FEATURES
# 1599 "include/mbedtls/config.h"
#define MBEDTLS_X509_CHECK_KEY_USAGE
# 1612 "include/mbedtls/config.h"
#define MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE
# 1622 "include/mbedtls/config.h"
#define MBEDTLS_X509_RSASSA_PSS_SUPPORT
# 1669 "include/mbedtls/config.h"
#define MBEDTLS_AESNI_C
# 1744 "include/mbedtls/config.h"
#define MBEDTLS_AES_C
# 1772 "include/mbedtls/config.h"
#define MBEDTLS_ARC4_C
# 1786 "include/mbedtls/config.h"
#define MBEDTLS_ASN1_PARSE_C
# 1800 "include/mbedtls/config.h"
#define MBEDTLS_ASN1_WRITE_C
# 1812 "include/mbedtls/config.h"
#define MBEDTLS_BASE64_C
# 1829 "include/mbedtls/config.h"
#define MBEDTLS_BIGNUM_C
# 1838 "include/mbedtls/config.h"
#define MBEDTLS_BLOWFISH_C
# 1893 "include/mbedtls/config.h"
#define MBEDTLS_CAMELLIA_C
# 1959 "include/mbedtls/config.h"
#define MBEDTLS_CCM_C
# 1971 "include/mbedtls/config.h"
#define MBEDTLS_CERTS_C
# 1980 "include/mbedtls/config.h"
#define MBEDTLS_CHACHA20_C
# 1991 "include/mbedtls/config.h"
#define MBEDTLS_CHACHAPOLY_C
# 2003 "include/mbedtls/config.h"
#define MBEDTLS_CIPHER_C
# 2030 "include/mbedtls/config.h"
#define MBEDTLS_CTR_DRBG_C
# 2044 "include/mbedtls/config.h"
#define MBEDTLS_DEBUG_C
# 2073 "include/mbedtls/config.h"
#define MBEDTLS_DES_C
# 2094 "include/mbedtls/config.h"
#define MBEDTLS_DHM_C
# 2110 "include/mbedtls/config.h"
#define MBEDTLS_ECDH_C
# 2125 "include/mbedtls/config.h"
#define MBEDTLS_ECDSA_C
# 2158 "include/mbedtls/config.h"
#define MBEDTLS_ECP_C
# 2172 "include/mbedtls/config.h"
#define MBEDTLS_ENTROPY_C
# 2184 "include/mbedtls/config.h"
#define MBEDTLS_ERROR_C
# 2198 "include/mbedtls/config.h"
#define MBEDTLS_GCM_C
# 2236 "include/mbedtls/config.h"
#define MBEDTLS_HKDF_C
# 2250 "include/mbedtls/config.h"
#define MBEDTLS_HMAC_DRBG_C
# 2275 "include/mbedtls/config.h"
#define MBEDTLS_MD_C
# 2331 "include/mbedtls/config.h"
#define MBEDTLS_MD5_C
# 2366 "include/mbedtls/config.h"
#define MBEDTLS_NET_C
# 2389 "include/mbedtls/config.h"
#define MBEDTLS_OID_C
# 2403 "include/mbedtls/config.h"
#define MBEDTLS_PADLOCK_C
# 2421 "include/mbedtls/config.h"
#define MBEDTLS_PEM_PARSE_C
# 2437 "include/mbedtls/config.h"
#define MBEDTLS_PEM_WRITE_C
# 2453 "include/mbedtls/config.h"
#define MBEDTLS_PK_C
# 2468 "include/mbedtls/config.h"
#define MBEDTLS_PK_PARSE_C
# 2482 "include/mbedtls/config.h"
#define MBEDTLS_PK_WRITE_C
# 2495 "include/mbedtls/config.h"
#define MBEDTLS_PKCS5_C
# 2526 "include/mbedtls/config.h"
#define MBEDTLS_PKCS12_C
# 2546 "include/mbedtls/config.h"
#define MBEDTLS_PLATFORM_C
# 2556 "include/mbedtls/config.h"
#define MBEDTLS_POLY1305_C
# 2567 "include/mbedtls/config.h"
#define MBEDTLS_RIPEMD160_C
# 2586 "include/mbedtls/config.h"
#define MBEDTLS_RSA_C
# 2608 "include/mbedtls/config.h"
#define MBEDTLS_SHA1_C
# 2625 "include/mbedtls/config.h"
#define MBEDTLS_SHA256_C
# 2640 "include/mbedtls/config.h"
#define MBEDTLS_SHA512_C
# 2652 "include/mbedtls/config.h"
#define MBEDTLS_SSL_CACHE_C
# 2662 "include/mbedtls/config.h"
#define MBEDTLS_SSL_COOKIE_C
# 2674 "include/mbedtls/config.h"
#define MBEDTLS_SSL_TICKET_C
# 2688 "include/mbedtls/config.h"
#define MBEDTLS_SSL_CLI_C
# 2702 "include/mbedtls/config.h"
#define MBEDTLS_SSL_SRV_C
# 2718 "include/mbedtls/config.h"
#define MBEDTLS_SSL_TLS_C
# 2763 "include/mbedtls/config.h"
#define MBEDTLS_TIMING_C
# 2774 "include/mbedtls/config.h"
#define MBEDTLS_VERSION_C
# 2791 "include/mbedtls/config.h"
#define MBEDTLS_X509_USE_C
# 2807 "include/mbedtls/config.h"
#define MBEDTLS_X509_CRT_PARSE_C
# 2821 "include/mbedtls/config.h"
#define MBEDTLS_X509_CRL_PARSE_C
# 2835 "include/mbedtls/config.h"
#define MBEDTLS_X509_CSR_PARSE_C
# 2848 "include/mbedtls/config.h"
#define MBEDTLS_X509_CREATE_C
# 2861 "include/mbedtls/config.h"
#define MBEDTLS_X509_CRT_WRITE_C
# 2874 "include/mbedtls/config.h"
#define MBEDTLS_X509_CSR_WRITE_C
# 2884 "include/mbedtls/config.h"
#define MBEDTLS_XTEA_C
# 3081 "include/mbedtls/config.h"
#define MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE
# 3108 "include/mbedtls/config.h"
#if defined(TARGET_LIKE_MBED) && defined(YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE)
#include YOTTA_CFG_MBEDTLS_TARGET_CONFIG_FILE
#endif
# 3119 "include/mbedtls/config.h"
#if defined(YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE)
#include YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE
#elif defined(MBEDTLS_USER_CONFIG_FILE)
#include MBEDTLS_USER_CONFIG_FILE
#endif

#endif
# 17 "<stdin>" 2
#else
#include MBEDTLS_CONFIG_FILE
#endif


# 1 "include/mbedtls/ecp.h" 1
# 36 "include/mbedtls/ecp.h"
#ifndef MBEDTLS_ECP_H
#define MBEDTLS_ECP_H

# 1 "include/mbedtls/bignum.h" 1
# 24 "include/mbedtls/bignum.h"
#ifndef MBEDTLS_BIGNUM_H
#define MBEDTLS_BIGNUM_H

#if !defined(MBEDTLS_CONFIG_FILE)
# 1 "include/mbedtls/config.h" 1
# 29 "include/mbedtls/bignum.h" 2
#else
#include MBEDTLS_CONFIG_FILE
#endif

#include <stddef.h>
#include <stdint.h>

#if defined(MBEDTLS_FS_IO)
#include <stdio.h>
#endif

#define MBEDTLS_ERR_MPI_FILE_IO_ERROR -0x0002
#define MBEDTLS_ERR_MPI_BAD_INPUT_DATA -0x0004
#define MBEDTLS_ERR_MPI_INVALID_CHARACTER -0x0006
#define MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL -0x0008
#define MBEDTLS_ERR_MPI_NEGATIVE_VALUE -0x000A
#define MBEDTLS_ERR_MPI_DIVISION_BY_ZERO -0x000C
#define MBEDTLS_ERR_MPI_NOT_ACCEPTABLE -0x000E
#define MBEDTLS_ERR_MPI_ALLOC_FAILED -0x0010

#define MBEDTLS_MPI_CHK(f) do { if( ( ret = f ) != 0 ) goto cleanup; } while( 0 )




#define MBEDTLS_MPI_MAX_LIMBS 10000

#if !defined(MBEDTLS_MPI_WINDOW_SIZE)
# 66 "include/mbedtls/bignum.h"
#define MBEDTLS_MPI_WINDOW_SIZE 6
#endif

#if !defined(MBEDTLS_MPI_MAX_SIZE)







#define MBEDTLS_MPI_MAX_SIZE 1024
#endif

#define MBEDTLS_MPI_MAX_BITS ( 8 * MBEDTLS_MPI_MAX_SIZE )
# 100 "include/mbedtls/bignum.h"
#define MBEDTLS_MPI_MAX_BITS_SCALE100 ( 100 * MBEDTLS_MPI_MAX_BITS )
#define MBEDTLS_LN_2_DIV_LN_10_SCALE100 332
#define MBEDTLS_MPI_RW_BUFFER_SIZE ( ((MBEDTLS_MPI_MAX_BITS_SCALE100 + MBEDTLS_LN_2_DIV_LN_10_SCALE100 - 1) / MBEDTLS_LN_2_DIV_LN_10_SCALE100) + 10 + 6 )
# 114 "include/mbedtls/bignum.h"
#if !defined(MBEDTLS_HAVE_INT32)
    #if defined(_MSC_VER) && defined(_M_AMD64)

        #if !defined(MBEDTLS_HAVE_INT64)
            #define MBEDTLS_HAVE_INT64
        #endif
        typedef int64_t mbedtls_mpi_sint;
        typedef uint64_t mbedtls_mpi_uint;
    #elif defined(__GNUC__) && ( \
        defined(__amd64__) || defined(__x86_64__) || \
        defined(__ppc64__) || defined(__powerpc64__) || \
        defined(__ia64__) || defined(__alpha__) || \
        ( defined(__sparc__) && defined(__arch64__) ) || \
        defined(__s390x__) || defined(__mips64) )
        #if !defined(MBEDTLS_HAVE_INT64)
            #define MBEDTLS_HAVE_INT64
        #endif
        typedef int64_t mbedtls_mpi_sint;
        typedef uint64_t mbedtls_mpi_uint;
        #if !defined(MBEDTLS_NO_UDBL_DIVISION)

            typedef unsigned int mbedtls_t_udbl __attribute__((mode(TI)));
            #define MBEDTLS_HAVE_UDBL
        #endif
    #elif defined(__ARMCC_VERSION) && defined(__aarch64__)




        #if !defined(MBEDTLS_HAVE_INT64)
            #define MBEDTLS_HAVE_INT64
        #endif
        typedef int64_t mbedtls_mpi_sint;
        typedef uint64_t mbedtls_mpi_uint;
        #if !defined(MBEDTLS_NO_UDBL_DIVISION)

            typedef __uint128_t mbedtls_t_udbl;
            #define MBEDTLS_HAVE_UDBL
        #endif
    #elif defined(MBEDTLS_HAVE_INT64)

        typedef int64_t mbedtls_mpi_sint;
        typedef uint64_t mbedtls_mpi_uint;
    #endif
#endif

#if !defined(MBEDTLS_HAVE_INT64)

    #if !defined(MBEDTLS_HAVE_INT32)
        #define MBEDTLS_HAVE_INT32
    #endif
    typedef int32_t mbedtls_mpi_sint;
    typedef uint32_t mbedtls_mpi_uint;
    #if !defined(MBEDTLS_NO_UDBL_DIVISION)
        typedef uint64_t mbedtls_t_udbl;
        #define MBEDTLS_HAVE_UDBL
    #endif
#endif

#ifdef __cplusplus
extern "C" {
#endif




typedef struct mbedtls_mpi
{
    int s;
    size_t n;
    mbedtls_mpi_uint *p;
}
mbedtls_mpi;
# 195 "include/mbedtls/bignum.h"
void mbedtls_mpi_init( mbedtls_mpi *X );






void mbedtls_mpi_free( mbedtls_mpi *X );
# 215 "include/mbedtls/bignum.h"
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs );
# 230 "include/mbedtls/bignum.h"
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs );
# 241 "include/mbedtls/bignum.h"
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y );







void mbedtls_mpi_swap( mbedtls_mpi *X, mbedtls_mpi *Y );
# 268 "include/mbedtls/bignum.h"
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign );
# 287 "include/mbedtls/bignum.h"
int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char assign );
# 298 "include/mbedtls/bignum.h"
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z );
# 308 "include/mbedtls/bignum.h"
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos );
# 324 "include/mbedtls/bignum.h"
int mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val );
# 334 "include/mbedtls/bignum.h"
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X );
# 344 "include/mbedtls/bignum.h"
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X );






size_t mbedtls_mpi_size( const mbedtls_mpi *X );
# 362 "include/mbedtls/bignum.h"
int mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s );
# 380 "include/mbedtls/bignum.h"
int mbedtls_mpi_write_string( const mbedtls_mpi *X, int radix,
                              char *buf, size_t buflen, size_t *olen );

#if defined(MBEDTLS_FS_IO)
# 404 "include/mbedtls/bignum.h"
int mbedtls_mpi_read_file( mbedtls_mpi *X, int radix, FILE *fin );
# 418 "include/mbedtls/bignum.h"
int mbedtls_mpi_write_file( const char *p, const mbedtls_mpi *X, int radix, FILE *fout );
#endif
# 431 "include/mbedtls/bignum.h"
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen );
# 445 "include/mbedtls/bignum.h"
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen );
# 456 "include/mbedtls/bignum.h"
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count );
# 467 "include/mbedtls/bignum.h"
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count );
# 479 "include/mbedtls/bignum.h"
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y );
# 491 "include/mbedtls/bignum.h"
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y );
# 503 "include/mbedtls/bignum.h"
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z );
# 515 "include/mbedtls/bignum.h"
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B );
# 527 "include/mbedtls/bignum.h"
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B );
# 539 "include/mbedtls/bignum.h"
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B );
# 551 "include/mbedtls/bignum.h"
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B );
# 563 "include/mbedtls/bignum.h"
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b );
# 575 "include/mbedtls/bignum.h"
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b );
# 587 "include/mbedtls/bignum.h"
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B );
# 601 "include/mbedtls/bignum.h"
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b );
# 617 "include/mbedtls/bignum.h"
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B );
# 633 "include/mbedtls/bignum.h"
int mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, mbedtls_mpi_sint b );
# 647 "include/mbedtls/bignum.h"
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B );
# 661 "include/mbedtls/bignum.h"
int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b );
# 681 "include/mbedtls/bignum.h"
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR );
# 698 "include/mbedtls/bignum.h"
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng );
# 712 "include/mbedtls/bignum.h"
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B );
# 726 "include/mbedtls/bignum.h"
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N );
# 739 "include/mbedtls/bignum.h"
int mbedtls_mpi_is_prime( const mbedtls_mpi *X,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng );
# 757 "include/mbedtls/bignum.h"
int mbedtls_mpi_gen_prime( mbedtls_mpi *X, size_t nbits, int dh_flag,
                   int (*f_rng)(void *, unsigned char *, size_t),
                   void *p_rng );






int mbedtls_mpi_self_test( int verbose );

#ifdef __cplusplus
}
#endif

#endif
# 40 "include/mbedtls/ecp.h" 2




#define MBEDTLS_ERR_ECP_BAD_INPUT_DATA -0x4F80
#define MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL -0x4F00
#define MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE -0x4E80
#define MBEDTLS_ERR_ECP_VERIFY_FAILED -0x4E00
#define MBEDTLS_ERR_ECP_ALLOC_FAILED -0x4D80
#define MBEDTLS_ERR_ECP_RANDOM_FAILED -0x4D00
#define MBEDTLS_ERR_ECP_INVALID_KEY -0x4C80
#define MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH -0x4C00
#define MBEDTLS_ERR_ECP_HW_ACCEL_FAILED -0x4B80

#ifdef __cplusplus
extern "C" {
#endif
# 67 "include/mbedtls/ecp.h"
typedef enum
{
    MBEDTLS_ECP_DP_NONE = 0,
    MBEDTLS_ECP_DP_SECP192R1,
    MBEDTLS_ECP_DP_SECP224R1,
    MBEDTLS_ECP_DP_SECP256R1,
    MBEDTLS_ECP_DP_SECP384R1,
    MBEDTLS_ECP_DP_SECP521R1,
    MBEDTLS_ECP_DP_BP256R1,
    MBEDTLS_ECP_DP_BP384R1,
    MBEDTLS_ECP_DP_BP512R1,
    MBEDTLS_ECP_DP_CURVE25519,
    MBEDTLS_ECP_DP_SECP192K1,
    MBEDTLS_ECP_DP_SECP224K1,
    MBEDTLS_ECP_DP_SECP256K1,
    MBEDTLS_ECP_DP_CURVE448,
} mbedtls_ecp_group_id;






#define MBEDTLS_ECP_DP_MAX 12




typedef struct mbedtls_ecp_curve_info
{
    mbedtls_ecp_group_id grp_id;
    uint16_t tls_id;
    uint16_t bit_size;
    const char *name;
} mbedtls_ecp_curve_info;
# 114 "include/mbedtls/ecp.h"
typedef struct mbedtls_ecp_point
{
    mbedtls_mpi X;
    mbedtls_mpi Y;
    mbedtls_mpi Z;
}
mbedtls_ecp_point;

#if !defined(MBEDTLS_ECP_ALT)
# 159 "include/mbedtls/ecp.h"
typedef struct mbedtls_ecp_group
{
    mbedtls_ecp_group_id id;
    mbedtls_mpi P;
    mbedtls_mpi A;

    mbedtls_mpi B;

    mbedtls_ecp_point G;
    mbedtls_mpi N;
    size_t pbits;
    size_t nbits;


    unsigned int h;
    int (*modp)(mbedtls_mpi *);

    int (*t_pre)(mbedtls_ecp_point *, void *);
    int (*t_post)(mbedtls_ecp_point *, void *);
    void *t_data;
    mbedtls_ecp_point *T;
    size_t T_size;
}
mbedtls_ecp_group;
# 192 "include/mbedtls/ecp.h"
#if !defined(MBEDTLS_ECP_MAX_BITS)



#define MBEDTLS_ECP_MAX_BITS 521
#endif

#define MBEDTLS_ECP_MAX_BYTES ( ( MBEDTLS_ECP_MAX_BITS + 7 ) / 8 )
#define MBEDTLS_ECP_MAX_PT_LEN ( 2 * MBEDTLS_ECP_MAX_BYTES + 1 )

#if !defined(MBEDTLS_ECP_WINDOW_SIZE)
# 222 "include/mbedtls/ecp.h"
#define MBEDTLS_ECP_WINDOW_SIZE 6
#endif

#if !defined(MBEDTLS_ECP_FIXED_POINT_OPTIM)
# 237 "include/mbedtls/ecp.h"
#define MBEDTLS_ECP_FIXED_POINT_OPTIM 1
#endif



#endif
# 252 "include/mbedtls/ecp.h"
typedef struct mbedtls_ecp_keypair
{
    mbedtls_ecp_group grp;
    mbedtls_mpi d;
    mbedtls_ecp_point Q;
}
mbedtls_ecp_keypair;




#define MBEDTLS_ECP_PF_UNCOMPRESSED 0
#define MBEDTLS_ECP_PF_COMPRESSED 1




#define MBEDTLS_ECP_TLS_NAMED_CURVE 3
# 278 "include/mbedtls/ecp.h"
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_list( void );
# 288 "include/mbedtls/ecp.h"
const mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void );
# 299 "include/mbedtls/ecp.h"
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id );
# 310 "include/mbedtls/ecp.h"
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id );
# 321 "include/mbedtls/ecp.h"
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_name( const char *name );






void mbedtls_ecp_point_init( mbedtls_ecp_point *pt );
# 339 "include/mbedtls/ecp.h"
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp );






void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key );






void mbedtls_ecp_point_free( mbedtls_ecp_point *pt );





void mbedtls_ecp_group_free( mbedtls_ecp_group *grp );





void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key );
# 377 "include/mbedtls/ecp.h"
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q );
# 389 "include/mbedtls/ecp.h"
int mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src );
# 399 "include/mbedtls/ecp.h"
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt );
# 409 "include/mbedtls/ecp.h"
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt );
# 423 "include/mbedtls/ecp.h"
int mbedtls_ecp_point_cmp( const mbedtls_ecp_point *P,
                           const mbedtls_ecp_point *Q );
# 438 "include/mbedtls/ecp.h"
int mbedtls_ecp_point_read_string( mbedtls_ecp_point *P, int radix,
                           const char *x, const char *y );
# 455 "include/mbedtls/ecp.h"
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *P,
                            int format, size_t *olen,
                            unsigned char *buf, size_t buflen );
# 478 "include/mbedtls/ecp.h"
int mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,
                           const unsigned char *buf, size_t ilen );
# 496 "include/mbedtls/ecp.h"
int mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
                        const unsigned char **buf, size_t len );
# 514 "include/mbedtls/ecp.h"
int mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,
                         int format, size_t *olen,
                         unsigned char *buf, size_t blen );
# 534 "include/mbedtls/ecp.h"
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id );
# 550 "include/mbedtls/ecp.h"
int mbedtls_ecp_tls_read_group( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len );
# 563 "include/mbedtls/ecp.h"
int mbedtls_ecp_tls_write_group( const mbedtls_ecp_group *grp, size_t *olen,
                         unsigned char *buf, size_t blen );
# 594 "include/mbedtls/ecp.h"
int mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );
# 620 "include/mbedtls/ecp.h"
int mbedtls_ecp_muladd( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q );
# 647 "include/mbedtls/ecp.h"
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt );
# 664 "include/mbedtls/ecp.h"
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d );
# 686 "include/mbedtls/ecp.h"
int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
                     const mbedtls_ecp_point *G,
                     mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng );
# 710 "include/mbedtls/ecp.h"
int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng );
# 726 "include/mbedtls/ecp.h"
int mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );
# 744 "include/mbedtls/ecp.h"
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv );

#if defined(MBEDTLS_SELF_TEST)







int mbedtls_ecp_self_test( int verbose );

#endif

#ifdef __cplusplus
}
#endif

#endif
# 23 "<stdin>" 2

#if defined(MBEDTLS_DEPRECATED_WARNING)
#warning "Record compression support via MBEDTLS_ZLIB_SUPPORT is deprecated and will be removed in the next major revision of the library"
#endif




#define MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE -0x7080
#define MBEDTLS_ERR_SSL_BAD_INPUT_DATA -0x7100




#define MBEDTLS_SSL_MAJOR_VERSION_3 3
#define MBEDTLS_SSL_MINOR_VERSION_0 0





#define MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN 1000
#define MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX 60000





#if !defined(MBEDTLS_SSL_MAX_CONTENT_LEN)
#define MBEDTLS_SSL_MAX_CONTENT_LEN 16384
#endif

#if !defined(MBEDTLS_SSL_IN_CONTENT_LEN)
#define MBEDTLS_SSL_IN_CONTENT_LEN MBEDTLS_SSL_MAX_CONTENT_LEN
#endif



union mbedtls_ssl_premaster_secret
{
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    unsigned char _pms_rsa[48];
#endif
#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)
    unsigned char _pms_dhm[MBEDTLS_MPI_MAX_SIZE];
#endif
};

#define MBEDTLS_PREMASTER_SIZE sizeof( union mbedtls_ssl_premaster_secret )

#ifdef __cplusplus
extern "C" {
#endif




typedef enum
{
    MBEDTLS_SSL_HELLO_REQUEST,
    MBEDTLS_SSL_CLIENT_HELLO,
}
mbedtls_ssl_states;
# 104 "<stdin>"
typedef int mbedtls_ssl_send_t( void *ctx,
                                const unsigned char *buf,
                                size_t len );


typedef struct mbedtls_ssl_session mbedtls_ssl_session;
typedef struct mbedtls_ssl_context mbedtls_ssl_context;
typedef struct mbedtls_ssl_config mbedtls_ssl_config;


typedef struct mbedtls_ssl_transform mbedtls_ssl_transform;
typedef struct mbedtls_ssl_handshake_params mbedtls_ssl_handshake_params;
typedef struct mbedtls_ssl_sig_hash_set_t mbedtls_ssl_sig_hash_set_t;
#if defined(MBEDTLS_X509_CRT_PARSE_C)
typedef struct mbedtls_ssl_key_cert mbedtls_ssl_key_cert;
#endif
#if defined(MBEDTLS_SSL_PROTO_DTLS)
typedef struct mbedtls_ssl_flight_item mbedtls_ssl_flight_item;
#endif

#if defined(MBEDTLS_SSL_ASYNC_PRIVATE)



typedef int mbedtls_ssl_async_sign_t( mbedtls_ssl_context *ssl,
                                      const unsigned char *hash,
                                      size_t hash_len );

#endif




struct mbedtls_ssl_session
{
#if defined(MBEDTLS_HAVE_TIME)
#endif
    int ciphersuite;
    size_t id_len;
    unsigned char id[32];
};




struct mbedtls_ssl_config
{






    const int *ciphersuite_list[4];


    void (*f_dbg)(void *, int, const char *, int, const char *);
    void *p_dbg;

#if defined(MBEDTLS_SSL_ASYNC_PRIVATE)
#if defined(MBEDTLS_X509_CRT_PARSE_C)
    mbedtls_ssl_async_sign_t *f_async_sign_start;
#endif
#endif

#if defined(MBEDTLS_DHM_C)
    mbedtls_mpi dhm_P;
#endif

#if defined(MBEDTLS_SSL_ALPN)
    const char **alpn_list;
#endif





    unsigned int endpoint : 1;
    unsigned int authmode : 2;
};


struct mbedtls_ssl_context
{
    const mbedtls_ssl_config *conf;




    int state;
};

#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)

#define MBEDTLS_SSL_CHANNEL_OUTBOUND 0
#define MBEDTLS_SSL_CHANNEL_INBOUND 1

extern int (*mbedtls_ssl_hw_record_init)(mbedtls_ssl_context *ssl,
                const unsigned char *key_enc, const unsigned char *key_dec,
                size_t maclen);
#endif
# 214 "<stdin>"
const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id );
# 224 "<stdin>"
int mbedtls_ssl_get_ciphersuite_id( const char *ciphersuite_name );
# 233 "<stdin>"
void mbedtls_ssl_init( mbedtls_ssl_context *ssl );





int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf );

#if defined(MBEDTLS_X509_CRT_PARSE_C)



void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, int, uint32_t *),
                     void *p_vrfy );
#endif





void mbedtls_ssl_set_bio( mbedtls_ssl_context *ssl,
                          void *p_bio,
                          mbedtls_ssl_send_t *f_send );

typedef int mbedtls_ssl_cookie_write_t( void *ctx,
                                unsigned char **p, unsigned char *end,
                                const unsigned char *info, size_t ilen );


#if !defined(MBEDTLS_DEPRECATED_REMOVED)

#if defined(MBEDTLS_DEPRECATED_WARNING)
#define MBEDTLS_DEPRECATED __attribute__((deprecated))
#else
#define MBEDTLS_DEPRECATED
#endif
# 285 "<stdin>"
MBEDTLS_DEPRECATED int mbedtls_ssl_conf_dh_param( mbedtls_ssl_config *conf,
                                                  const char *dhm_P,
                                                  const char *dhm_G );

#endif

#ifdef __cplusplus
}
#endif

#endif
