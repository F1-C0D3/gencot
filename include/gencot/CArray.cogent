{- Gencot array types -}

#ifndef GENCOT_CARRAY
#define GENCOT_CARRAY

#include "Memory.cogent"
#include "CPointer.cogent"
#include "Tuples.cogent"

{- Fixed size array types -}
-- Type for mapping C array types with too complex size or no size
--   el: element type
type CArrXX el

-- Macro for constructing the array type for a given size and element type.
--   size: number of array elements
--   knd: kind of element type.
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: element type
#define CARR(size,knd,el) Gencot_ID(CArr)size Gencot_APPFUN(Gencot_ID(knd)altUBOX,el)
#define altUBOX(el) (el)
#define UaltUBOX(el) #(el)

{- explicitly sized array types -}

-- Array pointer type.
--   el: element type
type CArrPtr el = { arr: el }

-- Explicitly sized array type.
-- Implemented by a pair of an element pointer and the size.
--   el: element type
type CArrES el = (CArrPtr el, U64)

-- Macro for constructing an explicitly sized array type.
--   knd: one of U or empty. Specifies the kind of element type. 
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: the element type for which to construct the explicitly sized array type.
#define CAES(knd,el) CArrES Gencot_APPFUN(Gencot_ID(knd)altUBOX,el)

-- Macro for constructing an explicitly sized array of type CArrES el.
--   p: element pointer of type CArrPtr el 
--   s: number of elements pointed to by p
#define MKCAES(p,s) (p,s)

{- Creating Explicitly Sized Arrays -}

-- Macro for generating the empty-value type for a valid-value explicitly sized array type CAES(knd,el).
--   knd: one of U or empty. Specifies the kind of element type. 
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: element type
#define EVT_CAES(knd,el) (EVT(CArrPtr Gencot_APPFUN(Gencot_ID(knd)altUBOX,el)), U64)

-- Creating an empty value of an explicitly sized empty-value array type by allocating memory for 
-- a specified number of elements for it and returning the pair of the pointer to the allocated space 
-- and the number of elements.
-- In case of error only the heap is returned
--   evp: the empty-value explicitly sized array type.
createCAES: all(evp). (U64, Heap) -> Result (evp,Heap) Heap

{- Initializing and Clearing Arrays -}

-- Initialize or clear an array by applying an initialization
-- or clearing function to all elements, passing a pointer to the element.
--   evt: the empty-value array type
--   vvt: the valid-value array type
--   epe: the empty-value element pointer type
--   vpe: the valid-value element pointer type
--   arg: type of additional input to the element function
--   out: type of additional output from the element function

-- Pass additional input in parallel to all element function invocations.
-- Combine additional output of element function invocations using a combination function.
initEltsParCmb: all(evt,vvt,epe,vpe,arg:<S,out). IniFun evt vvt (Tup3 (IniFun epe vpe arg out) arg ((out,out)->out)) out
clearEltsParCmb: all(vvt,evt,vpe,epe,arg:<S,out). ClrFun vvt evt (Tup3 (ClrFun vpe epe arg out) arg ((out,out)->out)) out

-- Pass additional input in parallel to all element function invocations.
-- Element function has no additional output.
initEltsPar: all(evt,vvt,epe,vpe,arg:<S). IniFun evt vvt (IniFun epe vpe arg (), arg) ()
clearEltsPar: all(vvt,evt,vpe,epe,arg:<S). ClrFun vvt evt (ClrFun vpe epe arg (), arg) ()

-- Chain additional input / output through all element function invocations
-- in ascending element order.
initEltsSeq: all(evt,vvt,epe,vpe,arg). IniFun evt vvt (IniFun epe vpe arg arg, arg) arg
clearEltsSeq: all(vvt,evt,vpe,epe,arg). ClrFun vvt evt (ClrFun vpe epe arg arg, arg) arg

-- Macros for specifying typed instances of the element initialization and clearing functions
-- and their function types for fixed size arrays
--   func: one of ParCmb, Par, Seq
--   size: number of array elements
--   knd: kind of element type.
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: element type
--   arg: type of additional input to the element function
--   out: type of additional output from the element function (ignored for func = Simp,Seq)
#define INITelts(func,size,knd,el,arg,out) \
  Gencot_MKFUNNAME(initElts,func)[EVT(CARR(size,knd,el)),CARR(size,knd,el),\
                                 EVT(CPTR(knd,el)),CPTR(knd,el),Gencot_OPTOUT(func,arg,out)]
#define CLEARelts(func,size,knd,el,arg,out) \
  Gencot_MKFUNNAME(clearElts,func)[CARR(size,knd,el),EVT(CARR(size,knd,el)),\
                                  CPTR(knd,el),EVT(CPTR(knd,el)),Gencot_OPTOUT(func,arg,out)]
#define INITTYPEelts(func,size,knd,el,arg,out) \
  IniFun (EVT(CARR(size,knd,el))) (CARR(size,knd,el)) \
         (IniFun (EVT(CPTR(knd,el))) (CPTR(knd,el)) (arg) Gencot_ARRELOUT(func,arg,out), \
         (arg) Gencot_OPTARRCMB(func,out)) Gencot_ARRELOUT(func,arg,out)
#define CLEARTYPEelts(func,size,knd,el,arg,out) \
  ClrFun (CARR(size,knd,el)) (EVT(CARR(size,knd,el))) \
         (ClrFun (CPTR(knd,el)) (EVT(CPTR(knd,el))) (arg) Gencot_ARRELOUT(func,arg,out), \
         (arg) Gencot_OPTARRCMB(func,out)) Gencot_ARRELOUT(func,arg,out)

-- Macros for specifying typed instances of the general initialization and clearing functions
-- and their types for explicitly sized arrays.
--   func: one of Heap, Simp
--   knd: one of U or empty. Specifies the kind of element type. 
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: element type
#define INIT_CAES(func,knd,el) Gencot_MKFUNNAME(init,func)[EVT_CAES(knd,el),CAES(knd,el)]
#define CLEAR_CAES(func,knd,el) Gencot_MKFUNNAME(clear,func)[CAES(knd,el),EVT_CAES(knd,el)]
#define INITTYPE_CAES(func,knd,el) Gencot_OPTTRNS(func)IniFun (EVT_CAES(knd,el)) (CAES(knd,el)) Gencot_IELARGOUT(func,)
#define CLEARTYPE_CAES(func,knd,el) ClrFun CAES(knd,el) EVT_CAES(knd,el) Gencot_CELARGOUT(func,)

-- Macros for specifying typed instances of the per-element initialization and clearing functions
-- and their function types for explicitly sized arrays.
--   func: one of ParCmb, Par, Seq
--   knd: one of U or empty. Specifies the kind of element type. 
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: element type
--   arg: type of additional input to the element function
--   out: type of additional output from the element function (ignored for func = Simp,Seq)
#define INITelts_CAES(func,knd,el,arg,out) \
  Gencot_MKFUNNAME(initElts,func)[EVT_CAES(knd,el),CAES(knd,el),\
                                 EVT(CPTR(knd,el)),CPTR(knd,el),Gencot_OPTOUT(func,arg,out)]
#define CLEARelts_CAES(func,knd,el,arg,out) \
  Gencot_MKFUNNAME(clearElts,func)[CAES(knd,el),EVT_CAES(knd,el),\
                                  CPTR(knd,el),EVT(CPTR(knd,el)),Gencot_OPTOUT(func,arg,out)]
#define INITTYPEelts_CAES(func,knd,el,arg,out) \
  IniFun (EVT_CAES(knd,el)) (CAES(knd,el)) \
         (IniFun (EVT(CPTR(knd,el))) (CPTR(knd,el)) arg Gencot_ARRELOUT(func,arg,out), \
         arg Gencot_OPTARRCMB(func,out)) Gencot_ARRELOUT(func,arg,out)
#define CLEARTYPEelts_CAES(func,knd,el,arg,out) \
  ClrFun CAES(knd,el) EVT_CAES(knd,el) \
         (ClrFun (CPTR(knd,el)) (EVT(CPTR(knd,el))) arg Gencot_ARRELOUT(func,arg,out), \
         arg Gencot_OPTARRCMB(func,out)) Gencot_ARRELOUT(func,arg,out)

{- Accessing Single Array Elements -}

-- Get element at index in readonly array
-- For invalid index returns element at index 0
--   arr: the array type
--   idx: the array index type
--   el: the array element type
getArr : all(arr,idx,el). (arr!,idx) -> el!

-- Get element at index in readonly array
-- For invalid index returns Error()
--   arr: the array type
--   idx: the array index type
--   el: the array element type
getArrChk : all(arr,idx,el). (arr!,idx) -> Result el! ()

-- Set element at index in array with nonlinear element type
-- For invalid index return unmodified array and discard new element value
--   arr: the array type
--   idx: the array index type
--   el: the array element type
setArr : all(arr,idx,el:<D). ModFun arr (idx,el) ()

-- Exchange element at index in array
-- For invalid index return unmodified array and new element value
--   arr: the array type
--   idx: the array index type
--   el: the array element type
exchngArr : all(arr,idx,el). ModFun arr (idx,el) (idx,el)

-- Change element at index in array using a change function for elements
-- For invalid index do nothing and return element function input
--   arr: the array type
--   idx: the array index type
--   el: the array element type
--   arg: type of additional input and output for element change function
modifyArr : all(arr,idx,el,arg). ModFun arr (Tup3 idx (ChgFun el arg arg) arg) arg

-- Change element at index in array using a change function for elements
-- For invalid index do nothing and return default result for element function
--   arr: the array type
--   idx: the array index type
--   el: the array element type
--   arg: type of additional input for element function
--   out: type of additional output of element function
modifyArrDflt : all(arr,idx,el,arg:<D,out:<DSE). ModFun arr (Tup3 idx (ChgFun el arg out) arg) out

-- Return pointer to element at index in readonly array
-- For invalid index return pointer to element with index 0.
--   arr: the array type
--   idx: the array index type
--   pel: the type of pointer to array elements
getrefArr : all(arr,idx,pel). (arr!,idx) -> pel!

-- Return pointer to element at index in readonly array
-- For invalid index return Error()
--   arr: the array type
--   idx: the array index type
--   pel: the type of pointer to array elements
getrefArrChk : all(arr,idx,pel). (arr!,idx) -> Result pel! ()

-- Modify element at index in array using a modification function for element pointers
-- For invalid index do nothing and return element function input
--   arr: the array type
--   idx: the array index type
--   pel: the type of pointer to array elements
--   arg: type of additional input and output for element change function
modrefArr : all(arr,idx,pel,arg). ModFun arr (Tup3 idx (ModFun pel arg arg) arg) arg

-- Modify element at index in array using a modification function for element pointers
-- For invalid index do nothing and return default result for element function
--   arr: the array type
--   idx: the array index type
--   pel: the type of pointer to array elements
--   arg: type of additional input for element function
--   out: type of additional output of element function
modrefArrDflt : all(arr,idx,pel,arg:<D,out:<DSE). ModFun arr (Tup3 idx (ModFun pel arg out) arg) out

{- Conversions -}

-- Convert from fixed size array type to explicitly sized array type.
--   afs: the fixed size array type
--   aes: the explicitly sized array type
toCAES: all(afs,aes). afs -> aes

-- Convert from explicitly sized array type to fixed size array type.
-- It must be proven that the size fits.
--   afs: the fixed size array type
--   aes: the explicitly sized array type
fromCAES: all(afs,aes). aes -> afs

-- Convert from readonly fixed size array type to explicitly sized array type.
--   afs: the fixed size array type
--   aes: the explicitly sized array type
rotoCAES: all(afs,aes). afs! -> aes!

-- Convert from readonly explicitly sized array type to fixed size array type.
-- It must be proven that the size fits.
--   afs: the fixed size array type
--   aes: the explicitly sized array type
rofromCAES: all(afs,aes). aes! -> afs!

-- Macro for specifying typed instances of the conversion functions
--   size: number of elements in the fixed size array type
--   knd: one of U or empty. Specifies the kind of element type. 
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: element type
#define TOCAES(size,knd,el) toCAES[CARR(size,knd,el),CAES(knd,el)]
#define FROMCAES(size,knd,el) fromCAES[CARR(size,knd,el),CAES(knd,el)]
#define ROTOCAES(size,knd,el) rotoCAES[CARR(size,knd,el),CAES(knd,el)]
#define ROFROMCAES(size,knd,el) rofromCAES[CARR(size,knd,el),CAES(knd,el)]

#endif {- GENCOT_CARRAY -}
