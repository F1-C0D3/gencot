#!/bin/sh

if [ -z "$GENCOT_HOME" ]
then
    echo "Cannot find Gencot installation."
    echo "Please set environment variable GENCOT_HOME to root directory of Gencot installation."
    exit 1
fi

BIN=$GENCOT_HOME/bin

USAGE="Usage: $0 [-I<dir>] [-G<dir>] [-O<dir>] [-u<uname>] [-k] [unit|shallow|refine|comments|help] [<file>]"

long_usage()
{
    echo $USAGE
    echo 'Auxiliary processing for Cogent programs.'
    echo 'Commands:'
    echo '  unit             Generate auxiliary C files for unit described in <ufile>'
    echo '  shallow <file>   Extend the shallow embedding generated by Cogent in <file>'
    echo '  refine <file>    Extend the refinement proof generated by Cogent for <file>'
    echo '  comments <file>  Remove comments from Cogent source <file> and print to stdout'
    echo '  help             Display this help information'
    echo 'Options for commands unit, shallow: '
    echo '  -I<dir>    Directory for searching Cogent and C include files. Can be repeated, as for cpp. '
    echo '  -G<dir>    Directory for searching Gencot auxiliary files. Only one can be given, default is "."'
    echo '  -O<dir>    Directory for generated output files. Default is "."'
    echo '  -u<uname>  Name of unit. Default is "all"'
    echo '  -k         Keep directory with intermediate files and display it at the end.'
}

short_usage()
{
    echo $USAGE
    echo 'Run with -h for more information.'
}
 
# Parse options
OPTS=$(getopt -o hku:I:G:O: -n "$0" -- "$@")

if [ $? != 0 ]
then
    short_usage
    exit 1
fi

eval set -- "$OPTS"

INCLS=''
GENCOTDIR='.'
OUTPUTDIR='.'
KEEP=''
UNITNAME='all'

while true; do
    case "$1" in
        -h) long_usage; exit;;
        -k) KEEP='yes'; shift;;
        -I) shift; INCLS="$INCLS -I $1"; shift;;
        -G) shift; GENCOTDIR="$1"; shift;;
        -O) shift; OUTPUTDIR="$1"; shift;;
        -u) shift; UNITNAME="$1"; shift;;
        --) shift; break;;
    esac
done

# Parse command
REQARGS=1
OPTARGS=''
CMD=$1

case "$CMD" in
    unit) REQARGS=0;;
    shallow) ;;
    refine) ;;
    comments) ;;
    help) long_usage; exit;;
    *) echo "unknown auxcog command: $1"; short_usage; exit;;
esac

shift

if [ $OPTARGS ]
then
    if [ $REQARGS -gt $# ]
    then
        echo "wrong number of arguments for auxcog subcommand ${CMD}: expected at least $REQARGS"
        exit
    fi
else
    if [ "$REQARGS" != "$#" ]
    then
        echo "wrong number of arguments for auxcog subcommand ${CMD}: expected $REQARGS"
        exit
    fi
fi

UNITFILE=$UNITNAME.unit

if [ "$REQARGS" = "0" ]
then
    if [ -e $GENCOTDIR/$UNITFILE ]
    then 
        echo "Using unit file $UNITFILE" >&2
    else
        echo "Error: Unit file $UNITFILE not found."
        exit
    fi
fi

if [ "$CMD" != "comments" ]
then
    TMPDIR=$(mktemp -d)
fi

if [ "$CMD" != "comments" ]
then
    if [ -e $UNITNAME-gen.h ]
    then
        cpp $INCLS < $UNITNAME-gen.h | $BIN/auxcog-ctypstruct > $TMPDIR/ctypstruct
        cpp $INCLS < $UNITNAME-gen.h | $BIN/auxcog-ctypfunc > $TMPDIR/ctypfunc
    else
        echo "Error: file $UNITNAME-gen.h not found."
    fi
    if [ -e $GENCOTDIR/common.gencot-std ]
    then 
        cp $GENCOTDIR/common.gencot-std $TMPDIR
    else
        touch $TMPDIR/common.gencot-std
    fi
fi

if [ "$CMD" = "unit" ]
then
    if [ -e $UNITNAME-gencot_pp_inferred.c ]
    then
        $BIN/auxcog-genops $TMPDIR/ctypstruct $TMPDIR/ctypfunc < $UNITNAME-gencot_pp_inferred.c > $OUTPUTDIR/$UNITNAME-gencot.c
    fi
    $BIN/auxcog-genops $TMPDIR/ctypstruct $TMPDIR/ctypfunc < $UNITNAME-externs_pp_inferred.c > $OUTPUTDIR/$UNITNAME-externs.c
    for file in $(cat $GENCOTDIR/$UNITFILE)
    do
        fbase=$(basename $file)
        fnam=$(expr match $fbase '\(.*\)[.][^.]*' '|' $fbase)
        if [ $fnam != "additional_externs" ]
        then $BIN/auxcog-genops $TMPDIR/ctypstruct $TMPDIR/ctypfunc < $fnam-entry_pp_inferred.c > $OUTPUTDIR/$fnam-entry.c
        fi
    done
    if [ -e $UNITNAME-manabstr_pp_inferred.c ]
    then
        $BIN/auxcog-genops $TMPDIR/ctypstruct $TMPDIR/ctypfunc < $UNITNAME-manabstr_pp_inferred.c > $OUTPUTDIR/$UNITNAME-manabstr.c
    fi
    KND=1
    PRC=''
    for comp in $(cat $TMPDIR/common.gencot-std)
    do
        if [ $KND ]
        then
            if [ $comp = "anti:" ]; then PRC=1; else PRC=''; fi
            KND=''
        else
            if [ $PRC ]; then $BIN/auxcog-genops $TMPDIR/ctypstruct $TMPDIR/ctypfunc < std-${comp}_pp_inferred.c > $OUTPUTDIR/std-$comp.c; fi
            KND=1
        fi
    done
    
    $BIN/auxcog-mainfile $UNITNAME $TMPDIR/common.gencot-std < $GENCOTDIR/$UNITFILE > $OUTPUTDIR/$UNITNAME.c
elif [ "$CMD" = "shallow" ]
then
    fbase=$(basename $1)
    prfnam=$(expr match $fbase '\(.*\)_ShallowShared_Tuples.thy')
    if [ $prfnam = "" ]
    then
        echo "Wrong input file $fbase. Must have the form <proofname>_ShallowShared_Tuples.thy."
        exit 1
    fi
    $BIN/auxcog-shalshared $TMPDIR/ctypstruct < $1 > $OUTPUTDIR/$fbase
    srcdir=$(dirname $1)
    sed -e "s/imports \"${prfnam}_ShallowShared_Tuples\"/imports \"${prfnam}_Shallow_Gencot_Tuples\"/ " \
      $srcdir/${prfnam}_Shallow_Desugar_Tuples.thy > $OUTPUTDIR/${prfnam}_Shallow_Desugar_Tuples.thy
    cp $srcdir/${prfnam}_ShallowConsts_Desugar_Tuples.thy $OUTPUTDIR
    echo "theory ShallowShared_Tuples" > $OUTPUTDIR/ShallowShared_Tuples.thy
    echo "  imports \"${prfnam}_ShallowShared_Tuples\"" >> $OUTPUTDIR/ShallowShared_Tuples.thy
    echo "begin" >> $OUTPUTDIR/ShallowShared_Tuples.thy
    echo "ML \\<open>structure sem = Named_Thms (val name = Binding.name \"sem\" val description = \"\")\\<close>" >> $OUTPUTDIR/ShallowShared_Tuples.thy
    echo "setup \\<open> sem.setup \\<close>" >> $OUTPUTDIR/ShallowShared_Tuples.thy
    echo "end" >> $OUTPUTDIR/ShallowShared_Tuples.thy
    cp $GENCOT_HOME/isa/GencotTypes.thy $OUTPUTDIR
    $BIN/auxcog-shalgencot $TMPDIR/common.gencot-std < $OUTPUTDIR/$fbase > $OUTPUTDIR/${prfnam}_Shallow_Gencot_Tuples.thy
    $BIN/auxcog-lemmgencot $TMPDIR/common.gencot-std < $OUTPUTDIR/$fbase > $OUTPUTDIR/${prfnam}_Shallow_Gencot_Lemmas.thy
    cp $GENCOT_HOME/isa/*_Tuples.thy $OUTPUTDIR
    cp $GENCOT_HOME/isa/*_Lemmas.thy $OUTPUTDIR
elif [ "$CMD" = "refine" ]
then
    fbase=$(basename $1)
    prfnam=$(expr match $fbase '\(.*\)_ShallowShared_Tuples.thy')
    if [ X$prfnam = "X" ]
    then
        echo "Wrong input file $fbase. Must have the form <proofname>_ShallowShared_Tuples.thy."
        exit 1
    fi
    srcdir=$(dirname $1)
    $BIN/auxcog-shalshared $TMPDIR/ctypstruct < $1 > $OUTPUTDIR/$fbase
    $BIN/auxcog-shalshared $TMPDIR/ctypstruct < $srcdir/${prfnam}_ShallowShared.thy > $OUTPUTDIR/${prfnam}_ShallowShared.thy
    sed -e "s/imports \"${prfnam}_ShallowShared_Tuples\"/imports \"${prfnam}_Shallow_Gencot_Tuples\"/ " \
      $srcdir/${prfnam}_Shallow_Desugar_Tuples.thy > $OUTPUTDIR/${prfnam}_Shallow_Desugar_Tuples.thy
    sed -e "s/imports \"${prfnam}_ShallowShared\"/imports \"${prfnam}_Shallow_Gencot\"/ " \
      $srcdir/${prfnam}_Shallow_Desugar.thy > $OUTPUTDIR/${prfnam}_Shallow_Desugar.thy
    echo "theory ShallowShared_Tuples" > $OUTPUTDIR/ShallowShared_Tuples.thy
    echo "  imports \"${prfnam}_ShallowShared_Tuples\"" >> $OUTPUTDIR/ShallowShared_Tuples.thy
    echo "begin end" >> $OUTPUTDIR/ShallowShared_Tuples.thy
    echo "theory ShallowShared" > $OUTPUTDIR/ShallowShared.thy
    echo "  imports \"${prfnam}_ShallowShared\"" >> $OUTPUTDIR/ShallowShared.thy
    echo "begin end" >> $OUTPUTDIR/ShallowShared.thy
    cp $GENCOT_HOME/isa/GencotTypes.thy $OUTPUTDIR
    $BIN/auxcog-shalgencot $TMPDIR/common.gencot-std < $OUTPUTDIR/$fbase > $OUTPUTDIR/${prfnam}_Shallow_Gencot_Tuples.thy
    $BIN/auxcog-shalgencot $TMPDIR/common.gencot-std < $srcdir/${prfnam}_ShallowShared.thy > $OUTPUTDIR/${prfnam}_Shallow_Gencot.thy
    cp $GENCOT_HOME/isa/*_Tuples.thy $OUTPUTDIR
    for fil in $GENCOT_HOME/isa/Gencot_* $GENCOT_HOME/isa/CogentCommon_*
    do 
        if [ "X$(expr match $fil '\(.*\)_Tuples.thy')" = "X" -a "X$(expr match $fil '\(.*\)_Lemmas.thy')" = "X" ]
        then
            cp $fil $OUTPUTDIR
        fi
    done
else
# "$CMD" = "comments"
    $BIN/auxcog-remcomments < $1
fi

if [ "$CMD" != "comments" ]
then
    if [ $KEEP ]
    then
        echo "Kept directory with intermediate files: $TMPDIR" >&2
    else
        rm -r $TMPDIR
    fi
fi
