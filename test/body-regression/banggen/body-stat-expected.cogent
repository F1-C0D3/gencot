cogent_sv1 : () -> ()
cogent_sv1 () :: () =
   let _ = 0 :: U8
   in () :: () :: ()
cogent_sv2 : U32 -> ()
cogent_sv2 i :: U32 =
   let _ = 0 :: U8
   in () :: () :: ()
cogent_sv3 : () -> ()
cogent_sv3 () :: () =
   let _ = 0 :: U8
   in () :: () :: ()
cogent_sv4 : () -> ()
cogent_sv4 () :: () =
   let (_ :: U8
       , r' :: ()) = let v' = let v' = () :: ()
         in v' :: () :: ()
      in (3 :: U8, v' :: ()) :: (U8
                                , ())
   in () :: () :: ()
cogent_se1 : U32 -> U32
cogent_se1 i :: U32 =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = i :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_se2 : U32 -> U32
cogent_se2 i :: U32 =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = i :: U32
         and v1' = 5 :: U32
         and v' = v' :: U32 + v1' :: U32 :: U32
         and v2' = i :: U32
         and v' = v' :: U32 * v2' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_se3 : U32 -> U32
cogent_se3 i :: U32 =
   let (_ :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v' :: U32
                                            , i :: U32) = let v1' = 1 :: U32
            and v' = i :: U32
            and v' = v' :: U32 + v1' :: U32 :: U32
            and (v' :: U32
                , i :: U32) = (i :: U32
                              , v' :: U32)
            in (v' :: U32, i :: U32) :: (U32
                                        , U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = i :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_se4 : U32 -> U32
cogent_se4 i :: U32 =
   let (_ :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v' :: U32
                                            , i :: U32) = let v1' = 1 :: U32
            and v' = i :: U32
            and v' = v' :: U32 + v1' :: U32 :: U32
            and (v' :: U32
                , i :: U32) = (i :: U32
                              , v' :: U32)
            in (v' :: U32, i :: U32) :: (U32
                                        , U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , i :: U32) = let (v' :: U32
                                                       , i :: U32) = let v1' = 5 :: U32
                     and v' = i :: U32
                     and v' = v1' :: U32
                     and (v' :: U32
                         , i :: U32) = (v' :: U32
                                       , v' :: U32)
                     in (v' :: U32, i :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = i :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32) :: (U8, U32, U32) :: (U8
                                                                    , U32
                                                                    , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_se5 : U32 -> U32
cogent_se5 i :: U32 =
   let (_ :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v' :: U32
                                            , i :: U32) = let v1' = 1 :: U32
            and v' = i :: U32
            and v' = v' :: U32 + v1' :: U32 :: U32
            and (v' :: U32
                , i :: U32) = (i :: U32
                              , v' :: U32)
            in (v' :: U32, i :: U32) :: (U32
                                        , U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32
                  , i :: U32) = let (v' :: U32
                                    , i :: U32) = let v1' = 1 :: U32
                  and v' = i :: U32
                  and v' = v' :: U32 + v1' :: U32 :: U32
                  and (v' :: U32
                      , i :: U32) = (v' :: U32
                                    , v' :: U32)
                  in (v' :: U32, i :: U32) :: (U32
                                              , U32)
               in (3 :: U8
                  , v' :: U32
                  , i :: U32) :: (U8, U32, U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_si1 : (U32, U32) -> U32
cogent_si1 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , r' :: U32) = let v' = let v' = i :: U32
         and v1' = 0 :: U32
         and v' = v' :: U32 == v1' :: U32 :: U32
         in v' :: U32 :: U32
      in if v' :: U32
         then let (c' :: U8
                  , r' :: U32) = let v' = let v' = j :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = i :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_si2 : (U32, U32) -> U32
cogent_si2 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , r' :: U32) = let (c' :: U8
                          , r' :: U32) = let v' = let v' = i :: U32
            and v1' = 0 :: U32
            and v' = v' :: U32 == v1' :: U32 :: U32
            in v' :: U32 :: U32
         in if v' :: U32
            then let (c' :: U8
                     , r' :: U32) = let v' = let v' = j :: U32
                     in v' :: U32 :: U32
                  in (3 :: U8, v' :: U32) :: (U8
                                             , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32)
            else let c' = 0 :: U8
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = i :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_si3 : (U32, U32) -> U32
cogent_si3 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let v' = let v' = i :: U32
            and v1' = 0 :: U32
            and v' = v' :: U32 == v1' :: U32 :: U32
            in v' :: U32 :: U32
         in if v' :: U32
            then let (c' :: U8
                     , i :: U32) = let (v' :: U32
                                       , i :: U32) = let v1' = 10 :: U32
                     and v' = i :: U32
                     and v' = v1' :: U32
                     and (v' :: U32
                         , i :: U32) = (v' :: U32
                                       , v' :: U32)
                     in (v' :: U32, i :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in (c' :: U8, i :: U32) :: (U8
                                          , U32)
            else let (c' :: U8
                     , i :: U32) = let (v' :: U32
                                       , i :: U32) = let v1' = j :: U32
                     and v' = i :: U32
                     and v' = v' :: U32 + v1' :: U32 :: U32
                     and (v' :: U32
                         , i :: U32) = (v' :: U32
                                       , v' :: U32)
                     in (v' :: U32, i :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in (c' :: U8, i :: U32) :: (U8
                                          , U32) :: (U8, U32) :: (U8, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = i :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_si4 : (U32, U32) -> U32
cogent_si4 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32
                          , j :: U32) = let v' = let v' = i :: U32
            and v1' = 0 :: U32
            and v' = v' :: U32 == v1' :: U32 :: U32
            in v' :: U32 :: U32
         in if v' :: U32
            then let (c' :: U8
                     , i :: U32) = let (v' :: U32
                                       , i :: U32) = let v1' = 10 :: U32
                     and v' = i :: U32
                     and v' = v1' :: U32
                     and (v' :: U32
                         , i :: U32) = (v' :: U32
                                       , v' :: U32)
                     in (v' :: U32, i :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in (c' :: U8
                  , i :: U32
                  , j :: U32) :: (U8, U32, U32)
            else let (c' :: U8
                     , j :: U32
                     , i :: U32) = let v' = let v' = j :: U32
                     and v1' = 0 :: U32
                     and v' = v' :: U32 == v1' :: U32 :: U32
                     in v' :: U32 :: U32
                  in if v' :: U32
                     then let (c' :: U8
                              , j :: U32) = let (v' :: U32
                                                , j :: U32) = let v1' = i :: U32
                              and v' = j :: U32
                              and v' = v1' :: U32
                              and (v' :: U32
                                  , j :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, j :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8, U32, U32)
                     else let (c' :: U8
                              , i :: U32) = let (v' :: U32
                                                , i :: U32) = let v1' = j :: U32
                              and v' = i :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              and (v' :: U32
                                  , i :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, i :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8
                                          , U32
                                          , U32) :: (U8, U32, U32) :: (U8
                                                                      , U32
                                                                      , U32)
               in (c' :: U8
                  , i :: U32
                  , j :: U32) :: (U8
                                 , U32
                                 , U32) :: (U8, U32, U32) :: (U8
                                                             , U32
                                                             , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = i :: U32
                  and v1' = j :: U32
                  and v' = v' :: U32 + v1' :: U32 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_si5 : (U32, U32) -> U32
cogent_si5 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32
                          , j :: U32) = let v' = let v' = i :: U32
            and v1' = 0 :: U32
            and v' = v' :: U32 == v1' :: U32 :: U32
            in v' :: U32 :: U32
         in if v' :: U32
            then let (c' :: U8
                     , i :: U32
                     , j :: U32) = let v' = let v' = j :: U32
                     and v1' = 0 :: U32
                     and v' = v' :: U32 == v1' :: U32 :: U32
                     in v' :: U32 :: U32
                  in if v' :: U32
                     then let (c' :: U8
                              , i :: U32) = let (v' :: U32
                                                , i :: U32) = let v1' = 10 :: U32
                              and v' = i :: U32
                              and v' = v1' :: U32
                              and (v' :: U32
                                  , i :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, i :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , i :: U32
                           , j :: U32) :: (U8, U32, U32)
                     else let (c' :: U8
                              , j :: U32) = let (v' :: U32
                                                , j :: U32) = let v1' = 10 :: U32
                              and v' = j :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              and (v' :: U32
                                  , j :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, j :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , i :: U32
                           , j :: U32) :: (U8
                                          , U32
                                          , U32) :: (U8, U32, U32) :: (U8
                                                                      , U32
                                                                      , U32)
               in (c' :: U8
                  , i :: U32
                  , j :: U32) :: (U8, U32, U32)
            else let (c' :: U8
                     , j :: U32
                     , i :: U32) = let v' = let v' = j :: U32
                     and v1' = 0 :: U32
                     and v' = v' :: U32 == v1' :: U32 :: U32
                     in v' :: U32 :: U32
                  in if v' :: U32
                     then let (c' :: U8
                              , j :: U32) = let (v' :: U32
                                                , j :: U32) = let v1' = i :: U32
                              and v' = j :: U32
                              and v' = v1' :: U32
                              and (v' :: U32
                                  , j :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, j :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8, U32, U32)
                     else let (c' :: U8
                              , i :: U32) = let (v' :: U32
                                                , i :: U32) = let v1' = j :: U32
                              and v' = i :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              and (v' :: U32
                                  , i :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, i :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8
                                          , U32
                                          , U32) :: (U8, U32, U32) :: (U8
                                                                      , U32
                                                                      , U32)
               in (c' :: U8
                  , i :: U32
                  , j :: U32) :: (U8
                                 , U32
                                 , U32) :: (U8, U32, U32) :: (U8
                                                             , U32
                                                             , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = i :: U32
                  and v1' = j :: U32
                  and v' = v' :: U32 + v1' :: U32 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_si6 : (U32, U32) -> U32
cogent_si6 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , r' :: U32
       , j :: U32) = let (c' :: U8
                         , i :: U32
                         , r' :: U32
                         , j :: U32) = let v' = let v' = i :: U32
            and v1' = 0 :: U32
            and v' = v' :: U32 == v1' :: U32 :: U32
            in v' :: U32 :: U32
         in if v' :: U32
            then let (c' :: U8
                     , i :: U32
                     , r' :: U32
                     , j :: U32) = let v' = let v' = j :: U32
                     and v1' = 0 :: U32
                     and v' = v' :: U32 == v1' :: U32 :: U32
                     in v' :: U32 :: U32
                  in if v' :: U32
                     then let (c' :: U8
                              , i :: U32) = let (v' :: U32
                                                , i :: U32) = let v1' = 10 :: U32
                              and v' = i :: U32
                              and v' = v1' :: U32
                              and (v' :: U32
                                  , i :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, i :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , i :: U32
                           , r' :: U32
                           , j :: U32) :: (U8
                                          , U32
                                          , U32
                                          , U32)
                     else let (c' :: U8
                              , r' :: U32
                              , j :: U32) = let (v' :: U32
                                                , j :: U32) = let v1' = 10 :: U32
                              and v' = j :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              and (v' :: U32
                                  , j :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, j :: U32) :: (U32
                                                          , U32)
                           in (3 :: U8
                              , v' :: U32
                              , j :: U32) :: (U8, U32, U32)
                        in (c' :: U8
                           , i :: U32
                           , r' :: U32
                           , j :: U32) :: (U8
                                          , U32
                                          , U32
                                          , U32) :: (U8
                                                    , U32
                                                    , U32
                                                    , U32) :: (U8
                                                              , U32
                                                              , U32
                                                              , U32)
               in (c' :: U8
                  , i :: U32
                  , r' :: U32
                  , j :: U32) :: (U8
                                 , U32
                                 , U32
                                 , U32)
            else let (c' :: U8
                     , r' :: U32
                     , j :: U32
                     , i :: U32) = let v' = let v' = j :: U32
                     and v1' = 0 :: U32
                     and v' = v' :: U32 == v1' :: U32 :: U32
                     in v' :: U32 :: U32
                  in if v' :: U32
                     then let (c' :: U8
                              , r' :: U32
                              , j :: U32) = let (v' :: U32
                                                , j :: U32) = let v1' = i :: U32
                              and v' = j :: U32
                              and v' = v1' :: U32
                              and (v' :: U32
                                  , j :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, j :: U32) :: (U32
                                                          , U32)
                           in (3 :: U8
                              , v' :: U32
                              , j :: U32) :: (U8, U32, U32)
                        in (c' :: U8
                           , r' :: U32
                           , j :: U32
                           , i :: U32) :: (U8
                                          , U32
                                          , U32
                                          , U32)
                     else let (c' :: U8
                              , i :: U32) = let (v' :: U32
                                                , i :: U32) = let v1' = j :: U32
                              and v' = i :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              and (v' :: U32
                                  , i :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, i :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8
                           , r' :: U32
                           , j :: U32
                           , i :: U32) :: (U8
                                          , U32
                                          , U32
                                          , U32) :: (U8
                                                    , U32
                                                    , U32
                                                    , U32) :: (U8
                                                              , U32
                                                              , U32
                                                              , U32)
               in (c' :: U8
                  , i :: U32
                  , r' :: U32
                  , j :: U32) :: (U8
                                 , U32
                                 , U32
                                 , U32) :: (U8
                                           , U32
                                           , U32
                                           , U32) :: (U8, U32, U32, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , r' :: U32
              , j :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = i :: U32
                  and v1' = j :: U32
                  and v' = v' :: U32 + v1' :: U32 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , i :: U32
               , r' :: U32
               , j :: U32) :: (U8
                              , U32
                              , U32
                              , U32) :: (U8
                                        , U32
                                        , U32
                                        , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_si8 : (U32, U32) -> U32
cogent_si8 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , j :: U32
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , j :: U32
                          , i :: U32) = let v' = let v' = i :: U32
            and v1' = 0 :: U32
            and v' = v' :: U32 == v1' :: U32 :: U32
            in v' :: U32 :: U32
         in if v' :: U32
            then let (c' :: U8
                     , j :: U32) = let (v' :: U32
                                       , j :: U32) = let v1' = 1 :: U32
                     and v' = j :: U32
                     and v' = v' :: U32 + v1' :: U32 :: U32
                     and (v' :: U32
                         , j :: U32) = (j :: U32
                                       , v' :: U32)
                     in (v' :: U32, j :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, j :: U32) :: (U8
                                            , U32)
               in (c' :: U8
                  , j :: U32
                  , i :: U32) :: (U8, U32, U32)
            else let (c' :: U8
                     , i :: U32) = let (v' :: U32
                                       , i :: U32) = let v1' = 1 :: U32
                     and v' = i :: U32
                     and v' = v' :: U32 + v1' :: U32 :: U32
                     and (v' :: U32
                         , i :: U32) = (i :: U32
                                       , v' :: U32)
                     in (v' :: U32, i :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in (c' :: U8
                  , j :: U32
                  , i :: U32) :: (U8
                                 , U32
                                 , U32) :: (U8, U32, U32) :: (U8
                                                             , U32
                                                             , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , j :: U32
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32) = let (v' :: U32
                                                       , j :: U32) = let v1' = 2 :: U32
                     and v2' = j :: U32
                     and v1' = v1' :: U32 * v2' :: U32 :: U32
                     and v' = j :: U32
                     and v' = v1' :: U32
                     and (v' :: U32
                         , j :: U32) = (v' :: U32
                                       , v' :: U32)
                     in (v' :: U32, j :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, j :: U32) :: (U8
                                            , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = 2 :: U32
                           and v1' = i :: U32
                           and v' = v' :: U32 * v1' :: U32 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , j :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32) :: (U8, U32, U32) :: (U8
                                                                    , U32
                                                                    , U32)
            in (c' :: U8
               , j :: U32
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_si9 : (U32, U32) -> U32
cogent_si9 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , j :: U32
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , j :: U32
                          , i :: U32) = let v' = let v' = i :: U32
            and v1' = 0 :: U32
            and v' = v' :: U32 == v1' :: U32 :: U32
            in v' :: U32 :: U32
         in if v' :: U32
            then let (c' :: U8
                     , j :: U32) = let (v' :: U32
                                       , j :: U32) = let v1' = 1 :: U32
                     and v' = j :: U32
                     and v' = v' :: U32 + v1' :: U32 :: U32
                     and (v' :: U32
                         , j :: U32) = (j :: U32
                                       , v' :: U32)
                     in (v' :: U32, j :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, j :: U32) :: (U8
                                            , U32)
               in (c' :: U8
                  , j :: U32
                  , i :: U32) :: (U8, U32, U32)
            else let (c' :: U8
                     , i :: U32) = let (v' :: U32
                                       , i :: U32) = let v1' = 1 :: U32
                     and v' = i :: U32
                     and v' = v' :: U32 + v1' :: U32 :: U32
                     and (v' :: U32
                         , i :: U32) = (i :: U32
                                       , v' :: U32)
                     in (v' :: U32, i :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in (c' :: U8
                  , j :: U32
                  , i :: U32) :: (U8
                                 , U32
                                 , U32) :: (U8, U32, U32) :: (U8
                                                             , U32
                                                             , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , j :: U32
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , i :: U32) = let (v' :: U32
                                                       , i :: U32) = let v1' = 2 :: U32
                     and v2' = j :: U32
                     and v1' = v1' :: U32 * v2' :: U32 :: U32
                     and v' = i :: U32
                     and v' = v1' :: U32
                     and (v' :: U32
                         , i :: U32) = (v' :: U32
                                       , v' :: U32)
                     in (v' :: U32, i :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, i :: U32) :: (U8
                                            , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = 2 :: U32
                           and v1' = j :: U32
                           and v' = v' :: U32 * v1' :: U32 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32) :: (U8, U32, U32) :: (U8
                                                                    , U32
                                                                    , U32)
            in (c' :: U8
               , j :: U32
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sc1 : (U32, U32) -> U32
cogent_sc1 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v' :: U32
                                            , i :: U32) = let v1' = 2 :: U32
            and v2' = j :: U32
            and v1' = v1' :: U32 * v2' :: U32 :: U32
            and v' = i :: U32
            and v' = v' :: U32 + v1' :: U32 :: U32
            and (v' :: U32
                , i :: U32) = (v' :: U32
                              , v' :: U32)
            in (v' :: U32, i :: U32) :: (U32
                                        , U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32) = let (v' :: U32
                                                       , j :: U32) = let v1' = 2 :: U32
                     and v2' = i :: U32
                     and v1' = v1' :: U32 * v2' :: U32 :: U32
                     and v' = j :: U32
                     and v' = v' :: U32 + v1' :: U32 :: U32
                     and (v' :: U32
                         , j :: U32) = (v' :: U32
                                       , v' :: U32)
                     in (v' :: U32, j :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, j :: U32) :: (U8
                                            , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , i :: U32
                           , r' :: U32) = let (c' :: U8
                                              , i :: U32) = let (v' :: U32
                                                                , i :: U32) = let v1' = i :: U32
                              and v2' = j :: U32
                              and v1' = v1' :: U32 + v2' :: U32 :: U32
                              and v' = i :: U32
                              and v' = v1' :: U32
                              and (v' :: U32
                                  , i :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, i :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , i :: U32
                                , r' :: U32)
                           else let (c' :: U8
                                    , r' :: U32) = let v' = let v' = j :: U32
                                    and v1' = i :: U32
                                    and v' = v' :: U32 * v1' :: U32 :: U32
                                    in v' :: U32 :: U32
                                 in (3 :: U8, v' :: U32) :: (U8
                                                            , U32)
                              in (c' :: U8
                                 , i :: U32
                                 , r' :: U32) :: (U8
                                                 , U32
                                                 , U32) :: (U8, U32, U32) :: (U8
                                                                             , U32
                                                                             , U32)
                     in (c' :: U8
                        , j :: U32
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32) :: (U8
                                                  , U32
                                                  , U32
                                                  , U32) :: (U8, U32, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sc2 : (U32, U32) -> U32
cogent_sc2 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v' :: U32
                                            , i :: U32) = let v1' = 2 :: U32
            and v2' = j :: U32
            and v1' = v1' :: U32 * v2' :: U32 :: U32
            and v' = i :: U32
            and v' = v' :: U32 + v1' :: U32 :: U32
            and (v' :: U32
                , i :: U32) = (v' :: U32
                              , v' :: U32)
            in (v' :: U32, i :: U32) :: (U32
                                        , U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32
                                     , i :: U32) = let v' = let v' = i :: U32
                     and v1' = 13 :: U32
                     and v' = v' :: U32 > v1' :: U32 :: U32
                     in v' :: U32 :: U32
                  in if v' :: U32
                     then let (c' :: U8
                              , j :: U32
                              , i :: U32) = let (c' :: U8
                                                , j :: U32) = let (v' :: U32
                                                                  , j :: U32) = let v1' = 2 :: U32
                                 and v2' = i :: U32
                                 and v1' = v1' :: U32 * v2' :: U32 :: U32
                                 and v' = j :: U32
                                 and v' = v' :: U32 + v1' :: U32 :: U32
                                 and (v' :: U32
                                     , j :: U32) = (v' :: U32
                                                   , v' :: U32)
                                 in (v' :: U32, j :: U32) :: (U32
                                                             , U32)
                              in (0 :: U8, j :: U32) :: (U8
                                                        , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8
                                   , j :: U32
                                   , i :: U32)
                              else let (c' :: U8
                                       , i :: U32) = let (v' :: U32
                                                         , i :: U32) = let v1' = 2 :: U32
                                       and v2' = j :: U32
                                       and v1' = v1' :: U32 * v2' :: U32 :: U32
                                       and v' = i :: U32
                                       and v' = v' :: U32 + v1' :: U32 :: U32
                                       and (v' :: U32
                                           , i :: U32) = (v' :: U32
                                                         , v' :: U32)
                                       in (v' :: U32, i :: U32) :: (U32
                                                                   , U32)
                                    in (0 :: U8, i :: U32) :: (U8
                                                              , U32)
                                 in (c' :: U8
                                    , j :: U32
                                    , i :: U32) :: (U8
                                                   , U32
                                                   , U32) :: (U8
                                                             , U32
                                                             , U32) :: (U8
                                                                       , U32
                                                                       , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8, U32, U32)
                     else let (c' :: U8
                              , i :: U32
                              , j :: U32) = let (c' :: U8
                                                , i :: U32) = let (v' :: U32
                                                                  , i :: U32) = let v1' = 1 :: U32
                                 and v' = i :: U32
                                 and v' = v' :: U32 + v1' :: U32 :: U32
                                 and (v' :: U32
                                     , i :: U32) = (i :: U32
                                                   , v' :: U32)
                                 in (v' :: U32, i :: U32) :: (U32
                                                             , U32)
                              in (0 :: U8, i :: U32) :: (U8
                                                        , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8
                                   , i :: U32
                                   , j :: U32)
                              else let (c' :: U8
                                       , j :: U32) = let (v' :: U32
                                                         , j :: U32) = let v1' = 1 :: U32
                                       and v' = j :: U32
                                       and v' = v' :: U32 - v1' :: U32 :: U32
                                       and (v' :: U32
                                           , j :: U32) = (j :: U32
                                                         , v' :: U32)
                                       in (v' :: U32, j :: U32) :: (U32
                                                                   , U32)
                                    in (0 :: U8, j :: U32) :: (U8
                                                              , U32)
                                 in (c' :: U8
                                    , i :: U32
                                    , j :: U32) :: (U8
                                                   , U32
                                                   , U32) :: (U8
                                                             , U32
                                                             , U32) :: (U8
                                                                       , U32
                                                                       , U32)
                        in (c' :: U8
                           , j :: U32
                           , i :: U32) :: (U8
                                          , U32
                                          , U32) :: (U8, U32, U32) :: (U8
                                                                      , U32
                                                                      , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , j :: U32
                           , i :: U32
                           , r' :: U32) = let (c' :: U8
                                              , j :: U32) = let v' = let v' = j :: U32
                              and v1' = 0 :: U32
                              and v' = v' :: U32 == v1' :: U32 :: U32
                              in v' :: U32 :: U32
                           in if v' :: U32
                              then let (c' :: U8
                                       , j :: U32) = let (v' :: U32
                                                         , j :: U32) = let v1' = 15 :: U32
                                       and v' = j :: U32
                                       and v' = v1' :: U32
                                       and (v' :: U32
                                           , j :: U32) = (v' :: U32
                                                         , v' :: U32)
                                       in (v' :: U32, j :: U32) :: (U32
                                                                   , U32)
                                    in (0 :: U8, j :: U32) :: (U8
                                                              , U32)
                                 in (c' :: U8, j :: U32) :: (U8
                                                            , U32)
                              else let c' = 0 :: U8
                                 in (c' :: U8, j :: U32) :: (U8
                                                            , U32) :: (U8
                                                                      , U32) :: (U8
                                                                                , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , j :: U32
                                , i :: U32
                                , r' :: U32)
                           else let (c' :: U8
                                    , i :: U32
                                    , r' :: U32) = let (c' :: U8
                                                       , i :: U32) = let (v' :: U32
                                                                         , i :: U32) = let v1' = j :: U32
                                       and v' = i :: U32
                                       and v' = v' :: U32 + v1' :: U32 :: U32
                                       and (v' :: U32
                                           , i :: U32) = (v' :: U32
                                                         , v' :: U32)
                                       in (v' :: U32, i :: U32) :: (U32
                                                                   , U32)
                                    in (0 :: U8, i :: U32) :: (U8
                                                              , U32)
                                 in if c' :: U8 > 0 :: U8 :: Bool
                                    then (c' :: U8
                                         , i :: U32
                                         , r' :: U32)
                                    else let (c' :: U8
                                             , r' :: U32) = let v' = let v' = i :: U32
                                             in v' :: U32 :: U32
                                          in (3 :: U8, v' :: U32) :: (U8
                                                                     , U32)
                                       in (c' :: U8
                                          , i :: U32
                                          , r' :: U32) :: (U8
                                                          , U32
                                                          , U32) :: (U8
                                                                    , U32
                                                                    , U32) :: (U8
                                                                              , U32
                                                                              , U32)
                              in (c' :: U8
                                 , j :: U32
                                 , i :: U32
                                 , r' :: U32) :: (U8
                                                 , U32
                                                 , U32
                                                 , U32) :: (U8
                                                           , U32
                                                           , U32
                                                           , U32) :: (U8
                                                                     , U32
                                                                     , U32
                                                                     , U32)
                     in (c' :: U8
                        , j :: U32
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32) :: (U8
                                                  , U32
                                                  , U32
                                                  , U32) :: (U8, U32, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd1 : (U32, U32) -> U32
cogent_sd1 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v' :: U32
                                            , i :: U32) = let v1' = 2 :: U32
            and v2' = j :: U32
            and v1' = v1' :: U32 * v2' :: U32 :: U32
            and v' = i :: U32
            and v' = v' :: U32 + v1' :: U32 :: U32
            and (v' :: U32
                , i :: U32) = (v' :: U32
                              , v' :: U32)
            in (v' :: U32, i :: U32) :: (U32
                                        , U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , r' :: U32) = let v' = let v' = j :: U32
                  and v1' = 7 :: U32
                  and v' = v' :: U32 + v1' :: U32 :: U32
                  in v' :: U32 :: U32
               and (c' :: U8
                   , j :: U32
                   , r' :: U32) = let k = v' :: U32
                  and (c' :: U8
                      , j :: U32
                      , k :: U32
                      , r' :: U32) = let (c' :: U8
                                         , j :: U32) = let (v' :: U32
                                                           , j :: U32) = let v1' = i :: U32
                           and v2' = k :: U32
                           and v1' = v1' :: U32 + v2' :: U32 :: U32
                           and v' = j :: U32
                           and v' = v' :: U32 + v1' :: U32 :: U32
                           and (v' :: U32
                               , j :: U32) = (v' :: U32
                                             , v' :: U32)
                           in (v' :: U32, j :: U32) :: (U32
                                                       , U32)
                        in (0 :: U8, j :: U32) :: (U8
                                                  , U32)
                     in if c' :: U8 > 0 :: U8 :: Bool
                        then (c' :: U8
                             , j :: U32
                             , k :: U32
                             , r' :: U32)
                        else let (c' :: U8
                                 , k :: U32
                                 , r' :: U32) = let (c' :: U8
                                                    , k :: U32) = let (v' :: U32
                                                                      , k :: U32) = let v1' = j :: U32
                                    and v2' = i :: U32
                                    and v1' = v1' :: U32 + v2' :: U32 :: U32
                                    and v' = k :: U32
                                    and v' = v' :: U32 + v1' :: U32 :: U32
                                    and (v' :: U32
                                        , k :: U32) = (v' :: U32
                                                      , v' :: U32)
                                    in (v' :: U32, k :: U32) :: (U32
                                                                , U32)
                                 in (0 :: U8, k :: U32) :: (U8
                                                           , U32)
                              in if c' :: U8 > 0 :: U8 :: Bool
                                 then (c' :: U8
                                      , k :: U32
                                      , r' :: U32)
                                 else let (c' :: U8
                                          , r' :: U32) = let v' = let v' = k :: U32
                                          in v' :: U32 :: U32
                                       in (3 :: U8, v' :: U32) :: (U8
                                                                  , U32)
                                    in (c' :: U8
                                       , k :: U32
                                       , r' :: U32) :: (U8
                                                       , U32
                                                       , U32) :: (U8
                                                                 , U32
                                                                 , U32) :: (U8
                                                                           , U32
                                                                           , U32)
                           in (c' :: U8
                              , j :: U32
                              , k :: U32
                              , r' :: U32) :: (U8
                                              , U32
                                              , U32
                                              , U32) :: (U8
                                                        , U32
                                                        , U32
                                                        , U32) :: (U8
                                                                  , U32
                                                                  , U32
                                                                  , U32)
                  in (c' :: U8
                     , j :: U32
                     , r' :: U32) :: (U8, U32, U32)
               in (c' :: U8
                  , j :: U32
                  , r' :: U32) :: (U8, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd2 : (U32, U32) -> U32
cogent_sd2 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v' :: U32
                                            , i :: U32) = let v1' = 2 :: U32
            and v2' = j :: U32
            and v1' = v1' :: U32 * v2' :: U32 :: U32
            and v' = i :: U32
            and v' = v' :: U32 + v1' :: U32 :: U32
            and (v' :: U32
                , i :: U32) = (v' :: U32
                              , v' :: U32)
            in (v' :: U32, i :: U32) :: (U32
                                        , U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32) = let v' = let v' = j :: U32
                     and v1' = 7 :: U32
                     and v' = v' :: U32 + v1' :: U32 :: U32
                     in v' :: U32 :: U32
                  and (c' :: U8
                      , j :: U32) = let i = v' :: U32
                     and (c' :: U8
                         , j :: U32
                         , i :: U32) = let (c' :: U8
                                           , j :: U32) = let (v' :: U32
                                                             , j :: U32) = let v1' = i :: U32
                              and v2' = i :: U32
                              and v1' = v1' :: U32 + v2' :: U32 :: U32
                              and v' = j :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              and (v' :: U32
                                  , j :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, j :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , j :: U32
                                , i :: U32)
                           else let (c' :: U8
                                    , i :: U32) = let (v' :: U32
                                                      , i :: U32) = let v1' = j :: U32
                                    and v2' = i :: U32
                                    and v1' = v1' :: U32 + v2' :: U32 :: U32
                                    and v' = i :: U32
                                    and v' = v' :: U32 + v1' :: U32 :: U32
                                    and (v' :: U32
                                        , i :: U32) = (v' :: U32
                                                      , v' :: U32)
                                    in (v' :: U32, i :: U32) :: (U32
                                                                , U32)
                                 in (0 :: U8, i :: U32) :: (U8
                                                           , U32)
                              in (c' :: U8
                                 , j :: U32
                                 , i :: U32) :: (U8
                                                , U32
                                                , U32) :: (U8, U32, U32) :: (U8
                                                                            , U32
                                                                            , U32)
                     in (c' :: U8, j :: U32) :: (U8
                                                , U32)
                  in (c' :: U8, j :: U32) :: (U8
                                             , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , r' :: U32) = let v' = let v' = i :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8
                        , j :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32) :: (U8, U32, U32) :: (U8
                                                                    , U32
                                                                    , U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd3 : (U32, U32) -> U32
cogent_sd3 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v' :: U32
                                            , i :: U32) = let v1' = 2 :: U32
            and v2' = j :: U32
            and v1' = v1' :: U32 * v2' :: U32 :: U32
            and v' = i :: U32
            and v' = v' :: U32 + v1' :: U32 :: U32
            and (v' :: U32
                , i :: U32) = (v' :: U32
                              , v' :: U32)
            in (v' :: U32, i :: U32) :: (U32
                                        , U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32) = let v' = let v' = j :: U32
                     and v1' = 7 :: U32
                     and v' = v' :: U32 + v1' :: U32 :: U32
                     in v' :: U32 :: U32
                  and (c' :: U8
                      , j :: U32) = let k = v' :: U32
                     and (c' :: U8
                         , j :: U32
                         , k :: U32) = let (c' :: U8
                                           , j :: U32) = let (v' :: U32
                                                             , j :: U32) = let v1' = i :: U32
                              and v2' = k :: U32
                              and v1' = v1' :: U32 + v2' :: U32 :: U32
                              and v' = j :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              and (v' :: U32
                                  , j :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, j :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , j :: U32
                                , k :: U32)
                           else let (c' :: U8
                                    , k :: U32) = let (v' :: U32
                                                      , k :: U32) = let v1' = 15 :: U32
                                    and v' = k :: U32
                                    and v' = v1' :: U32
                                    and (v' :: U32
                                        , k :: U32) = (v' :: U32
                                                      , v' :: U32)
                                    in (v' :: U32, k :: U32) :: (U32
                                                                , U32)
                                 in (0 :: U8, k :: U32) :: (U8
                                                           , U32)
                              in (c' :: U8
                                 , j :: U32
                                 , k :: U32) :: (U8
                                                , U32
                                                , U32) :: (U8, U32, U32) :: (U8
                                                                            , U32
                                                                            , U32)
                     in (c' :: U8, j :: U32) :: (U8
                                                , U32)
                  in (c' :: U8, j :: U32) :: (U8
                                             , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , i :: U32
                           , r' :: U32) = let (c' :: U8
                                              , i :: U32) = let (v' :: U32
                                                                , i :: U32) = let v1' = j :: U32
                              and v2' = i :: U32
                              and v1' = v1' :: U32 + v2' :: U32 :: U32
                              and v' = i :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              and (v' :: U32
                                  , i :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, i :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , i :: U32
                                , r' :: U32)
                           else let (c' :: U8
                                    , r' :: U32) = let v' = let v' = i :: U32
                                    in v' :: U32 :: U32
                                 in (3 :: U8, v' :: U32) :: (U8
                                                            , U32)
                              in (c' :: U8
                                 , i :: U32
                                 , r' :: U32) :: (U8
                                                 , U32
                                                 , U32) :: (U8, U32, U32) :: (U8
                                                                             , U32
                                                                             , U32)
                     in (c' :: U8
                        , j :: U32
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32) :: (U8
                                                  , U32
                                                  , U32
                                                  , U32) :: (U8, U32, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd4 : (U32, U32) -> U32
cogent_sd4 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v' :: U32
                                            , i :: U32) = let v1' = 2 :: U32
            and v2' = j :: U32
            and v1' = v1' :: U32 * v2' :: U32 :: U32
            and v' = i :: U32
            and v' = v' :: U32 + v1' :: U32 :: U32
            and (v' :: U32
                , i :: U32) = (v' :: U32
                              , v' :: U32)
            in (v' :: U32, i :: U32) :: (U32
                                        , U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , i :: U32
                  , r' :: U32) = let (c' :: U8
                                     , j :: U32) = let v' = let v' = i :: U32
                     and v1' = 0 :: U32
                     and v' = v' :: U32 == v1' :: U32 :: U32
                     in v' :: U32 :: U32
                  in if v' :: U32
                     then let (c' :: U8
                              , j :: U32) = let v' = let v' = j :: U32
                              and v1' = 7 :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              in v' :: U32 :: U32
                           and (c' :: U8
                               , j :: U32) = let k = v' :: U32
                              and (c' :: U8
                                  , j :: U32
                                  , k :: U32) = let (c' :: U8
                                                    , j :: U32) = let (v' :: U32
                                                                      , j :: U32) = let v1' = i :: U32
                                       and v2' = k :: U32
                                       and v1' = v1' :: U32 + v2' :: U32 :: U32
                                       and v' = j :: U32
                                       and v' = v' :: U32 + v1' :: U32 :: U32
                                       and (v' :: U32
                                           , j :: U32) = (v' :: U32
                                                         , v' :: U32)
                                       in (v' :: U32, j :: U32) :: (U32
                                                                   , U32)
                                    in (0 :: U8, j :: U32) :: (U8
                                                              , U32)
                                 in if c' :: U8 > 0 :: U8 :: Bool
                                    then (c' :: U8
                                         , j :: U32
                                         , k :: U32)
                                    else let (c' :: U8
                                             , k :: U32) = let (v' :: U32
                                                               , k :: U32) = let v1' = 15 :: U32
                                             and v' = k :: U32
                                             and v' = v1' :: U32
                                             and (v' :: U32
                                                 , k :: U32) = (v' :: U32
                                                               , v' :: U32)
                                             in (v' :: U32, k :: U32) :: (U32
                                                                         , U32)
                                          in (0 :: U8, k :: U32) :: (U8
                                                                    , U32)
                                       in (c' :: U8
                                          , j :: U32
                                          , k :: U32) :: (U8
                                                         , U32
                                                         , U32) :: (U8
                                                                   , U32
                                                                   , U32) :: (U8
                                                                             , U32
                                                                             , U32)
                              in (c' :: U8, j :: U32) :: (U8
                                                         , U32)
                           in (c' :: U8, j :: U32) :: (U8
                                                      , U32)
                        in (c' :: U8, j :: U32) :: (U8
                                                   , U32)
                     else let (c' :: U8
                              , j :: U32) = let (v' :: U32
                                                , j :: U32) = let v1' = i :: U32
                              and v2' = 3 :: U32
                              and v1' = v1' :: U32 + v2' :: U32 :: U32
                              and v' = j :: U32
                              and v' = v1' :: U32
                              and (v' :: U32
                                  , j :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, j :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, j :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8, j :: U32) :: (U8
                                                   , U32) :: (U8, U32) :: (U8
                                                                          , U32)
               in if c' :: U8 > 0 :: U8 :: Bool
                  then (c' :: U8
                       , j :: U32
                       , i :: U32
                       , r' :: U32)
                  else let (c' :: U8
                           , i :: U32
                           , r' :: U32) = let (c' :: U8
                                              , i :: U32) = let (v' :: U32
                                                                , i :: U32) = let v1' = j :: U32
                              and v2' = i :: U32
                              and v1' = v1' :: U32 + v2' :: U32 :: U32
                              and v' = i :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              and (v' :: U32
                                  , i :: U32) = (v' :: U32
                                                , v' :: U32)
                              in (v' :: U32, i :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in if c' :: U8 > 0 :: U8 :: Bool
                           then (c' :: U8
                                , i :: U32
                                , r' :: U32)
                           else let (c' :: U8
                                    , r' :: U32) = let v' = let v' = i :: U32
                                    in v' :: U32 :: U32
                                 in (3 :: U8, v' :: U32) :: (U8
                                                            , U32)
                              in (c' :: U8
                                 , i :: U32
                                 , r' :: U32) :: (U8
                                                 , U32
                                                 , U32) :: (U8, U32, U32) :: (U8
                                                                             , U32
                                                                             , U32)
                     in (c' :: U8
                        , j :: U32
                        , i :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32) :: (U8
                                                  , U32
                                                  , U32
                                                  , U32) :: (U8, U32, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd5 : (U32, U32) -> U32
cogent_sd5 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v' :: U32
                                            , i :: U32) = let v1' = 2 :: U32
            and v2' = j :: U32
            and v1' = v1' :: U32 * v2' :: U32 :: U32
            and v' = i :: U32
            and v' = v' :: U32 + v1' :: U32 :: U32
            and (v' :: U32
                , i :: U32) = (v' :: U32
                              , v' :: U32)
            in (v' :: U32, i :: U32) :: (U32
                                        , U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , r' :: U32) = let v' = let v' = defaultVal[U32]{{}} :: () -> U32 () :: () :: U32
                  in v' :: U32 :: U32
               and (c' :: U8
                   , j :: U32
                   , r' :: U32) = let k1 = v' :: U32
                  and (c' :: U8
                      , k1 :: U32
                      , j :: U32
                      , r' :: U32) = let v' = let v' = defaultVal[U32]{{}} :: () -> U32 () :: () :: U32
                        in v' :: U32 :: U32
                     and (c' :: U8
                         , k1 :: U32
                         , j :: U32
                         , r' :: U32) = let k2 = v' :: U32
                        and (c' :: U8
                            , k1 :: U32
                            , k2 :: U32
                            , j :: U32
                            , r' :: U32) = let (c' :: U8
                                               , k1 :: U32) = let (v' :: U32
                                                                  , k1 :: U32) = let v1' = i :: U32
                                 and v2' = 1 :: U32
                                 and v1' = v1' :: U32 + v2' :: U32 :: U32
                                 and v' = k1 :: U32
                                 and v' = v1' :: U32
                                 and (v' :: U32
                                     , k1 :: U32) = (v' :: U32
                                                    , v' :: U32)
                                 in (v' :: U32
                                    , k1 :: U32) :: (U32, U32)
                              in (0 :: U8, k1 :: U32) :: (U8
                                                         , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8
                                   , k1 :: U32
                                   , k2 :: U32
                                   , j :: U32
                                   , r' :: U32)
                              else let (c' :: U8
                                       , k2 :: U32
                                       , j :: U32
                                       , k1 :: U32
                                       , r' :: U32) = let (c' :: U8
                                                          , k2 :: U32) = let (v' :: U32
                                                                             , k2 :: U32) = let v1' = j :: U32
                                          and v2' = 1 :: U32
                                          and v1' = v1' :: U32 + v2' :: U32 :: U32
                                          and v' = k2 :: U32
                                          and v' = v1' :: U32
                                          and (v' :: U32
                                              , k2 :: U32) = (v' :: U32
                                                             , v' :: U32)
                                          in (v' :: U32
                                             , k2 :: U32) :: (U32, U32)
                                       in (0 :: U8, k2 :: U32) :: (U8
                                                                  , U32)
                                    in if c' :: U8 > 0 :: U8 :: Bool
                                       then (c' :: U8
                                            , k2 :: U32
                                            , j :: U32
                                            , k1 :: U32
                                            , r' :: U32)
                                       else let (c' :: U8
                                                , j :: U32
                                                , k1 :: U32
                                                , r' :: U32) = let (c' :: U8
                                                                   , j :: U32) = let (v' :: U32
                                                                                     , j :: U32) = let v1' = k1 :: U32
                                                   and v2' = k2 :: U32
                                                   and v1' = v1' :: U32 + v2' :: U32 :: U32
                                                   and v' = j :: U32
                                                   and v' = v' :: U32 + v1' :: U32 :: U32
                                                   and (v' :: U32
                                                       , j :: U32) = (v' :: U32
                                                                     , v' :: U32)
                                                   in (v' :: U32
                                                      , j :: U32) :: (U32, U32)
                                                in (0 :: U8, j :: U32) :: (U8
                                                                          , U32)
                                             in if c' :: U8 > 0 :: U8 :: Bool
                                                then (c' :: U8
                                                     , j :: U32
                                                     , k1 :: U32
                                                     , r' :: U32)
                                                else let (c' :: U8
                                                         , k1 :: U32
                                                         , r' :: U32) = let (c' :: U8
                                                                            , k1 :: U32) = let (v' :: U32
                                                                                               , k1 :: U32) = let v1' = j :: U32
                                                            and v2' = i :: U32
                                                            and v1' = v1' :: U32 + v2' :: U32 :: U32
                                                            and v' = k1 :: U32
                                                            and v' = v' :: U32 + v1' :: U32 :: U32
                                                            and (v' :: U32
                                                                , k1 :: U32) = (v' :: U32
                                                                               , v' :: U32)
                                                            in (v' :: U32
                                                               , k1 :: U32) :: (U32
                                                                               , U32)
                                                         in (0 :: U8
                                                            , k1 :: U32) :: (U8
                                                                            , U32)
                                                      in if c' :: U8 > 0 :: U8 :: Bool
                                                         then (c' :: U8
                                                              , k1 :: U32
                                                              , r' :: U32)
                                                         else let (c' :: U8
                                                                  , r' :: U32) = let v' = let v' = k1 :: U32
                                                                  in v' :: U32 :: U32
                                                               in (3 :: U8
                                                                  , v' :: U32) :: (U8
                                                                                  , U32)
                                                            in (c' :: U8
                                                               , k1 :: U32
                                                               , r' :: U32) :: (U8
                                                                               , U32
                                                                               , U32) :: (U8
                                                                                         , U32
                                                                                         , U32) :: (U8
                                                                                                   , U32
                                                                                                   , U32)
                                                   in (c' :: U8
                                                      , j :: U32
                                                      , k1 :: U32
                                                      , r' :: U32) :: (U8
                                                                      , U32
                                                                      , U32
                                                                      , U32) :: (U8
                                                                                , U32
                                                                                , U32
                                                                                , U32) :: (U8
                                                                                          , U32
                                                                                          , U32
                                                                                          , U32)
                                          in (c' :: U8
                                             , k2 :: U32
                                             , j :: U32
                                             , k1 :: U32
                                             , r' :: U32) :: (U8
                                                             , U32
                                                             , U32
                                                             , U32
                                                             , U32) :: (U8
                                                                       , U32
                                                                       , U32
                                                                       , U32
                                                                       , U32) :: (U8
                                                                                 , U32
                                                                                 , U32
                                                                                 , U32
                                                                                 , U32)
                                 in (c' :: U8
                                    , k1 :: U32
                                    , k2 :: U32
                                    , j :: U32
                                    , r' :: U32) :: (U8
                                                    , U32
                                                    , U32
                                                    , U32
                                                    , U32) :: (U8
                                                              , U32
                                                              , U32
                                                              , U32
                                                              , U32) :: (U8
                                                                        , U32
                                                                        , U32
                                                                        , U32
                                                                        , U32)
                        in (c' :: U8
                           , k1 :: U32
                           , j :: U32
                           , r' :: U32) :: (U8
                                           , U32
                                           , U32
                                           , U32)
                     in (c' :: U8
                        , k1 :: U32
                        , j :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32)
                  in (c' :: U8
                     , j :: U32
                     , r' :: U32) :: (U8, U32, U32)
               in (c' :: U8
                  , j :: U32
                  , r' :: U32) :: (U8, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_sd6 : (U32, U32) -> U32
cogent_sd6 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , i :: U32
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , i :: U32) = let (v' :: U32
                                            , i :: U32) = let v1' = 2 :: U32
            and v2' = j :: U32
            and v1' = v1' :: U32 * v2' :: U32 :: U32
            and v' = i :: U32
            and v' = v' :: U32 + v1' :: U32 :: U32
            and (v' :: U32
                , i :: U32) = (v' :: U32
                              , v' :: U32)
            in (v' :: U32, i :: U32) :: (U32
                                        , U32)
         in (0 :: U8, i :: U32) :: (U8
                                   , U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , i :: U32
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , j :: U32
                  , r' :: U32) = let v' = let v' = defaultVal[U32]{{}} :: () -> U32 () :: () :: U32
                  in v' :: U32 :: U32
               and (c' :: U8
                   , j :: U32
                   , r' :: U32) = let k1 = v' :: U32
                  and (c' :: U8
                      , k1 :: U32
                      , j :: U32
                      , r' :: U32) = let v' = let v' = 42 :: U32
                        in v' :: U32 :: U32
                     and (c' :: U8
                         , k1 :: U32
                         , j :: U32
                         , r' :: U32) = let k2 = v' :: U32
                        and (c' :: U8
                            , k1 :: U32
                            , j :: U32
                            , r' :: U32) = let (c' :: U8
                                               , k1 :: U32) = let (v' :: U32
                                                                  , k1 :: U32) = let v1' = i :: U32
                                 and v2' = 1 :: U32
                                 and v1' = v1' :: U32 + v2' :: U32 :: U32
                                 and v' = k1 :: U32
                                 and v' = v1' :: U32
                                 and (v' :: U32
                                     , k1 :: U32) = (v' :: U32
                                                    , v' :: U32)
                                 in (v' :: U32
                                    , k1 :: U32) :: (U32, U32)
                              in (0 :: U8, k1 :: U32) :: (U8
                                                         , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8
                                   , k1 :: U32
                                   , j :: U32
                                   , r' :: U32)
                              else let (c' :: U8
                                       , j :: U32
                                       , k1 :: U32
                                       , r' :: U32) = let (c' :: U8
                                                          , j :: U32) = let (v' :: U32
                                                                            , j :: U32) = let v1' = k1 :: U32
                                          and v2' = k2 :: U32
                                          and v1' = v1' :: U32 + v2' :: U32 :: U32
                                          and v' = j :: U32
                                          and v' = v' :: U32 + v1' :: U32 :: U32
                                          and (v' :: U32
                                              , j :: U32) = (v' :: U32
                                                            , v' :: U32)
                                          in (v' :: U32, j :: U32) :: (U32
                                                                      , U32)
                                       in (0 :: U8, j :: U32) :: (U8
                                                                 , U32)
                                    in if c' :: U8 > 0 :: U8 :: Bool
                                       then (c' :: U8
                                            , j :: U32
                                            , k1 :: U32
                                            , r' :: U32)
                                       else let (c' :: U8
                                                , k1 :: U32
                                                , r' :: U32) = let (c' :: U8
                                                                   , k1 :: U32) = let (v' :: U32
                                                                                      , k1 :: U32) = let v1' = j :: U32
                                                   and v2' = i :: U32
                                                   and v1' = v1' :: U32 + v2' :: U32 :: U32
                                                   and v' = k1 :: U32
                                                   and v' = v' :: U32 + v1' :: U32 :: U32
                                                   and (v' :: U32
                                                       , k1 :: U32) = (v' :: U32
                                                                      , v' :: U32)
                                                   in (v' :: U32
                                                      , k1 :: U32) :: (U32, U32)
                                                in (0 :: U8, k1 :: U32) :: (U8
                                                                           , U32)
                                             in if c' :: U8 > 0 :: U8 :: Bool
                                                then (c' :: U8
                                                     , k1 :: U32
                                                     , r' :: U32)
                                                else let (c' :: U8
                                                         , r' :: U32) = let v' = let v' = k1 :: U32
                                                         in v' :: U32 :: U32
                                                      in (3 :: U8
                                                         , v' :: U32) :: (U8
                                                                         , U32)
                                                   in (c' :: U8
                                                      , k1 :: U32
                                                      , r' :: U32) :: (U8
                                                                      , U32
                                                                      , U32) :: (U8
                                                                                , U32
                                                                                , U32) :: (U8
                                                                                          , U32
                                                                                          , U32)
                                          in (c' :: U8
                                             , j :: U32
                                             , k1 :: U32
                                             , r' :: U32) :: (U8
                                                             , U32
                                                             , U32
                                                             , U32) :: (U8
                                                                       , U32
                                                                       , U32
                                                                       , U32) :: (U8
                                                                                 , U32
                                                                                 , U32
                                                                                 , U32)
                                 in (c' :: U8
                                    , k1 :: U32
                                    , j :: U32
                                    , r' :: U32) :: (U8
                                                    , U32
                                                    , U32
                                                    , U32) :: (U8
                                                              , U32
                                                              , U32
                                                              , U32) :: (U8
                                                                        , U32
                                                                        , U32
                                                                        , U32)
                        in (c' :: U8
                           , k1 :: U32
                           , j :: U32
                           , r' :: U32) :: (U8
                                           , U32
                                           , U32
                                           , U32)
                     in (c' :: U8
                        , k1 :: U32
                        , j :: U32
                        , r' :: U32) :: (U8
                                        , U32
                                        , U32
                                        , U32)
                  in (c' :: U8
                     , j :: U32
                     , r' :: U32) :: (U8, U32, U32)
               in (c' :: U8
                  , j :: U32
                  , r' :: U32) :: (U8, U32, U32)
            in (c' :: U8
               , i :: U32
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_ss1 : U32 -> U32
cogent_ss1 i :: U32 =
   let (_ :: U8
       , r' :: U32) = let s' = let v' = i :: U32
         in v' :: U32 :: U32
      and s1' = s' :: U32 == (let v' = 0 :: U32
            in v' :: U32 :: U32) :: Bool
      and (c' :: U8
          , r' :: U32) = let (c' :: U8
                             , r' :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , r' :: U32) = let v' = let v' = i :: U32
                     in v' :: U32 :: U32
                  in (3 :: U8, v' :: U32) :: (U8
                                             , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32)
            else (0 :: U8, r' :: U32) :: (U8
                                         , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8, r' :: U32)
            else let c' = 0 :: U8
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , r' :: U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss2 : U32 -> U32
cogent_ss2 i :: U32 =
   let (_ :: U8
       , r' :: U32) = let s' = let v' = i :: U32
         in v' :: U32 :: U32
      and s1' = True :: Bool
      and (c' :: U8
          , r' :: U32) = let (c' :: U8
                             , r' :: U32) = let (c' :: U8
                                                , r' :: U32) = let v' = let v' = 0 :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8, r' :: U32)
            else let c' = 0 :: U8
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , r' :: U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss3 : U32 -> U32
cogent_ss3 i :: U32 =
   let (_ :: U8
       , r' :: U32) = let s' = let v' = i :: U32
         in v' :: U32 :: U32
      and (s1' :: Bool
          , s2' :: Bool) = (s' :: U32 == (let v' = 0 :: U32
                              in v' :: U32 :: U32) :: Bool
                           , True :: Bool)
      and (c' :: U8
          , r' :: U32) = let (c' :: U8
                             , r' :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , r' :: U32) = let v' = let v' = i :: U32
                     in v' :: U32 :: U32
                  in (3 :: U8, v' :: U32) :: (U8
                                             , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32)
            else (0 :: U8, r' :: U32) :: (U8
                                         , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8, r' :: U32)
            else let (c' :: U8
                     , r' :: U32) = let (c' :: U8
                                        , r' :: U32) = let (c' :: U8
                                                           , r' :: U32) = let v' = let v' = 0 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8, r' :: U32) :: (U8
                                                 , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8, r' :: U32)
                     else let c' = 0 :: U8
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32) :: (U8, U32) :: (U8
                                                                           , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , r' :: U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss4 : U32 -> U32
cogent_ss4 i :: U32 =
   let (_ :: U8
       , r' :: U32) = let s' = let v' = i :: U32
         in v' :: U32 :: U32
      and (s1' :: Bool
          , s2' :: Bool
          , s3' :: Bool) = (s' :: U32 == (let v' = 0 :: U32
                              in v' :: U32 :: U32) :: Bool
                           , s' :: U32 == (let v' = 1 :: U32
                              in v' :: U32 :: U32) :: Bool
                           , True :: Bool)
      and (c' :: U8
          , r' :: U32) = let (c' :: U8
                             , r' :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , r' :: U32) = let v' = let v' = i :: U32
                     in v' :: U32 :: U32
                  in (3 :: U8, v' :: U32) :: (U8
                                             , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32)
            else (0 :: U8, r' :: U32) :: (U8
                                         , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8, r' :: U32)
            else let (c' :: U8
                     , r' :: U32) = let (c' :: U8
                                        , r' :: U32) = if s1' :: Bool || s2' :: Bool :: Bool
                     then let (c' :: U8
                              , r' :: U32) = let v' = let v' = i :: U32
                              and v1' = 5 :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              in v' :: U32 :: U32
                           in (3 :: U8, v' :: U32) :: (U8
                                                      , U32)
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32)
                     else (0 :: U8, r' :: U32) :: (U8
                                                  , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8, r' :: U32)
                     else let (c' :: U8
                              , r' :: U32) = let (c' :: U8
                                                 , r' :: U32) = let (c' :: U8
                                                                    , r' :: U32) = let v' = let v' = 0 :: U32
                                    in v' :: U32 :: U32
                                 in (3 :: U8, v' :: U32) :: (U8
                                                            , U32)
                              in (c' :: U8, r' :: U32) :: (U8
                                                          , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8, r' :: U32)
                              else let c' = 0 :: U8
                                 in (c' :: U8, r' :: U32) :: (U8
                                                             , U32) :: (U8
                                                                       , U32) :: (U8
                                                                                 , U32)
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32) :: (U8, U32) :: (U8
                                                                           , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , r' :: U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss5 : U32 -> U32
cogent_ss5 i :: U32 =
   let (_ :: U8
       , r' :: U32) = let s' = let v' = i :: U32
         in v' :: U32 :: U32
      and (s1' :: Bool
          , s2' :: Bool
          , s3' :: Bool) = (s' :: U32 == (let v' = 0 :: U32
                              in v' :: U32 :: U32) :: Bool
                           , True :: Bool
                           , s' :: U32 == (let v' = 1 :: U32
                              in v' :: U32 :: U32) :: Bool)
      and (c' :: U8
          , r' :: U32) = let (c' :: U8
                             , r' :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , r' :: U32) = let v' = let v' = i :: U32
                     in v' :: U32 :: U32
                  in (3 :: U8, v' :: U32) :: (U8
                                             , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32)
            else (0 :: U8, r' :: U32) :: (U8
                                         , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8, r' :: U32)
            else let (c' :: U8
                     , r' :: U32) = let (c' :: U8
                                        , r' :: U32) = if not s3' :: Bool :: Bool
                     then let (c' :: U8
                              , r' :: U32) = let v' = let v' = 0 :: U32
                              in v' :: U32 :: U32
                           in (3 :: U8, v' :: U32) :: (U8
                                                      , U32)
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32)
                     else (0 :: U8, r' :: U32) :: (U8
                                                  , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8, r' :: U32)
                     else let (c' :: U8
                              , r' :: U32) = let (c' :: U8
                                                 , r' :: U32) = let (c' :: U8
                                                                    , r' :: U32) = let v' = let v' = i :: U32
                                    and v1' = 5 :: U32
                                    and v' = v' :: U32 + v1' :: U32 :: U32
                                    in v' :: U32 :: U32
                                 in (3 :: U8, v' :: U32) :: (U8
                                                            , U32)
                              in (c' :: U8, r' :: U32) :: (U8
                                                          , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8, r' :: U32)
                              else let c' = 0 :: U8
                                 in (c' :: U8, r' :: U32) :: (U8
                                                             , U32) :: (U8
                                                                       , U32) :: (U8
                                                                                 , U32)
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32) :: (U8, U32) :: (U8
                                                                           , U32)
               in (c' :: U8, r' :: U32) :: (U8
                                           , U32) :: (U8, U32) :: (U8, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , r' :: U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss6 : (U32, U32) -> U32
cogent_ss6 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , j :: U32
       , i :: U32
       , r' :: U32) = let s' = let v' = i :: U32
         in v' :: U32 :: U32
      and (s1' :: Bool
          , s2' :: Bool
          , s3' :: Bool
          , s4' :: Bool) = (s' :: U32 == (let v' = 0 :: U32
                              in v' :: U32 :: U32) :: Bool
                           , s' :: U32 == (let v' = 1 :: U32
                              in v' :: U32 :: U32) :: Bool
                           , s' :: U32 == (let v' = 2 :: U32
                              in v' :: U32 :: U32) :: Bool
                           , True :: Bool)
      and (c' :: U8
          , j :: U32
          , i :: U32
          , r' :: U32) = let (c' :: U8
                             , j :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , j :: U32) = let (v' :: U32
                                       , j :: U32) = let v1' = i :: U32
                     and v' = j :: U32
                     and v' = v1' :: U32
                     and (v' :: U32
                         , j :: U32) = (v' :: U32
                                       , v' :: U32)
                     in (v' :: U32, j :: U32) :: (U32
                                                 , U32)
                  in (0 :: U8, j :: U32) :: (U8
                                            , U32)
               in (c' :: U8, j :: U32) :: (U8
                                          , U32)
            else (0 :: U8, j :: U32) :: (U8
                                        , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8
                 , j :: U32
                 , i :: U32
                 , r' :: U32)
            else let (c' :: U8
                     , i :: U32
                     , j :: U32
                     , r' :: U32) = let (c' :: U8
                                        , i :: U32) = if s1' :: Bool || s2' :: Bool :: Bool
                     then let (c' :: U8
                              , i :: U32) = let (v' :: U32
                                                , i :: U32) = let v1' = 1 :: U32
                              and v' = i :: U32
                              and v' = v' :: U32 + v1' :: U32 :: U32
                              and (v' :: U32
                                  , i :: U32) = (i :: U32
                                                , v' :: U32)
                              in (v' :: U32, i :: U32) :: (U32
                                                          , U32)
                           in (0 :: U8, i :: U32) :: (U8
                                                     , U32)
                        in (c' :: U8, i :: U32) :: (U8
                                                   , U32)
                     else (0 :: U8, i :: U32) :: (U8
                                                 , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8
                          , i :: U32
                          , j :: U32
                          , r' :: U32)
                     else let (c' :: U8
                              , j :: U32
                              , r' :: U32) = let (c' :: U8
                                                 , j :: U32) = if s1' :: Bool || s2' :: Bool || s3' :: Bool :: Bool :: Bool
                              then let (c' :: U8
                                       , j :: U32) = let (v' :: U32
                                                         , j :: U32) = let v1' = 5 :: U32
                                       and v' = j :: U32
                                       and v' = v1' :: U32
                                       and (v' :: U32
                                           , j :: U32) = (v' :: U32
                                                         , v' :: U32)
                                       in (v' :: U32, j :: U32) :: (U32
                                                                   , U32)
                                    in (0 :: U8, j :: U32) :: (U8
                                                              , U32)
                                 in (c' :: U8, j :: U32) :: (U8
                                                            , U32)
                              else (0 :: U8, j :: U32) :: (U8
                                                          , U32)
                           in if c' :: U8 > 0 :: U8 :: Bool
                              then (c' :: U8
                                   , j :: U32
                                   , r' :: U32)
                              else let (c' :: U8
                                       , r' :: U32) = let (c' :: U8
                                                          , r' :: U32) = let (c' :: U8
                                                                             , r' :: U32) = let v' = let v' = j :: U32
                                             in v' :: U32 :: U32
                                          in (3 :: U8, v' :: U32) :: (U8
                                                                     , U32)
                                       in (c' :: U8, r' :: U32) :: (U8
                                                                   , U32)
                                    in if c' :: U8 > 0 :: U8 :: Bool
                                       then (c' :: U8, r' :: U32)
                                       else let c' = 0 :: U8
                                          in (c' :: U8, r' :: U32) :: (U8
                                                                      , U32) :: (U8
                                                                                , U32) :: (U8
                                                                                          , U32)
                                 in (c' :: U8
                                    , j :: U32
                                    , r' :: U32) :: (U8
                                                    , U32
                                                    , U32) :: (U8
                                                              , U32
                                                              , U32) :: (U8
                                                                        , U32
                                                                        , U32)
                        in (c' :: U8
                           , i :: U32
                           , j :: U32
                           , r' :: U32) :: (U8
                                           , U32
                                           , U32
                                           , U32) :: (U8
                                                     , U32
                                                     , U32
                                                     , U32) :: (U8
                                                               , U32
                                                               , U32
                                                               , U32)
               in (c' :: U8
                  , j :: U32
                  , i :: U32
                  , r' :: U32) :: (U8
                                  , U32
                                  , U32
                                  , U32) :: (U8
                                            , U32
                                            , U32
                                            , U32) :: (U8, U32, U32, U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , j :: U32
         , i :: U32
         , r' :: U32) :: (U8
                         , U32
                         , U32
                         , U32)
   in r' :: U32 :: U32
cogent_ss7 : (U32, U32) -> U32
cogent_ss7 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , j :: U32
       , i :: U32
       , r' :: U32) = let (c' :: U8
                          , j :: U32
                          , i :: U32) = let s' = let v' = i :: U32
            in v' :: U32 :: U32
         and (s1' :: Bool
             , s2' :: Bool
             , s3' :: Bool) = (s' :: U32 == (let v' = 0 :: U32
                                 in v' :: U32 :: U32) :: Bool
                              , s' :: U32 == (let v' = 1 :: U32
                                 in v' :: U32 :: U32) :: Bool
                              , s' :: U32 == (let v' = 2 :: U32
                                 in v' :: U32 :: U32) :: Bool)
         and (c' :: U8
             , j :: U32
             , i :: U32) = let (c' :: U8
                               , j :: U32) = if s1' :: Bool
               then let (c' :: U8
                        , j :: U32) = let (v' :: U32
                                          , j :: U32) = let v1' = i :: U32
                        and v' = j :: U32
                        and v' = v1' :: U32
                        and (v' :: U32
                            , j :: U32) = (v' :: U32
                                          , v' :: U32)
                        in (v' :: U32, j :: U32) :: (U32
                                                    , U32)
                     in (0 :: U8, j :: U32) :: (U8
                                               , U32)
                  in (c' :: U8, j :: U32) :: (U8
                                             , U32)
               else (0 :: U8, j :: U32) :: (U8
                                           , U32)
            in if c' :: U8 > 0 :: U8 :: Bool
               then (c' :: U8
                    , j :: U32
                    , i :: U32)
               else let (c' :: U8
                        , i :: U32
                        , j :: U32) = let (c' :: U8
                                          , i :: U32) = if s1' :: Bool || s2' :: Bool :: Bool
                        then let (c' :: U8
                                 , i :: U32) = let (c' :: U8
                                                   , i :: U32) = let (v' :: U32
                                                                     , i :: U32) = let v1' = 1 :: U32
                                    and v' = i :: U32
                                    and v' = v' :: U32 + v1' :: U32 :: U32
                                    and (v' :: U32
                                        , i :: U32) = (i :: U32
                                                      , v' :: U32)
                                    in (v' :: U32, i :: U32) :: (U32
                                                                , U32)
                                 in (0 :: U8, i :: U32) :: (U8
                                                           , U32)
                              in if c' :: U8 > 0 :: U8 :: Bool
                                 then (c' :: U8, i :: U32)
                                 else let c' = 2 :: U8
                                    in (c' :: U8, i :: U32) :: (U8
                                                               , U32) :: (U8
                                                                         , U32) :: (U8
                                                                                   , U32)
                           in (c' :: U8, i :: U32) :: (U8
                                                      , U32)
                        else (0 :: U8, i :: U32) :: (U8
                                                    , U32)
                     in if c' :: U8 > 0 :: U8 :: Bool
                        then (c' :: U8
                             , i :: U32
                             , j :: U32)
                        else let (c' :: U8
                                 , j :: U32) = let (c' :: U8
                                                   , j :: U32) = if s1' :: Bool || s2' :: Bool || s3' :: Bool :: Bool :: Bool
                                 then let (c' :: U8
                                          , j :: U32) = let (v' :: U32
                                                            , j :: U32) = let v1' = 5 :: U32
                                          and v' = j :: U32
                                          and v' = v1' :: U32
                                          and (v' :: U32
                                              , j :: U32) = (v' :: U32
                                                            , v' :: U32)
                                          in (v' :: U32, j :: U32) :: (U32
                                                                      , U32)
                                       in (0 :: U8, j :: U32) :: (U8
                                                                 , U32)
                                    in (c' :: U8, j :: U32) :: (U8
                                                               , U32)
                                 else (0 :: U8, j :: U32) :: (U8
                                                             , U32)
                              in if c' :: U8 > 0 :: U8 :: Bool
                                 then (c' :: U8, j :: U32)
                                 else let c' = 0 :: U8
                                    in (c' :: U8, j :: U32) :: (U8
                                                               , U32) :: (U8
                                                                         , U32) :: (U8
                                                                                   , U32)
                           in (c' :: U8
                              , i :: U32
                              , j :: U32) :: (U8
                                             , U32
                                             , U32) :: (U8, U32, U32) :: (U8
                                                                         , U32
                                                                         , U32)
                  in (c' :: U8
                     , j :: U32
                     , i :: U32) :: (U8
                                    , U32
                                    , U32) :: (U8, U32, U32) :: (U8
                                                                , U32
                                                                , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , j :: U32
            , i :: U32) :: (U8, U32, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , j :: U32
              , i :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = j :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , j :: U32
               , i :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32
                               , U32) :: (U8
                                         , U32
                                         , U32
                                         , U32) :: (U8, U32, U32, U32)
   in r' :: U32 :: U32
cogent_ss8 : (U32, U32) -> U32
cogent_ss8 (i :: U32
           , j :: U32) =
   let (_ :: U8
       , j :: U32
       , r' :: U32) = let (c' :: U8
                          , j :: U32
                          , r' :: U32) = let s' = let v' = i :: U32
            in v' :: U32 :: U32
         and (s1' :: Bool
             , s2' :: Bool
             , s3' :: Bool) = (s' :: U32 == (let v' = 0 :: U32
                                 in v' :: U32 :: U32) :: Bool
                              , s' :: U32 == (let v' = 1 :: U32
                                 in v' :: U32 :: U32) :: Bool
                              , s' :: U32 == (let v' = 2 :: U32
                                 in v' :: U32 :: U32) :: Bool)
         and (c' :: U8
             , j :: U32
             , r' :: U32) = let (c' :: U8
                                , j :: U32) = if s1' :: Bool
               then let (c' :: U8
                        , j :: U32) = let (v' :: U32
                                          , j :: U32) = let v1' = i :: U32
                        and v' = j :: U32
                        and v' = v1' :: U32
                        and (v' :: U32
                            , j :: U32) = (v' :: U32
                                          , v' :: U32)
                        in (v' :: U32, j :: U32) :: (U32
                                                    , U32)
                     in (0 :: U8, j :: U32) :: (U8
                                               , U32)
                  in (c' :: U8, j :: U32) :: (U8
                                             , U32)
               else (0 :: U8, j :: U32) :: (U8
                                           , U32)
            in if c' :: U8 > 0 :: U8 :: Bool
               then (c' :: U8
                    , j :: U32
                    , r' :: U32)
               else let (c' :: U8
                        , r' :: U32
                        , j :: U32) = let (c' :: U8
                                          , r' :: U32) = if s1' :: Bool || s2' :: Bool :: Bool
                        then let (c' :: U8
                                 , r' :: U32) = let s' = let v' = j :: U32
                                 in v' :: U32 :: U32
                              and (s1' :: Bool
                                  , s2' :: Bool) = (s' :: U32 == (let v' = 0 :: U32
                                                      in v' :: U32 :: U32) :: Bool
                                                   , True :: Bool)
                              and (c' :: U8
                                  , r' :: U32) = let (c' :: U8
                                                     , r' :: U32) = if s1' :: Bool
                                    then let (c' :: U8
                                             , r' :: U32) = let v' = let v' = 17 :: U32
                                             in v' :: U32 :: U32
                                          in (3 :: U8, v' :: U32) :: (U8
                                                                     , U32)
                                       in (c' :: U8, r' :: U32) :: (U8
                                                                   , U32)
                                    else (0 :: U8, r' :: U32) :: (U8
                                                                 , U32)
                                 in if c' :: U8 > 0 :: U8 :: Bool
                                    then (c' :: U8, r' :: U32)
                                    else let (c' :: U8
                                             , r' :: U32) = let (c' :: U8
                                                                , r' :: U32) = let (c' :: U8
                                                                                   , r' :: U32) = let v' = let v' = i :: U32
                                                   in v' :: U32 :: U32
                                                in (3 :: U8, v' :: U32) :: (U8
                                                                           , U32)
                                             in (c' :: U8, r' :: U32) :: (U8
                                                                         , U32)
                                          in if c' :: U8 > 0 :: U8 :: Bool
                                             then (c' :: U8, r' :: U32)
                                             else let c' = 0 :: U8
                                                in (c' :: U8, r' :: U32) :: (U8
                                                                            , U32) :: (U8
                                                                                      , U32) :: (U8
                                                                                                , U32)
                                       in (c' :: U8, r' :: U32) :: (U8
                                                                   , U32) :: (U8
                                                                             , U32) :: (U8
                                                                                       , U32)
                              in (if c' :: U8 == 2 :: U8 :: Bool
                                 then 0 :: U8
                                 else c' :: U8 :: U8
                                 , r' :: U32) :: (U8, U32)
                           in (c' :: U8, r' :: U32) :: (U8
                                                       , U32)
                        else (0 :: U8, r' :: U32) :: (U8
                                                     , U32)
                     in if c' :: U8 > 0 :: U8 :: Bool
                        then (c' :: U8
                             , r' :: U32
                             , j :: U32)
                        else let (c' :: U8
                                 , j :: U32) = let (c' :: U8
                                                   , j :: U32) = if s1' :: Bool || s2' :: Bool || s3' :: Bool :: Bool :: Bool
                                 then let (c' :: U8
                                          , j :: U32) = let (v' :: U32
                                                            , j :: U32) = let v1' = 5 :: U32
                                          and v' = j :: U32
                                          and v' = v1' :: U32
                                          and (v' :: U32
                                              , j :: U32) = (v' :: U32
                                                            , v' :: U32)
                                          in (v' :: U32, j :: U32) :: (U32
                                                                      , U32)
                                       in (0 :: U8, j :: U32) :: (U8
                                                                 , U32)
                                    in (c' :: U8, j :: U32) :: (U8
                                                               , U32)
                                 else (0 :: U8, j :: U32) :: (U8
                                                             , U32)
                              in if c' :: U8 > 0 :: U8 :: Bool
                                 then (c' :: U8, j :: U32)
                                 else let c' = 0 :: U8
                                    in (c' :: U8, j :: U32) :: (U8
                                                               , U32) :: (U8
                                                                         , U32) :: (U8
                                                                                   , U32)
                           in (c' :: U8
                              , r' :: U32
                              , j :: U32) :: (U8
                                             , U32
                                             , U32) :: (U8, U32, U32) :: (U8
                                                                         , U32
                                                                         , U32)
                  in (c' :: U8
                     , j :: U32
                     , r' :: U32) :: (U8
                                     , U32
                                     , U32) :: (U8, U32, U32) :: (U8
                                                                 , U32
                                                                 , U32)
         in (if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8
            , j :: U32
            , r' :: U32) :: (U8, U32, U32)
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8
              , j :: U32
              , r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = j :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8
               , j :: U32
               , r' :: U32) :: (U8
                               , U32
                               , U32) :: (U8, U32, U32) :: (U8
                                                           , U32
                                                           , U32)
   in r' :: U32 :: U32
cogent_ss10 : U32 -> U32
cogent_ss10 i :: U32 =
   let _ = let s' = let v' = i :: U32
         in v' :: U32 :: U32
      and () = ()
      and c' = gencotDummy :: String -> U8 "Unsupported switch body" :: String :: U8
      in if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8 :: U8
   in r' :: U32 :: U32
cogent_ss11 : U32 -> U32
cogent_ss11 i :: U32 =
   let (_ :: U8
       , r' :: U32) = let c' = let s' = let v' = i :: U32
            in v' :: U32 :: U32
         and () = ()
         and c' = gencotDummy :: String -> U8 "Unsupported switch body" :: String :: U8
         in if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8 :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = i :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss12 : U32 -> U32
cogent_ss12 i :: U32 =
   let (_ :: U8
       , r' :: U32) = let c' = let s' = let v' = i :: U32
            in v' :: U32 :: U32
         and () = ()
         and c' = gencotDummy :: String -> U8 "Unsupported switch body" :: String :: U8
         in if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8 :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = i :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss13 : (U32, U32) -> U32
cogent_ss13 (i :: U32
            , j :: U32) =
   let (_ :: U8
       , j :: U32
       , r' :: U32) = let s' = let v' = i :: U32
         in v' :: U32 :: U32
      and (s1' :: Bool
          , s2' :: Bool) = (s' :: U32 == (let v' = 0 :: U32
                              in v' :: U32 :: U32) :: Bool
                           , True :: Bool)
      and (c' :: U8
          , j :: U32
          , r' :: U32) = let (c' :: U8
                             , j :: U32) = if s1' :: Bool
            then let (c' :: U8
                     , j :: U32) = let (c' :: U8
                                       , j :: U32) = let (v' :: U32
                                                         , j :: U32) = let v1' = i :: U32
                        and v' = j :: U32
                        and v' = v1' :: U32
                        and (v' :: U32
                            , j :: U32) = (v' :: U32
                                          , v' :: U32)
                        in (v' :: U32, j :: U32) :: (U32
                                                    , U32)
                     in (0 :: U8, j :: U32) :: (U8
                                               , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8, j :: U32)
                     else let (c' :: U8
                              , j :: U32) = let v' = let v' = i :: U32
                              and v1' = 5 :: U32
                              and v' = v' :: U32 < v1' :: U32 :: U32
                              in v' :: U32 :: U32
                           in if v' :: U32
                              then let (c' :: U8
                                       , j :: U32) = let (c' :: U8
                                                         , j :: U32) = let (v' :: U32
                                                                           , j :: U32) = let v1' = 1 :: U32
                                          and v' = j :: U32
                                          and v' = v' :: U32 + v1' :: U32 :: U32
                                          and (v' :: U32
                                              , j :: U32) = (j :: U32
                                                            , v' :: U32)
                                          in (v' :: U32, j :: U32) :: (U32
                                                                      , U32)
                                       in (0 :: U8, j :: U32) :: (U8
                                                                 , U32)
                                    in if c' :: U8 > 0 :: U8 :: Bool
                                       then (c' :: U8, j :: U32)
                                       else
                                          let c' = gencotDummy :: String -> U8 "Case statement only supported in direct switch body" :: String :: U8
                                          in (c' :: U8, j :: U32) :: (U8
                                                                     , U32) :: (U8
                                                                               , U32) :: (U8
                                                                                         , U32)
                                 in (c' :: U8, j :: U32) :: (U8
                                                            , U32)
                              else
                                 let c' = let c' = gencotDummy :: String -> U8 "Case statement only supported in direct switch body" :: String :: U8
                                    in if c' :: U8 > 0 :: U8 :: Bool
                                       then c' :: U8
                                       else
                                          let c' = gencotDummy :: String -> U8 "Case statement only supported in direct switch body" :: String :: U8
                                          in c' :: U8 :: U8 :: U8 :: U8
                                 in (c' :: U8, j :: U32) :: (U8
                                                            , U32) :: (U8
                                                                      , U32) :: (U8
                                                                                , U32)
                        in (c' :: U8, j :: U32) :: (U8
                                                   , U32) :: (U8, U32) :: (U8
                                                                          , U32)
               in (c' :: U8, j :: U32) :: (U8
                                          , U32)
            else (0 :: U8, j :: U32) :: (U8
                                        , U32)
         in if c' :: U8 > 0 :: U8 :: Bool
            then (c' :: U8
                 , j :: U32
                 , r' :: U32)
            else let (c' :: U8
                     , r' :: U32) = let (c' :: U8
                                        , r' :: U32) = let (c' :: U8
                                                           , r' :: U32) = let v' = let v' = 0 :: U32
                           in v' :: U32 :: U32
                        in (3 :: U8, v' :: U32) :: (U8
                                                   , U32)
                     in (c' :: U8, r' :: U32) :: (U8
                                                 , U32)
                  in if c' :: U8 > 0 :: U8 :: Bool
                     then (c' :: U8, r' :: U32)
                     else let c' = 0 :: U8
                        in (c' :: U8, r' :: U32) :: (U8
                                                    , U32) :: (U8, U32) :: (U8
                                                                           , U32)
               in (c' :: U8
                  , j :: U32
                  , r' :: U32) :: (U8
                                  , U32
                                  , U32) :: (U8, U32, U32) :: (U8
                                                              , U32
                                                              , U32)
      in (if c' :: U8 == 2 :: U8 :: Bool
         then 0 :: U8
         else c' :: U8 :: U8
         , j :: U32
         , r' :: U32) :: (U8, U32, U32)
   in r' :: U32 :: U32
cogent_ss14 : U32 -> U32
cogent_ss14 i :: U32 =
   let (_ :: U8
       , r' :: U32) = let c' = let s' = let v' = i :: U32
            in v' :: U32 :: U32
         and (s1' :: Bool
             , s2' :: Bool
             , s3' :: Bool) = (s' :: U32 == (let v' = 0 :: U32
                                 in v' :: U32 :: U32) :: Bool
                              , s' :: U32 == (let v' = 1 :: U32
                                 in v' :: U32 :: U32) :: Bool
                              , s' :: U32 == (let v' = 2 :: U32
                                 in v' :: U32 :: U32) :: Bool)
         and c' = gencotDummy :: String -> U8 "Declarations not supported in switch body" :: String :: U8
         in if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8 :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = i :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
cogent_ss15 : (U32, U32) -> U32
cogent_ss15 (i :: U32
            , j :: U32) =
   let (_ :: U8
       , r' :: U32) = let c' = let s' = let v' = i :: U32
            in v' :: U32 :: U32
         and (s1' :: Bool
             , s2' :: Bool
             , s3' :: Bool) = (s' :: U32 == (let v' = 0 :: U32
                                 in v' :: U32 :: U32) :: Bool
                              , s' :: U32 == (let v' = 1 :: U32
                                 in v' :: U32 :: U32) :: Bool
                              , s' :: U32 == (let v' = 2 :: U32
                                 in v' :: U32 :: U32) :: Bool)
         and c' = gencotDummy :: String -> U8 "Declarations not supported in switch body" :: String :: U8
         in if c' :: U8 == 2 :: U8 :: Bool
            then 0 :: U8
            else c' :: U8 :: U8 :: U8
      in if c' :: U8 > 0 :: U8 :: Bool
         then (c' :: U8, r' :: U32)
         else let (c' :: U8
                  , r' :: U32) = let v' = let v' = j :: U32
                  in v' :: U32 :: U32
               in (3 :: U8, v' :: U32) :: (U8
                                          , U32)
            in (c' :: U8, r' :: U32) :: (U8
                                        , U32) :: (U8, U32) :: (U8, U32)
   in r' :: U32 :: U32
