cogent_fac1 : U32 -> U32
cogent_fac1 v = 42
cogent_fac2 : U8 -> U8
cogent_fac2 v = 'x'
cogent_fac4 : String -> String
cogent_fac4 v = "abc"
cogent_fac5 : err-float -> err-float
cogent_fac5 v =
   gencotDummy "Float literals not supported"
cogent_fav1 : ( U32, U32 ) -> U32
cogent_fav1 (v, w) = w
cogent_fav2 : ( U32, U32 ) -> U32
cogent_fav2 (xyz_123, w) = w
cogent_fao1 : U32 -> U32
cogent_fao1 v = v + 42
cogent_fao2 : U32 -> U32
cogent_fao2 v = v - 42
cogent_fao3 : U32 -> U32
cogent_fao3 v = v * 42
cogent_fao4 : U32 -> U32
cogent_fao4 v = v / 42
cogent_fao5 : U32 -> U32
cogent_fao5 v = v % 42
cogent_fao6 : U32 -> U32
cogent_fao6 v = v << 4
cogent_fao7 : U32 -> U32
cogent_fao7 v = v >> 4
cogent_fao8 : U32 -> U32
cogent_fao8 v = v .&. 4
cogent_fao9 : U32 -> U32
cogent_fao9 v = v .|. 4
cogent_fao10 : U32 -> U32
cogent_fao10 v = v .^. 4
cogent_fao11 : U32 -> U32
cogent_fao11 v = v
cogent_fao12 : U32 -> U32
cogent_fao12 v = v
cogent_fao13 : U32 -> U32
cogent_fao13 v = v + 1
cogent_fao14 : U32 -> U32
cogent_fao14 v = v - 1

type Struct_Cogent_as1 = { m1 : U32, m2 : U32 }
type Struct_Cogent_as2 = { m3 : U32, m4 : #Struct_Cogent_as1 }
cogent_fas1 : ( #Struct_Cogent_as1, U32 ) -> U32
cogent_fas1 (s, v) = s.m1
cogent_fas2 : ( #Struct_Cogent_as1, U32 ) -> U32
cogent_fas2 (s, v) = s.m1 + s.m2
cogent_fas3 : ( #Struct_Cogent_as2, U32 ) -> U32
cogent_fas3 (s, v) = s.m4.m1
cogent_fas4 : ( #Struct_Cogent_as2, U32 ) -> U32
cogent_fas4 (s, v) =
   s.m4.m1 + s.m4.m2 + s.m3
cogent_fas5 : #Struct_Cogent_as1 -> U32
cogent_fas5 s =
   (s { m1 = 42 }).m1
cogent_fas6 : #Struct_Cogent_as2 -> U32
cogent_fas6 s =
   let s { m4 = p0' } = s
   in (s { m4 = p0' { m1 = 42 } }).m4.m1
cogent_fas7 : #Struct_Cogent_as1 -> U32
cogent_fas7 s = s.m1
cogent_fas8 : #Struct_Cogent_as2 -> U32
cogent_fas8 s = s.m4.m1
cogent_fas9 : #Struct_Cogent_as1 -> U32
cogent_fas9 s =
   let s { m1 = p0' } = s
   in p0' + 1
cogent_fas10 : #Struct_Cogent_as2 -> U32
cogent_fas10 s =
   let s { m4 = p0' } = s
   and p0' { m1 = p1' } = p0'
   in p1' + 1

type Cogent_aa1 = CArr5 U32
type Cogent_aa2 =
   CArr5 #Struct_Cogent_as1
cogent_faa1 : ( Cogent_aa1, U32 ) -> ( U32, Cogent_aa1 )
cogent_faa1 (a, v) =
   let (r'
       , ()) = (getArr[Cogent_aa1!
                      , U32
                      , U32]{{}} (a, 3)
               , ()) !a
   in (r', a)
cogent_faa2 : ( Cogent_aa1, U32 ) -> ( U32, Cogent_aa1 )
cogent_faa2 (a, v) =
   let (r'
       , ()) = (getArr[Cogent_aa1!
                      , U32
                      , U32]{{}} (a
                                 , 3) + getArr[Cogent_aa1!
                                              , U32
                                              , U32]{{}} (a, 1)
               , ()) !a
   in (r', a)
cogent_faa3 : ( Cogent_aa1, U32 ) -> ( U32, Cogent_aa1 )
cogent_faa3 (a, v) =
   let (r'
       , ()) = (getArr[Cogent_aa1!
                      , U32
                      , U32]{{}} (a
                                 , getArr[Cogent_aa1!
                                         , U32
                                         , U32]{{}} (a, 2))
               , ()) !a
   in (r', a)
cogent_faa4 : ( Cogent_aa2, U32 ) -> ( U32, Cogent_aa2 )
cogent_faa4 (a, v) =
   let (r'
       , ()) = ((getArr[Cogent_aa2!
                       , U32
                       , #Struct_Cogent_as1]{{}} (a
                                                 , 3)).m1
               , ()) !a
   in (r', a)
cogent_faa5 : ( Cogent_aa2, U32 ) -> ( U32, Cogent_aa2 )
cogent_faa5 (a, v) =
   let (r'
       , ()) = ((getArr[Cogent_aa2!
                       , U32
                       , #Struct_Cogent_as1]{{}} (a
                                                 , (getArr[Cogent_aa2!
                                                          , U32
                                                          , #Struct_Cogent_as1]{{}} (a
                                                                                    , 2)).m2)).m1
               , ()) !a
   in (r', a)
cogent_faa6 : Cogent_aa1 -> ( U32, Cogent_aa1 )
cogent_faa6 a =
   let a = a @{ @3 = 42 }
   and a @{ @3 = p1' } = a
   in (p1', a @{ @3 = p1' })
cogent_faa7 : Cogent_aa2 -> ( U32, Cogent_aa2 )
cogent_faa7 a =
   let a @{ @3 = p0' } = a
   and a = a @{ @3 = p0' { m1 = 42 } }
   and a @{ @3 = p2' } = a
   in (p2'.m1, a @{ @3 = p2' })
cogent_faa8 : Cogent_aa1 -> ( U32, Cogent_aa1 )
cogent_faa8 a =
   let a @{ @3 = p0' } = a
   in (p0', a @{ @3 = p0' + 1 })
cogent_faa9 : Cogent_aa2 -> ( U32, Cogent_aa2 )
cogent_faa9 a =
   let a @{ @3 = p0' } = a
   in (p0'.m1, a @{ @3 = p0' })
cogent_faa10 : Cogent_aa1 -> ( U32, Cogent_aa1 )
cogent_faa10 a =
   let a @{ @2 = p0' } = a
   and a = a @{ @2 = p0' }
   and a @{ @p0' = p1' } = a
   in (p1', a @{ @p0' = p1' + 1 })
cogent_faa11 : Cogent_aa1 -> ( U32, Cogent_aa1 )
cogent_faa11 a =
   let a @{ @3 = p0' } = a
   in (p0' + 1
      , a @{ @3 = p0' + 1 })
cogent_faa12 : Cogent_aa2 -> ( U32, Cogent_aa2 )
cogent_faa12 a =
   let a @{ @3 = p0' } = a
   and p0' { m1 = p1' } = p0'
   in (p1' + 1
      , a @{ @3 = p0' { m1 = p1' + 1 } })
cogent_faa13 : ( Cogent_aa1, U32 ) -> ( U32, Cogent_aa1 )
cogent_faa13 (a, v) =
   let (r'
       , ()) = (getArr[Cogent_aa1!
                      , U32
                      , U32]{{}} (a, v)
               , ()) !a
   in (r', a)
cogent_faa14 : ( Cogent_aa1, U32 ) -> ( U32, Cogent_aa1 )
cogent_faa14 (a, v) =
   let (r'
       , ()) = (getArr[Cogent_aa1!
                      , U32
                      , U32]{{}} (a, v + 1)
               , ()) !a
   in (r', a)

type Struct_Cogent_as3 = { m5 : U32, m6 : MayNull Struct_Cogent_as1 }
type Cogent_aa3 =
   CArr5 (MayNull (CPtr U32))
cogent_fap1 : ( MayNull (CPtr U32), U32 ) -> ( U32, MayNull (CPtr U32) )
cogent_fap1 (p, v) =
   let (r'
       , ()) = (gencotDummy "Dereferencing pointer which may be NULL"
               , ()) !p
   in (r', p)
cogent_fap2 : ( MayNull Struct_Cogent_as1, U32 ) -> ( U32, MayNull Struct_Cogent_as1 )
cogent_fap2 (p, v) =
   let (r'
       , ()) = ((gencotDummy "Dereferencing pointer which may be NULL").m1
               , ()) !p
   in (r', p)
cogent_fap3 : ( MayNull Struct_Cogent_as1, U32 ) -> ( U32, MayNull Struct_Cogent_as1 )
cogent_fap3 (p, v) =
   let (r'
       , ()) = (gencotDummy "Dereferencing pointer which may be NULL"
               , ()) !p
   in (r', p)
cogent_fap4 : ( MayNull Struct_Cogent_as3, U32 ) -> ( U32, MayNull Struct_Cogent_as3 )
cogent_fap4 (p, v) =
   let (r'
       , ()) = ((gencotDummy "Dereferencing pointer which may be NULL").m1
               , ()) !p
   in (r', p)
cogent_fap5 : ( MayNull Struct_Cogent_as3, U32 ) -> ( U32, MayNull Struct_Cogent_as3 )
cogent_fap5 (p, v) =
   let (r'
       , ()) = (gencotDummy "Dereferencing pointer which may be NULL"
               , ()) !p
   in (r', p)
cogent_fap6 : ( Cogent_aa3, U32 ) -> ( U32, Cogent_aa3 )
cogent_fap6 (p, v) =
   let (r'
       , ()) = (gencotDummy "Dereferencing pointer which may be NULL"
               , ()) !p
   in (r', p)
cogent_fap7 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_fap7 p =
   (gencotDummy "Dereferencing pointer which may be NULL"
   , p)
cogent_fap8 : MayNull Struct_Cogent_as1 -> ( U32, MayNull Struct_Cogent_as1 )
cogent_fap8 p =
   ((gencotDummy "Dereferencing pointer which may be NULL").m1
   , p)
cogent_fap9 : MayNull Struct_Cogent_as1 -> ( U32, MayNull Struct_Cogent_as1 )
cogent_fap9 p =
   (gencotDummy "Dereferencing pointer which may be NULL"
   , p)
cogent_fap10 : MayNull Struct_Cogent_as3 -> ( U32, MayNull Struct_Cogent_as3 )
cogent_fap10 p =
   ((gencotDummy "Dereferencing pointer which may be NULL").m1
   , p)
cogent_fap11 : MayNull Struct_Cogent_as3 -> ( U32, MayNull Struct_Cogent_as3 )
cogent_fap11 p =
   (gencotDummy "Dereferencing pointer which may be NULL"
   , p)
cogent_fap12 : Cogent_aa3 -> ( U32, Cogent_aa3 )
cogent_fap12 p =
   let p @{ @3 = p0' } = p
   and p = p @{ @3 = p0' }
   and p @{ @3 = p2' } = p
   in (gencotDummy "Dereferencing pointer which may be NULL"
      , p @{ @3 = p2' })
cogent_fap13 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_fap13 p =
   (gencotDummy "Dereferencing pointer which may be NULL"
   , p)
cogent_fap14 : MayNull Struct_Cogent_as1 -> ( U32, MayNull Struct_Cogent_as1 )
cogent_fap14 p =
   (gencotDummy "Dereferencing pointer which may be NULL"
   , p)
cogent_fap15 : Cogent_aa3 -> ( U32, Cogent_aa3 )
cogent_fap15 p =
   let p @{ @3 = p0' } = p
   in (gencotDummy "Dereferencing pointer which may be NULL"
      , p @{ @3 = p0' })

cogent_fam1 : ( U32, U32 ) -> U32
cogent_fam1 (v1, v2) = 17 + 4
cogent_fam2 : ( U32, U32 ) -> U32
cogent_fam2 (v1, v2) = 17
cogent_fam3 : ( U32, U32 ) -> U32
cogent_fam3 (v1, v2) = 17 + 4
cogent_fam4 : ( U32, U32 ) -> U32
cogent_fam4 (v1, v2) =
   17 + 4 + 4
cogent_fam5 : ( U32, U32 ) -> U32
cogent_fam5 (v1, v2) = 17 + 4
cogent_fam6 : ( U32, U32, U32 ) -> U32
cogent_fam6 (v1, v2, v3) =
   cogent_fam1 (17, 4) + v3
cogent_fam7 : ( U32, U32, U32 ) -> U32
cogent_fam7 (v1, v2, v3) =
   17 + 4 + cogent_fam1 (17, 4)
cogent_fam8 : ( U32, U32, U32 ) -> U32
cogent_fam8 (v1, v2, v3) =
   cogent_fam6 (17
               , 4
               , 0) + 17 + 4 + 0
cogent_fam9 : ( U32, U32, U32 ) -> U32
cogent_fam9 (v1, v2, v3) =
   4 + v3
cogent_fam10 : ( U32, U32, U32 ) -> U32
cogent_fam10 (v1, v2, v3) =
   17 + 4 + 4
cogent_fam11 : ( U32, U32, U32 ) -> U32
cogent_fam11 (v1, v2, v3) =
   4 + 17 + 4 + v3
