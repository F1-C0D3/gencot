#! /bin/sh

# remove C++ extern-C-declarations
# Constructs of the form 
#   extern "C" { <content> }
# are reduced to <content>
# This is a filter from stdin to stdout.

# Bugs: 
# - <content> must have balanced {} pairs, braces in ".." or '..' are not excluded
# - between two extern-C-declarations there must be at least one newline

awk \
'{ match($0,/(^|[[:blank:]]+)extern[[:blank:]]+"C"[[:blank:]]+{/) 
   if (RSTART != 0) { 
     cplpl = 1 
     before = substr($0,1,RSTART-1) 
     inbr = substr($0,RSTART+RLENGTH) 
     printf("%s",before) 
     brack = 1 
   } 
   else inbr = $0 
   if (cplpl) { 
     n = patsplit(inbr,arr,/{|}/,seps) 
     found = 0 
     for (i = 1; i <= n; i++) { 
       if (arr[i] == "{") brack++ 
       else brack-- 
       if (brack == 0) found = i 
     }
     if (found) { 
       inbr = seps[0] 
       for (i=1; i<=n; i++) {
         if (i==found) inbr = inbr seps[i] 
         else inbr = inbr arr[i] seps[i] 
       } 
       cplpl = 0 
     } 
     print inbr 
   } 
   else print 
 }'

# documentation:
# 
# We test for the start of an extern-C-declaration using the pattern
#   /(^|[[:blank:]]+)extern[[:blank:]]+"C"[[:blank:]]+{/
# It either starts at the beginning of the line, or after a nonempty blank sequence.
# 
# We use variable cplpl to store the state being in an extern-C-declaration. There we count
# the nesting level of braces in variable brack. 
# Function patsplit puts braces in the array arr and everything araund and between them in array seps.
# The next for loop scans through the braces, if the nesting level reaches 0 the closing braces has been found.
