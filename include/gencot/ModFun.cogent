{- General types for functions which modify linear values -}

#ifndef GENCOT_MODFUN
#define GENCOT_MODFUN

-- To modify a value r a modification function f is applied to 
-- a pair consisting of r and auxiliary information a:
--   f (r,a)
-- The result must be the modified value and auxiliary output

-- Modification function where the modified value has a different type:
--   obj: type of the old value
--   res: type of the modified value
--   arg: type of the auxiliary input
--   out: type of the auxiliary output
type ModTypeFun obj res arg out = (obj,arg) -> (res,out)

-- Transactional modification function which rolls back all modifications 
-- in case of an error and returns the unmodified input value.
--   obj: type of the old value
--   res: type of the modified value
--   arg: type of the auxiliary input
--   out: type of the auxiliary output
type TModTypeFun obj res arg out = (obj,arg) -> Result (res,out) (obj,out)

-- Transactional modification function where the modified value has the same type as the unmodified value:
-- Information about an error must be given as part of out.
--   obj: type of the old and new value
--   arg: type of the auxiliary input
--   out: type of the auxiliary output
type ModFun obj arg out = ModTypeFun obj obj arg out

-- Change function which maps a value of arbitrary type to a new value
--   obj: type of the old and new value
--   arg: type of the auxiliary input
--   out: type of the auxiliary output
type ChgFun obj arg out = (obj,arg) -> (obj,out)

-- Transactional modification function which modifies a value by changing a part of it:
--   obj: type of the modified value
--   prt: type of the changed part
--   arg: type of the auxiliary input for modifying the part
--   out: type of the auxiliary output
type ChgPartFun obj prt arg out = ModFun obj (ChgFun prt arg out, arg) out

-- Transactional modification function which modifies a value by modifying a part of it:
--   obj: type of the modified value
--   prt: type of the modified part
--   arg: type of the auxiliary input for modifying the part
--   out: type of the auxiliary output
type ModPartFun obj prt arg out = ModFun obj (ModFun prt arg out, arg) out

-- Type hierarchy:
--   ModPartFun < ChgPartFun < ModFun < ChgFun, ModTypeFun

#endif {- GENCOT_MODFUN -}
