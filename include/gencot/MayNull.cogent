{- Abstract data type for linear types which may be NULL -}

#ifndef ABSTRACT_MAYNULL
#define ABSTRACT_MAYNULL

type MayNull a 

-- Construct the NULL pointer
null: all(a). () -> MayNull a
roNull: all(a). () -> (MayNull a)!

-- Construct a non-NULL value
mayNull: all(a). a -> MayNull a
roMayNull: all(a). a! -> (MayNull a)!

-- Retrieve value if not NULL.
notNull: all(a). MayNull a -> Option a
roNotNull: all(a). (MayNull a)! -> (Option a)!

-- test for being NULL
isNull: all(a). (MayNull a)! -> Bool
isNull mn = roNotNull mn 
   | None -> True 
   | Some _ -> False

modifyNull: all(a,b:<DS). ModPartFun (MayNull a) a b
modifyNull (mn, (f,v)) = notNull[a] mn
   | None -> null[a] ()
   | Some x -> mayNull[a] (f (x,v))

createNull: all(a). () -> MayNull a
createNull () = mayNull (create ())

disposeNull: all(a). MayNull a -> ()
disposeNull mn = notNull mn
   | None -> ()
   | Some x -> dispose x

#endif {- ABSTRACT_MAYNULL -}
