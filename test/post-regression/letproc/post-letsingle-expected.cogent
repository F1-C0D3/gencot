f1 : U32 -> U32
f1 i = 5
f2 : U32 -> U32
f2 i = 20
f3 : U32 -> U32
f3 i = i + 1
f4 : U32 -> U32
f4 i = 3 * i + 45 / 15
f5 : U32 -> U32
f5 i =
   2 * (3 * i) + 3 * i + 3 * i / 3
f10 : U32 -> U32
f10 i = 5 + i + 5
f11 : U32 -> U32
f11 i = i + 1 + i + (i + 1)
f12 : U32 -> U32
f12 i = 1 + i
f13 : U32 -> ( U32, U32, U32 )
f13 i = (i - 1, i, i + 1)
f20 : U32 -> U32
f20 i =
   i
   | w -> w + (i + 1)
f21 : U32 -> U32
f21 i =
   i
   | v -> v + 5
f22 : U32 -> U32
f22 i =
   let v = i
   in 5
      | i -> v
f23 : U32 -> U32
f23 i = \i => v
f23a : U32 -> U32
f23a i = \j => v
f30 : U32 -> U32
f30 i = 2 * (i + 1) + 10
f31 : U32 -> U32
f31 i =
   (if i == 0
      then 5
      else 2 * i) + 10
f32 : U32 -> U32
f32 i =
   (7
      | i -> i + 1) + 10
f33 : U32 -> U32
f33 i =
   5
   | i -> 7
      | i -> i + 1
f34 : U32 -> U32
f34 i = fst (1, 2, i)
f34a : ( U32, U32 ) -> U32
f34a (i, j) =
   let v = (1, i, j)
   in 5
      | i -> v
f34b : ( U32, U32 ) -> U32
f34b (i, j) =
   5
   | k -> (1, i, j)
type Rec =
   { fld1 : U32, fld2 : U32 }
type Arr = U32[5]
f35 : Rec -> Rec
f35 r = #{ fld1 = 5, fld2 = 7 }
f35a : Rec -> Rec
f35a r = r { fld1 = 5 }
f36 : Arr -> Arr
f36 a = [1, 2, 3, 4, 5]
f36a : Arr -> Arr
f36a a = a @{ @3 = 5 }
f40 : Rec -> Rec
f40 r =
   let r' { fld1 = _ } = r
   in r'
f41 : Rec -> ( U32, U32 )
f41 r =
   let #{ fld1 = v1
        , fld2 = v2 } = r
   in (v1, v2)
f42 : Arr -> Arr
f42 a =
   let a' @{ @3 = _ } = a
   in a'
f43 : Arr -> ( U32, U32 )
f43 a =
   let [_, v1, _, v2, _] = a
   in (v1, v2)
f44 : U32 -> U32
f44 i = i + 1
f45 : U32 -> U32
f45 i = i + 1
