#! /bin/csh -f

# Remove preprocessor directives from a C source, retaining their line positions of the rest.
# This is a filter from stdin to stdout with an additional filename argument.
# The file contains regular expressions for directives to be retained.

if ( $#argv > 1) then
  echo "Error: Only optional file with regular expression list expected as argument."
  exit 0
endif

awk \
'BEGIN { \
   nregs = 0 \
   if (ARGC > 1) { \
     rfile = ARGV[1]; delete ARGV[1] \
     while ((getline cline < rfile) > 0) { \
       regs[++nregs] = cline \
     } \
     close(rfile) \
   } \
   condlevel = 0 \
   remcont = 0 \
 } \
 { if ($0 ~ /[[:blank:]]*#/) { \
     retain = 0 \
     if ($0 ~ /^[[:blank:]]*#[[:blank:]]*[[:digit:]]+/) retain = 1 \
     else if ($0 ~ /^[[:blank:]]*#[[:blank:]]*include/) retain = 1 \
     else if ($0 ~ /^[[:blank:]]*#[[:blank:]]*(define|undef|if)/) { \
       for (i=1; i <= nregs; i++) \
         if ($0 ~ regs[i]) { retain = 1; break } \
     } \
     if ($0 ~ /^[[:blank:]]*#[[:blank:]]*if/) retcond[++condlevel] = retain \
     else if ($0 ~ /^[[:blank:]]*#[[:blank:]]*(else|elif|endif)/ && retcond[condlevel]) { \
       retain = 1 \
     } \
     if ($0 ~ /^[[:blank:]]*#[[:blank:]]*endif/) condlevel-- \
     if (retain) print \
     else { \
       printf("\n") \
       if ($0 ~ /\\$/) remcont = 1 \
     } \
   } \
   else if (remcont) { \
     printf("\n") \
     if ($0 !~ /\\$/) remcont = 0 \
   } \
   else print \
 }' $1

# documentation:
# 
# We use two kinds of state which is valid over multiple lines:
# - A boolean stack for marking all nested conditional sections whether to be retained or not.
#   The current level of this stack is stored in condlevel. It is 0 on toplevel outside all
#   conditional sections, it is increased for each if/ifdef/ifndef directive and it is decreased
#   for each endif directive.
# - boolean variable remcont marking continuation lines of directives which should be removed.
#   It is set when a directive line ends with a \ and the directive shall not be retained.
#   It is cleared in the next line which does not end with a \.
#
# Implementation in awk:
# - In the BEGIN rule, if a file name is specified as argument, all lines from the file are read as 
#   regular expressions into the array regs. nregs is set to the number of regular expressions read.
#   If no argument is specified or the file cannot be read nregs is set to 0.
# - A preprocessor directive may be written with or without whitespace before and after the keyword and at
#   the beginning of the line. Thus we use the following regular expressions to match directives:
#     all directives:             /^[[:blank:]]*#/
#     line directives:            /^[[:blank:]]*#[[:blank:]]*[[:digit:]]+/
#     include directives:         /^[[:blank:]]*#[[:blank:]]*include/
#     conditional section starts: /^[[:blank:]]*#[[:blank:]]*if/
#     conditional section rest:   /^[[:blank:]]*#[[:blank:]]*(else|elif|endif)/
#     conditional section end:    /^[[:blank:]]*#[[:blank:]]*endif/
#     retainable directives:      /^[[:blank:]]*#[[:blank:]]*(define|undef|if)/
#   The retainable directives are those which can be retained by a regular expression in regs.
# - To test whether there is a backslash at the end of the line it is matched with the regular expression /\\$/.
