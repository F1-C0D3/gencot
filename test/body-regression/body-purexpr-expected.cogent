cogent_fc1 : () -> U32
cogent_fc1 () =
   let (_, _, res') = let v' = 42
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fc2 : () -> U8
cogent_fc2 () =
   let (_, _, res') = let v' = 'x'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fc3 : () -> U8
cogent_fc3 () =
   let (_
       , _
       , res') = let v' = gencotDummy "Multi character constants not supported"
         {- 'xx'; -}
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fc4 : () -> MayNull (CPtr U8)
cogent_fc4 () =
   let (_
       , _
       , res') = let v' = "abc"
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fc5 : () -> err-float
cogent_fc5 () =
   let (_
       , _
       , res') = let v' = gencotDummy "Float literals not supported"
         {- 1.5; -}
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fv1 : U32 -> U32
cogent_fv1 v =
   let (_, _, res') = let v' = v
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fv2 : U32 -> U32
cogent_fv2 xyz_123 =
   let (_
       , _
       , res') = let v' = xyz_123
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo1 : () -> U32
cogent_fo1 () =
   let (_, _, res') = let v' = 42
      and v' = + v'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo2 : () -> U32
cogent_fo2 () =
   let (_, _, res') = let v' = 42
      and v' = - v'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo3 : () -> U32
cogent_fo3 () =
   let (_, _, res') = let v' = 42
      and v1' = 0
      and v' = v' == v1'
      and v2' = 1
      and v1' = 0
      and v' = if v' then v2' else v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo4 : () -> U32
cogent_fo4 () =
   let (_, _, res') = let v' = 42
      and v' = complement v'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo5 : () -> U32
cogent_fo5 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' + v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo6 : () -> U32
cogent_fo6 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' - v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo7 : () -> U32
cogent_fo7 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' * v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo8 : () -> U32
cogent_fo8 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' % v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo9 : () -> U32
cogent_fo9 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' / v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo10 : () -> U32
cogent_fo10 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' << v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo11 : () -> U32
cogent_fo11 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' >> v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo12 : () -> U32
cogent_fo12 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' < v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo13 : () -> U32
cogent_fo13 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' > v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo14 : () -> U32
cogent_fo14 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' <= v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo15 : () -> U32
cogent_fo15 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' >= v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo16 : () -> U32
cogent_fo16 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' == v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo17 : () -> U32
cogent_fo17 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' /= v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo18 : () -> U32
cogent_fo18 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' .&. v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo19 : () -> U32
cogent_fo19 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' .|. v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo20 : () -> U32
cogent_fo20 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v' = v' .^. v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo21 : () -> U32
cogent_fo21 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v2' = 0
      and v' = if v' then v1' else v2'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fo22 : () -> U32
cogent_fo22 () =
   let (_, _, res') = let v' = 17
      and v2' = 1
      and v1' = 4
      and v' = if v' then v2' else v1'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_f1 : () -> U32
cogent_f1 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v2' = 42
      and v' = if v' then v1' else v2'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_f2 : () -> U32
cogent_f2 () =
   let (_, _, res') = let v' = 17
      and v1' = 4
      and v2' = 42
      and c' = (True, True, Some v2')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_f3 : () -> U32
cogent_f3 () =
   let (_
       , _
       , res') = let v' = cogent_fc1 ()
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_f4 : () -> U32
cogent_f4 () =
   let (_, _, res') = let v' = 42
      and v' = cogent_fv1 v'
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fx : ( U32, U8, U32 ) -> U32
cogent_fx (a
          , b
          , c) =
   let (_, _, res') = let v' = a
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_f5 : () -> U32
cogent_f5 () =
   let (_, _, res') = let v' = 17
      and v1' = 'x'
      and v2' = 4
      and v' = cogent_fx (v'
                         , v1'
                         , v2')
      and c' = (True, True, Some v')
      in c'
   in res'
      | None -> defaultVal ()
      | Some v -> v

type Struct_Cogent_s1 = { m1 : U32, m2 : U32 }
type Struct_Cogent_s2 = { m3 : U32, m4 : #Struct_Cogent_s1 }
cogent_fs1 : #Struct_Cogent_s1 -> U32
cogent_fs1 s =
   let ((_, _, res')
       , s) = let v' = s
      and s { m1 = r0' } = v'
      and v' = r0'
      and c' = (True, True, Some v')
      and s = s { m1 = r0' }
      in (c', s)
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fs2 : #Struct_Cogent_s1 -> U32
cogent_fs2 s =
   let ((_, _, res')
       , s) = let v' = s
      and s { m1 = r0' } = v'
      and v' = r0'
      and v1' = s
      and s { m2 = r1' } = v1'
      and v1' = r1'
      and v' = v' + v1'
      and c' = (True, True, Some v')
      and s = s { m2 = r1' }
      and s = s { m1 = r0' }
      in (c', s)
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fs3 : #Struct_Cogent_s2 -> U32
cogent_fs3 s =
   let ((_, _, res')
       , s) = let v' = s
      and s { m4 = r0' } = v'
      and v' = r0'
      and r0' { m1 = r1' } = v'
      and v' = r1'
      and c' = (True, True, Some v')
      and r0' = r0' { m1 = r1' }
      and s = s { m4 = r0' }
      in (c', s)
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fs4 : #Struct_Cogent_s2 -> U32
cogent_fs4 s =
   let ((_, _, res')
       , s) = let v' = s
      and s { m4 = r0' } = v'
      and v' = r0'
      and r0' { m1 = r1' } = v'
      and v' = r1'
      and v1' = s
      and s { m4 = r2' } = v1'
      and v1' = r2'
      and r2' { m2 = r3' } = v1'
      and v1' = r3'
      and v' = v' + v1'
      and v2' = s
      and s { m3 = r4' } = v2'
      and v2' = r4'
      and v' = v' + v2'
      and c' = (True, True, Some v')
      and s = s { m3 = r4' }
      and r2' = r2' { m2 = r3' }
      and s = s { m4 = r2' }
      and r0' = r0' { m1 = r1' }
      and s = s { m4 = r0' }
      in (c', s)
   in res'
      | None -> defaultVal ()
      | Some v -> v

type Cogent_a1 = CArr5 U32
type Cogent_a2 =
   CArr5 #Struct_Cogent_s1
cogent_fa1 : Cogent_a1 -> ( U32, Cogent_a1 )
cogent_fa1 a =
   let ((_, _, res')
       , a) = let v1' = 3
      and v' = a
      and (a @{ @v1' = r0' }
          , i0') = (v', v1')
      and v' = r0'
      and c' = (True, True, Some v')
      and a = a @{ @i0' = r0' }
      in (c', a)
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fa2 : Cogent_a1 -> ( U32, Cogent_a1 )
cogent_fa2 a =
   let ((_, _, res')
       , a) = let v1' = 3
      and v' = a
      and (a @{ @v1' = r0' }
          , i0') = (v', v1')
      and v' = r0'
      and v3' = 1
      and v2' = a
      and (a @{ @v3' = r1' }
          , i1') = (v2', v3')
      and v2' = r1'
      and v' = v' + v2'
      and c' = (True, True, Some v')
      and a = a @{ @i1' = r1' }
      and a = a @{ @i0' = r0' }
      in (c', a)
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fa3 : Cogent_a1 -> ( U32, Cogent_a1 )
cogent_fa3 a =
   let ((_, _, res')
       , a) = let v2' = 2
      and v1' = a
      and (a @{ @v2' = r0' }
          , i0') = (v1', v2')
      and v1' = r0'
      and v' = a
      and (a @{ @v1' = r1' }
          , i1') = (v', v1')
      and v' = r1'
      and c' = (True, True, Some v')
      and a = a @{ @i1' = r1' }
      and a = a @{ @i0' = r0' }
      in (c', a)
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fa4 : Cogent_a2 -> ( U32, Cogent_a2 )
cogent_fa4 a =
   let ((_, _, res')
       , a) = let v1' = 3
      and v' = a
      and (a @{ @v1' = r0' }
          , i0') = (v', v1')
      and v' = r0'
      and r0' { m1 = r1' } = v'
      and v' = r1'
      and c' = (True, True, Some v')
      and r0' = r0' { m1 = r1' }
      and a = a @{ @i0' = r0' }
      in (c', a)
   in res'
      | None -> defaultVal ()
      | Some v -> v
cogent_fa5 : Cogent_a2 -> ( U32, Cogent_a2 )
cogent_fa5 a =
   let ((_, _, res')
       , a) = let v2' = 2
      and v1' = a
      and (a @{ @v2' = r0' }
          , i0') = (v1', v2')
      and v1' = r0'
      and r0' { m2 = r1' } = v1'
      and v1' = r1'
      and v' = a
      and (a @{ @v1' = r2' }
          , i2') = (v', v1')
      and v' = r2'
      and r2' { m1 = r3' } = v'
      and v' = r3'
      and c' = (True, True, Some v')
      and r2' = r2' { m1 = r3' }
      and a = a @{ @i2' = r2' }
      and r0' = r0' { m2 = r1' }
      and a = a @{ @i0' = r0' }
      in (c', a)
   in res'
      | None -> defaultVal ()
      | Some v -> v
