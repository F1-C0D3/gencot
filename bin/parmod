#!/bin/sh

if [ -z "$GENCOT_HOME" ]
then
    echo "Cannot find Gencot installation."
    echo "Please set environment variable GENCOT_HOME to root directory of Gencot installation."
    exit
fi

BIN=$GENCOT_HOME/bin
PRC=parmod-proc

USAGE="Usage: $0 [-I<dir>] [-G<dir>] [-k] [file|close|unit|show|idlist|diff|iddiff|addto|mergin|replin|eval|out|help] <file> [<file>]"

long_usage()
{
    echo $USAGE
    echo 'Manage Gencot parameter modification descriptions in JSON format.'
    echo 'Commands:'
    echo '  file   <cfile> <uitems> Create parmod description for all functions defined in C sourcefile <cfile>'
    echo '  close  <cfile> <uitems> Create parmod description for all functions declared for C sourcefile <cfile>'
    echo '  unit   <ufile> <json>  Select descriptions from <json> for externals in unit described in <ufile>'
    echo '  show   <json>   Display information about parmod description'
    echo '  idlist <json>   List function identifiers of parmod descriptions'
    echo '  diff   <json1> <json2>  Compare parmod descriptions in <json1> and <json2>'
    echo '  iddiff <json1> <json2>  Compare the function identifiers from <json1> and <json2>'
    echo '  addto  <json1> <json2>  Add to <json1> all required dependencies found in <json2>'
    echo '  mergin <json1> <json2>  Union, selecting entries with more confirmed parameters'
    echo '  replin <json1> <json2>  Replace in <json1> entries with not less confirmed parameters in <json2>'
    echo '  eval   <json>   Evaluate finished parmod description'
    echo '  out    <json>   Convert evaluated parmod description to item properties'
    echo '  help            Display this help information'
    echo '  (file|close|unit|eval write the resulting parmod description to stdout)'
    echo '  (addto|mergin|replin modify the first argument)'
    echo '  (out writes two files <json>-itemprops and <json>-omitprops)'
    echo 'A <uitems> file contains a list of used external toplevel item ids, each on a separate line.'
    echo 'A <ufile> contains a list of <cfile> names, each on a separate line.'
    echo 'Options for commands file|close|unit: '
    echo '  -I<dir>  Directory for searching C include files. Can be repeated, as for cpp. '
    echo '  -G<dir>  Directory for searching Gencot auxiliary files. Only one can be given, default is "."'
    echo '  -k   Keep directory with intermediate files and display it at the end.'
}

short_usage()
{
    echo $USAGE
    echo 'Run with -h for more information.'
}

# Parse options
OPTS=$(getopt -o hkI:G: -n "$0" -- "$@")

if [ $? != 0 ]
then
    short_usage
    exit 1
fi

eval set -- "$OPTS"

INCLPATH=''
GENCOTDIR='.'
KEEP=''
add_incl()
{
    if [ "$1" = "." ] 
    then INCL=""
    else INCL="$1"
    fi
    if [ -z "$INCLPATH" ]
    then INCLPATH=$1
    elif [ "$INCLPATH" = "." ]
    then INCLPATH=":$INCL"
    else INCLPATH="${INCLPATH}:$INCL"
    fi
}

while true; do
    case "$1" in
        -h) long_usage; exit;;
        -k) KEEP='yes'; shift;;
        -I) shift; add_incl "$1"; shift;;
        -G) shift; GENCOTDIR="$1"; shift;;
        --) shift; break;;
    esac
done

# Parse command
PARSE=''
CLOSE=''
REQARGS=1
OPTARGS=''
CMD=$1

case "$CMD" in
    file) PARSE='yes';REQARGS=2;;
    close) PARSE='yes';CLOSE='close';REQARGS=2;;
    unit) PARSE='yes';REQARGS=2;;
    show) ;;
    idlist) ;;
    diff) REQARGS=2;;
    iddiff) REQARGS=2;;
    addto) REQARGS=2;;
    mergin) REQARGS=2;;
    replin) REQARGS=2;;
    eval) ;;
    out) ;;
    help) long_usage; exit;;
    *) echo "unknown parmod command: $1"; short_usage; exit;;
esac

shift

if [ $OPTARGS ]
then
    if [ $REQARGS -gt $# ]
    then
        echo "wrong number of arguments for parmod command ${CMD}: expected at least $REQARGS"
        exit
    fi
else
    if [ "$REQARGS" != "$#" ]
    then
        echo "wrong number of arguments for parmod command ${CMD}: expected $REQARGS"
        exit
    fi
fi

prepare_aux()
{
    if [ -e $GENCOTDIR/$CNAME.gencot-$1 ] 
    then
        if [ -e $GENCOTDIR/common.gencot-$1 ]
        then
            cat $GENCOTDIR/common.gencot-$1 $GENCOTDIR/$CNAME.gencot-$1 > $TMPDIR/$CNAME.gencot-$1
        else
            cp $GENCOTDIR/$CNAME.gencot-$1 $TMPDIR/$CNAME.gencot-$1
        fi
    else
        if [ -e $GENCOTDIR/common.gencot-$1 ]
        then
            cp $GENCOTDIR/common.gencot-$1 $TMPDIR/$CNAME.gencot-$1
        else
            touch $TMPDIR/$CNAME.gencot-$1
        fi
    fi
}

prepare_cfile()
{
    CFILE=$1
    CBASE=$(basename $CFILE)
    CNAME=$(expr match $CBASE '\(.*\)[.][^.]*' '|' $CBASE)
    for aux in addincl omitincl noincl manmacros macroconv ppretain chsystem
    do prepare_aux $aux
    done
    cat $TMPDIR/$CNAME.gencot-addincl $CFILE | $BIN/gencot-include $INCLPATH $TMPDIR/$CNAME.gencot-noincl \
        | $BIN/gencot-remcomments | tee $TMPDIR/$CNAME.remc \
        | $BIN/gencot-selpp \
        | $BIN/gencot-selppconst $TMPDIR/$CNAME.gencot-manmacros \
        | $BIN/gencot-gendummydecls > $TMPDIR/$CNAME.dummydecls
    $BIN/gencot-rempp $TMPDIR/$CNAME.gencot-ppretain < $TMPDIR/$CNAME.remc \
        | $BIN/gencot-chsystem $TMPDIR/$CNAME.gencot-chsystem \
        | $BIN/gencot-cpp $TMPDIR/$CNAME.gencot-macroconv $TMPDIR/$CNAME.dummydecls \
        > $TMPDIR/$CNAME.in
    echo $TMPDIR/$CNAME.in >> $TMPDIR/infiles
}

prepare_manitems()
{
    if [ -e $1 ]
    then
        $BIN/gencot-prclist < $1 > $2
    else
        touch $2
    fi
}

if [ "$CMD" != "idlist" -a "$CMD" != "out" ]
then
    TMPDIR=$(mktemp -d)
fi

if [ "$CMD" = "unit" ]
then
    UFILE=$1
    UBASE=$(basename $UFILE)
    UNAME=$(expr match $UBASE '\(.*\)[.][^.]*' '|' $UBASE)
    MIFILE=$GENCOTDIR/$UNAME.unit-manitems
    PMIFILE=$TMPDIR/$UNAME.unit-prcman
    prepare_manitems $MIFILE $PMIFILE
    for file in $(cat $1)
    do prepare_cfile $file
    done
    $BIN/items-used $PMIFILE < $TMPDIR/infiles > $TMPDIR/useditems
    $BIN/items-extfuns $TMPDIR/useditems < $TMPDIR/infiles | sort > $TMPDIR/extfunids
    $BIN/$PRC filter $TMPDIR/extfunids < $2 | tee $TMPDIR/extfuns.json \
        | $BIN/$PRC funids | sort | diff - $TMPDIR/extfunids > $TMPDIR/extfunids.diff
    if [ -s $TMPDIR/extfunids.diff ]
    then
        echo "Warning: no function found for:" >&2
        cat $TMPDIR/extfunids.diff >&2
    fi
    cat $TMPDIR/extfuns.json
elif [ $PARSE ]
then 
    prepare_cfile $1
    $BIN/parmod-gen $CBASE $2 $CLOSE < $TMPDIR/$CNAME.in
elif [ "$CMD" = "show" ]
then
    #$BIN/$PRC check < $1
    $BIN/$PRC unconfirmed < $1 > $TMPDIR/uclist
    ucfuns=$(wc -w < $TMPDIR/uclist)
    echo
    echo "$ucfuns unconfirmed parameter descriptions:"
    cat $TMPDIR/uclist
    if [ "0" != "$ucfuns" ]
    then
        echo "To confirm, edit the file $1"
        echo
    fi
    $BIN/$PRC required < $1 > $TMPDIR/rilist
    echo "$(wc -w < $TMPDIR/rilist) required invocations:"
    cat $TMPDIR/rilist
elif [ "$CMD" = "idlist" ]
then
    $BIN/$PRC funids < $1
elif [ "$CMD" = "diff" ]
then
    $BIN/$PRC funids < $1 > $TMPDIR/flist
    $BIN/$PRC funids < $2 | cat $TMPDIR/flist - | sort | tee $TMPDIR/flistsort \
        | uniq -d > $TMPDIR/flistcommon
    uniq -u $TMPDIR/flistsort | cat $TMPDIR/flistcommon - > $TMPDIR/flist
    $BIN/$PRC sort $TMPDIR/flist < $1 > $TMPDIR/sorted1
    $BIN/$PRC sort $TMPDIR/flist < $2 > $TMPDIR/sorted2
    diff $TMPDIR/sorted1 $TMPDIR/sorted2
elif [ "$CMD" = "iddiff" ]
then
    $BIN/$PRC funids < $1 | sort > $TMPDIR/flist
    $BIN/$PRC funids < $2 | sort | diff $TMPDIR/flist -
elif [ "$CMD" = "addto" ]
then
    $BIN/$PRC funids < $1 > $TMPDIR/flist
    $BIN/$PRC funids < $2 >> $TMPDIR/flist
    $BIN/$PRC required < $1 > $TMPDIR/rilist
    $BIN/$PRC filter $TMPDIR/rilist < $2 \
        | $BIN/$PRC merge $1 | $BIN/$PRC sort $TMPDIR/flist > $TMPDIR/result
    cp $TMPDIR/result $1
elif [ "$CMD" = "mergin" ]
then
    $BIN/$PRC funids < $1 > $TMPDIR/flist
    $BIN/$PRC funids < $2 >> $TMPDIR/flist
    $BIN/$PRC merge $2 < $1 | $BIN/$PRC sort $TMPDIR/flist > $TMPDIR/result
    cp $TMPDIR/result $1
elif [ "$CMD" = "replin" ]
then
    $BIN/$PRC funids < $1 > $TMPDIR/flist
    $BIN/$PRC filter $TMPDIR/flist < $2 \
        | $BIN/$PRC merge $1 | $BIN/$PRC sort $TMPDIR/flist > $TMPDIR/result
    cp $TMPDIR/result $1
elif [ "$CMD" = "eval" ]
then
    $BIN/$PRC unconfirmed < $1 > $TMPDIR/uclist
    ucfuns=$(wc -w < $TMPDIR/uclist)
    if [ "0" != "$ucfuns" ]
    then
        echo "Cannot evaluate $1 due to unconfirmed parameter descriptions." >&2
        exit 1
    fi
    $BIN/$PRC required < $1 > $TMPDIR/rilist
    rifuns=$(wc -w < $TMPDIR/rilist)
    if [ "0" != "$rifuns" ]
    then
        echo "Cannot evaluate $1 due to missing required invocations." >&2
        exit 1
    fi
    $BIN/$PRC eval < $1
elif [ "$CMD" == "out" ]
then
    $BIN/$PRC out < $1 > $1-itemprops
    $BIN/$PRC omit < $1 > $1-omitprops
fi

if [ "$CMD" != "idlist" -a "$CMD" != "out" ]
then
    if [ $KEEP ]
    then
        echo "Kept directory with intermediate files: $TMPDIR" >&2
    else
        rm -r $TMPDIR
    fi
fi
