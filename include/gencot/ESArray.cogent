{- Functions for explicitly sized array types -}

#ifndef GENCOT_ESARRAY
#define GENCOT_ESARRAY

#include "CArray.cogent"

-- Array pointer type.
--   el: element type
type CArrPtr el = { arr: el }

-- Explicitly sized array type.
-- Implemented by a pair of an element pointer and the size.
--   el: element type
type CArrES el = (CArrPtr el, U64)

-- Macro for constructing an explicitly sized array type.
--   knd: one of U or empty. Specifies the kind of element type. 
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: the element type for which to construct the explicitly sized array type.
#define CAES(knd,el) CArrES Gencot_APPFUN(Gencot_ID(knd)altUBOX,el)

-- Macro for constructing an explicitly sized array of type CArrES el.
--   p: element pointer of type CArrPtr el 
--   s: number of elements pointed to by p
#define MKCAES(p,s) (p,s)

{- Conversions -}

-- Convert from fixed size array type to explicitly sized array type.
--   arr: the fixed size array type
--   aes: the explicitly sized array type
toCAES: all(arr,aes). arr -> aes

-- Convert from explicitly sized array type to fixed size array type.
-- If the size does not fit return the original input.
--   arr: the fixed size array type
--   aes: the explicitly sized array type
fromCAES: all(arr,aes). aes -> Result arr aes

-- Convert from readonly fixed size array type to explicitly sized array type.
--   arr: the fixed size array type
--   aes: the explicitly sized array type
rotoCAES: all(arr,aes). arr! -> aes!

-- Convert from readonly explicitly sized array type to fixed size array type.
-- If the size does not fit return the original input.
--   arr: the fixed size array type
--   aes: the explicitly sized array type
rofromCAES: all(arr,aes). aes! -> Result arr! aes!

-- Macro for specifying typed instances of the conversion functions
--   size: number of elements in the fixed size array type
--   knd: one of U or empty. Specifies the kind of element type. 
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: element type
#define TOCAES(size,knd,el) toCAES[CARR(size,knd,el),CAES(knd,el)]
#define FROMCAES(size,knd,el) fromCAES[CARR(size,knd,el),CAES(knd,el)]
#define ROTOCAES(size,knd,el) rotoCAES[CARR(size,knd,el),CAES(knd,el)]
#define ROFROMCAES(size,knd,el) rofromCAES[CARR(size,knd,el),CAES(knd,el)]

{- Creating and disposing -}

-- Macro for generating the empty-value type for a valid-value explicitly sized array type CAES(knd,el).
--   knd: one of U or empty. Specifies the kind of element type. 
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: element type
#define EVT_CAES(knd,el) (EVT(CArrPtr Gencot_APPFUN(Gencot_ID(knd)altUBOX,el)), U64)

-- Creating an empty value of an explicitly sized empty-value array type by allocating memory for 
-- a specified number of elements for it and returning the pair of the pointer to the allocated space 
-- and the number of elements.
-- In case of error only the heap is returned
--   evp: the empty-value explicitly sized array type.
createCAES: all(evp). (U64, Heap) -> Result (evp,Heap) Heap

{- Initialization and Clearing -}

-- Macros for specifying typed instances of the general initialization and clearing functions
-- and their types
--   func: one of Heap, Simp
--   knd: one of U or empty. Specifies the kind of element type. 
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: element type
#define INIT_CAES(func,knd,el) Gencot_MKFUNNAME(init,func)[EVT_CAES(knd,el),CAES(knd,el)]
#define CLEAR_CAES(func,knd,el) Gencot_MKFUNNAME(clear,func)[CAES(knd,el),EVT_CAES(knd,el)]
#define INITTYPE_CAES(func,knd,el) Gencot_OPTTRNS(func)IniFun (EVT_CAES(knd,el)) (CAES(knd,el)) Gencot_IELARGOUT(func,)
#define CLEARTYPE_CAES(func,knd,el) ClrFun CAES(knd,el) EVT_CAES(knd,el) Gencot_CELARGOUT(func,)

-- Macros for specifying typed instances of the per-element initialization and clearing functions
-- and their function types.
--   func: one of ParCmb, Par, Seq
--   knd: one of U or empty. Specifies the kind of element type. 
--     Must be U for an unboxed type representing a C struct, union, or array type, otherwise empty.
--   el: element type
--   arg: type of additional input to the element function
--   out: type of additional output from the element function (ignored for func = Simp,Seq)
#define INITelts_CAES(func,knd,el,arg,out) \
  Gencot_MKFUNNAME(initElts,func)[EVT_CAES(knd,el),CAES(knd,el),\
                                 EVT(CPTR(knd,el)),CPTR(knd,el),Gencot_OPTOUT(func,arg,out)]
#define CLEARelts_CAES(func,knd,el,arg,out) \
  Gencot_MKFUNNAME(clearElts,func)[CAES(knd,el),EVT_CAES(knd,el),\
                                  CPTR(knd,el),EVT(CPTR(knd,el)),Gencot_OPTOUT(func,arg,out)]
#define INITTYPEelts_CAES(func,knd,el,arg,out) \
  IniFun (EVT_CAES(knd,el)) (CAES(knd,el)) \
         (IniFun (EVT(CPTR(knd,el))) (CPTR(knd,el)) arg Gencot_ARRELOUT(func,arg,out), \
         arg Gencot_OPTARRCMB(func,out)) Gencot_ARRELOUT(func,arg,out)
#define CLEARTYPEelts_CAES(func,knd,el,arg,out) \
  ClrFun CAES(knd,el) EVT_CAES(knd,el) \
         (ClrFun (CPTR(knd,el)) (EVT(CPTR(knd,el))) arg Gencot_ARRELOUT(func,arg,out), \
         arg Gencot_OPTARRCMB(func,out)) Gencot_ARRELOUT(func,arg,out)

#endif {- GENCOT_ESARRAY -}
