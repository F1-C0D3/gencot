-- Function definitions

cogent_ffv1 : () -> ()
cogent_ffv1 () = ()
cogent_ffv2 : () -> ()
cogent_ffv2 () = ()

cogent_ffv11 : MayNull (CPtr U32) -> ()
cogent_ffv11 i = () -- i: -ar
cogent_ffv12 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_ffv12 i = ((), i)
cogent_ffv13 : MayNull (CPtr U32) -> ()
cogent_ffv13 i = () -- i: -ar
cogent_ffv14 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_ffv14 i = ((), i)
cogent_ffv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ()
cogent_ffv15 (i, j) = () -- i: -ar, j: -ar
cogent_ffv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_ffv16 (i, j) =
   let i = (if 0 > 0
         then i
         else i) !j
   in ((), i) -- j: -ar
cogent_ffv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_ffv17 (i, j) =
   (()
   , let (c', ()) = (0, ()) !j
   in if c' > 0 then j else j) -- i: -ar
cogent_ffv18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_ffv18 (i, j) =
   (()
   , let (c', (), i) = (0
                       , ()
                       , i) !j
   in if c' > 0 then i else i
   , let (c', (), i) = (0
                       , ()
                       , i) !j
   in if c' > 0 then j else j)

type GlobState1 = CPtr U32 -- glob1: gs1
type GlobState2 = CPtr U32 -- glob2: gs2

cogent_ffv21 : GlobState1 -> ( (), GlobState1 )
cogent_ffv21 g = ((), g) -- g: gs1
cogent_ffv22 : GlobState2 -> ( (), GlobState2 )
cogent_ffv22 g = ((), g) -- g: gs2
cogent_ffv23 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv23 (g1, g2) =
   ((), g1, g2) -- g1: gs1, g2: gs2
cogent_ffv24 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv24 (g1, g2) =
   ((), g1, g2) -- g2: gs2, g1: gs1
cogent_ffv25 : GlobState1 -> ( (), GlobState1 )
cogent_ffv25 g =
   ((), g { cont = 5 }) -- g: gs1
cogent_ffv26 : GlobState1 -> ( (), GlobState1 )
cogent_ffv26 g = ((), g) -- g: gs1 (!)
cogent_ffv27 : GlobState1 -> ( (), GlobState1 )
cogent_ffv27 g =
   (()
   , let g { cont = p0' } = g
   in g { cont = p0' + 1 }) -- g: gs1
cogent_ffv28 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv28 (g1, g2) =
   let ((), g1) = (()
                  , g1 { cont = getPtr[GlobState2!
                                      , U32] g2 }) !g2
   in ((), g1, g2) -- g1: gs1, g2: gs2
cogent_ffv29 : GlobState1! -> ()
cogent_ffv29 g1 = () -- g: gs1 ro

cogent_ffv31 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), GlobState1 )
cogent_ffv31 (i, g) =
   let g = g { cont = gencotDummy "Dereferencing pointer which may be NULL" } !i
   in ((), g) -- i: -ar, g: gs1
cogent_ffv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv32 (i, g) =
   let ((), i) = ((), i) !g
   in ((), i, g) -- g: gs1
cogent_ffv33 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv33 (i, g) =
   (()
   , i
   , let g { cont = p0' } = g
   in g { cont = p0' + 1 }) -- g: gs1
cogent_ffv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv34 (i, j, g) =
   let (g, i) = (let (c'
                     , ()
                     , i) = (0, (), i) !g
         in if c' > 0
            then (g, i)
            else
               (g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
               , i)) !j
   in ((), i, g) -- j: -ar, g: gs1
cogent_ffv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_ffv35 (i, j, g) =
   let (g, i, ()) = (let (c'
                         , ()
                         , i) = (0, (), i) !g
         in if c' > 0
            then (g, i, ())
            else
               (g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
               , i
               , ())) !j
   in ((), i, j, g) -- g: gs1
cogent_ffv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_ffv36 (i, j, g1, g2) =
   let ((), i, (), g2) = (if 0 > 0
         then ((), i, (), g2)
         else (()
              , i
              , ()
              , g2 { cont = gencotDummy "Dereferencing pointer which may be NULL" })) !j !g1
   in ((), i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_ffv41 : Heap -> ( (), Heap )
cogent_ffv41 heap = ((), heap) -- ffv41: hu
cogent_ffv42 : ( GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_ffv42 (g, heap) =
   ((), g, heap) -- ffv42: hu, g: gs1
cogent_ffv43 : ( MayNull (CPtr U32), Heap ) -> ( (), Heap )
cogent_ffv43 (i, heap) =
   ((), heap) -- i: -ar, ffv43: hu
cogent_ffv44 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_ffv44 (i, heap) =
   ((), i, heap) -- ffv44: hu
cogent_ffv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_ffv45 (i, g, heap) =
   let g = g { cont = gencotDummy "Dereferencing pointer which may be NULL" } !i
   in ((), g, heap) -- i: -ar, g: gs1, ffv45: hu
cogent_ffv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffv46 (i, g, heap) =
   let ((), i) = ((), i) !g
   in ((), i, g, heap) -- g: gs1, ffv46: hu
cogent_ffv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_ffv47 (i, j, heap) =
   let (i, ()) = (if 0 > 0
         then (i, ())
         else (i, ())) !j
   in ((), i, j, heap) -- ffv47: hu
cogent_ffv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffv48 (i, j, g, heap) =
   let (g, i, ()) = (let (c'
                         , ()
                         , i) = (0, (), i) !g
         in if c' > 0
            then (g, i, ())
            else
               (g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
               , i
               , ())) !j
   in ((), i, j, g, heap) -- g: gs1, ffv48: hu


cogent_ffi1 : () -> U32
cogent_ffi1 () = 5

cogent_ffi11 : MayNull (CPtr U32) -> U32
cogent_ffi11 i = 5 -- i: -ar
cogent_ffi12 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_ffi12 i = (5, i)
cogent_ffi13 : MayNull (CPtr U32) -> U32
cogent_ffi13 i =
   if 0 > 0 then r' else 2 -- i: -ar 
cogent_ffi14 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_ffi14 i =
   (if 0 > 0 then r' else 2
   , if 0 > 0 then i else i)
cogent_ffi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> U32
cogent_ffi15 (i, j) =
   let (c', ()) = (0, ()) !j
   in if c' > 0
      then r'
      else if 0 > 0 then r' else 2 -- i: -ar, j: -ar 
cogent_ffi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_ffi16 (i, j) =
   (let (c', (), i) = (0, (), i) !j
   in if c' > 0
      then r'
      else if 0 > 0 then r' else 2
   , let (c', (), i) = (0
                       , ()
                       , i) !j
   in if c' > 0 then i else i) -- j: -ar
cogent_ffi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_ffi17 (i, j) =
   (let (c', ()) = (0, ()) !j
   in if c' > 0
      then r'
      else if 0 > 0 then r' else 2
   , let (c', ()) = (0, ()) !j
   in if c' > 0
      then j
      else if 0 > 0 then j else j) -- i: -ar
cogent_ffi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_ffi18 (i, j) =
   (let (c', (), i) = (0, (), i) !j
   in if c' > 0
      then r'
      else if 0 > 0 then r' else 2
   , let (c', (), i) = (0
                       , ()
                       , i) !j
   in if c' > 0 then i else i
   , let (c', (), i) = (0
                       , ()
                       , i) !j
   in if c' > 0
      then j
      else if 0 > 0 then j else j)

cogent_ffi21 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi21 g = (5, g) -- g: gs1
cogent_ffi22 : GlobState2 -> ( U32, GlobState2 )
cogent_ffi22 g = (5, g) -- g: gs2
cogent_ffi23 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi23 (g1, g2) =
   (5, g1, g2) -- g1: gs1, g2: gs2
cogent_ffi24 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi24 (g1, g2) =
   (5, g1, g2) -- g2: gs2, g1: gs1
cogent_ffi25 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi25 g =
   (if 0 > 0 then r' else 2
   , if 0 > 0
   then g { cont = 5 }
   else g { cont = 5 }) -- g: gs1
cogent_ffi26 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi26 g =
   (if 0 > 0 then r' else 2, g) -- g: gs1 (!)
cogent_ffi27 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi27 g =
   (if 0 > 0 then r' else 2
   , if 0 > 0
   then let g { cont = p0' } = g
      in g { cont = p0' + 1 }
   else let g { cont = p0' } = g
      in g { cont = p0' + 1 }) -- g: gs1
cogent_ffi28 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi28 (g1, g2) =
   let ((), g1, r') = (if 0 > 0
         then (()
              , g1 { cont = getPtr[GlobState2!
                                  , U32] g2 }
              , r')
         else (()
              , g1 { cont = getPtr[GlobState2!
                                  , U32] g2 }
              , 2)) !g2
   in (r', g1, g2) -- g1: gs1, g2: gs2

cogent_ffi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, GlobState1 )
cogent_ffi31 (i, g) =
   let (g, r') = (if 0 > 0
         then
            (g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
            , r')
         else
            (g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
            , 2)) !i
   in (r', g) -- i: -ar, g: gs1
cogent_ffi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi32 (i, g) =
   let ((), i, r') = (if 0 > 0
         then ((), i, r')
         else ((), i, 2)) !g
   in (r', i, g) -- g: gs1
cogent_ffi33 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi33 (i, g) =
   (if 0 > 0 then r' else 2
   , if 0 > 0 then i else i
   , if 0 > 0
   then let g { cont = p0' } = g
      in g { cont = p0' + 1 }
   else let g { cont = p0' } = g
      in g { cont = p0' + 1 }) -- g: gs1
cogent_ffi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi34 (i, j, g) =
   let (g, i, r') = (let (c'
                         , ()
                         , i) = (0, (), i) !g
         in if c' > 0
            then (g, i, r')
            else (if 0 > 0
                 then
                    g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
                 else
                    g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
                 , i
                 , if 0 > 0 then r' else 2)) !j
   in (r', i, g) -- j: -ar, g: gs1
cogent_ffi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_ffi35 (i, j, g) =
   let (g, i, (), r') = (let (c'
                             , ()
                             , i) = (0, (), i) !g
         in if c' > 0
            then (g, i, (), r')
            else (if 0 > 0
                 then
                    g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
                 else
                    g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
                 , i
                 , ()
                 , if 0 > 0 then r' else 2)) !j
   in (r', i, j, g) -- g: gs1
cogent_ffi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_ffi36 (i, j, g1, g2) =
   let (()
       , i
       , ()
       , g1
       , r') = (if 0 > 0
         then ((), i, (), g1, r')
         else (()
              , i
              , ()
              , if 0 > 0
              then
                 g1 { cont = gencotDummy "Dereferencing pointer which may be NULL" }
              else
                 g1 { cont = gencotDummy "Dereferencing pointer which may be NULL" }
              , if 0 > 0
              then r'
              else 2)) !j !g2
   in (r', i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_ffi41 : Heap -> ( U32, Heap )
cogent_ffi41 heap = (5, heap) -- ffv41: hu
cogent_ffi42 : ( GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_ffi42 (g, heap) =
   (5, g, heap) -- ffv41: hu, g: gs1
cogent_ffi43 : ( MayNull (CPtr U32), Heap ) -> ( U32, Heap )
cogent_ffi43 (i, heap) =
   (if 0 > 0 then r' else 2, heap) -- i: -ar, ffv43: hu
cogent_ffi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_ffi44 (i, heap) =
   (if 0 > 0 then r' else 2
   , if 0 > 0 then i else i
   , heap) -- ffv44: hu
cogent_ffi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_ffi45 (i, g, heap) =
   let (g, r') = (if 0 > 0
         then
            (g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
            , r')
         else
            (g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
            , 2)) !i
   in (r', g, heap) -- i: -ar, g: gs1, ffv45: hu
cogent_ffi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi46 (i, g, heap) =
   let ((), i, r') = (if 0 > 0
         then ((), i, r')
         else ((), i, 2)) !g
   in (r', i, g, heap) -- g: gs1, ffv46: hu
cogent_ffi47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_ffi47 (i, j, heap) =
   let (i, (), r') = (if 0 > 0
         then (i, (), r')
         else (i
              , ()
              , if 0 > 0 then r' else 2)) !j
   in (r', i, j, heap) -- ffv47: hu (Error: no parameter for glob1)
cogent_ffi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi48 (i, j, g, heap) =
   let (g, i, (), r') = (let (c'
                             , ()
                             , i) = (0, (), i) !g
         in if c' > 0
            then (g, i, (), r')
            else (if 0 > 0
                 then
                    g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
                 else
                    g { cont = gencotDummy "Dereferencing pointer which may be NULL" }
                 , i
                 , ()
                 , if 0 > 0 then r' else 2)) !j
   in (r', i, j, g, heap) -- g: gs1, ffv48: hu
cogent_ffi49 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi49 (i, j, g, heap) =
   let ((), i, r') = (if 0 > 0
         then ((), i, r')
         else ((), i, 2)) !j
   in (r', i, j, g, heap) -- g: gs1, ffv49: hu


-- Function calls

cogent_cffv1 : () -> ()
cogent_cffv1 () = ()

cogent_cffv11 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_cffv11 i = ((), i)
cogent_cffv12 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_cffv12 i =
   (()
   , let (_, i) = cogent_ffv12 i
   in i)
cogent_cffv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv15 (i, j) =
   ((), i, j)
cogent_cffv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv16 (i, j) =
   (()
   , let (_, i) = cogent_ffv16 (i
                               , j)
   in i
   , j)
cogent_cffv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv17 (i, j) =
   (()
   , i
   , let (_, j) = cogent_ffv17 (i
                               , j)
   in j)
cogent_cffv18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv18 (i, j) =
   (()
   , let (_
         , i
         , _) = cogent_ffv18 (i, j)
   in i
   , let (_
         , _
         , j) = cogent_ffv18 (i, j)
   in j)

cogent_cffv21 : GlobState1 -> ( (), GlobState1 )
cogent_cffv21 g =
   (()
   , let (_, g) = cogent_ffv21 g
   in g) -- g: gs1
cogent_cffv22 : GlobState1 -> ( (), GlobState1 )
cogent_cffv22 g = ((), g) -- g: gs1 (Error: no argument for gs2)
cogent_cffv23 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_cffv23 (g1, g2) =
   (()
   , let (_
         , g1
         , _) = cogent_ffv23 (g1, g2)
   in g1
   , let (_
         , _
         , g2) = cogent_ffv23 (g1, g2)
   in g2) -- g1: gs1, g2: gs2

cogent_cffv31 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_cffv31 (i, g) =
   (()
   , i
   , let (_, g) = cogent_ffv31 (i
                               , g)
   in g) -- g: gs1
cogent_cffv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_cffv32 (i, g) =
   (()
   , let (_
         , i
         , _) = cogent_ffv32 (i, g)
   in i
   , let (_
         , _
         , g) = cogent_ffv32 (i, g)
   in g) -- g: gs1
cogent_cffv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffv34 (i, j, g) =
   (()
   , let (_
         , i
         , _) = cogent_ffv34 (i, j, g)
   in i
   , j
   , let (_
         , _
         , g) = cogent_ffv34 (i, j, g)
   in g) -- g: gs1
cogent_cffv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffv35 (i, j, g) =
   (()
   , let (_
         , i
         , _
         , _) = cogent_ffv35 (i, j, g)
   in i
   , let (_
         , _
         , j
         , _) = cogent_ffv35 (i, j, g)
   in j
   , let (_
         , _
         , _
         , g) = cogent_ffv35 (i, j, g)
   in g) -- g: gs1
cogent_cffv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cffv36 (i, j, g1, g2) =
   (()
   , let (_
         , i
         , _
         , _
         , _) = cogent_ffv36 (i
                             , j
                             , g1
                             , g2)
   in i
   , let (_
         , _
         , j
         , _
         , _) = cogent_ffv36 (i
                             , j
                             , g1
                             , g2)
   in j
   , let (_
         , _
         , _
         , g1
         , _) = cogent_ffv36 (i
                             , j
                             , g1
                             , g2)
   in g1
   , let (_
         , _
         , _
         , _
         , g2) = cogent_ffv36 (i
                              , j
                              , g1
                              , g2)
   in g2) -- g1: gs1, g2: gs2

cogent_cffv41 : Heap -> ( (), Heap )
cogent_cffv41 heap =
   (()
   , let (_
         , heap) = cogent_ffv41 heap
   in heap) -- cffv41: hu
cogent_cffv42 : ( GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_cffv42 (g, heap) =
   (()
   , let (_
         , g
         , _) = cogent_ffv42 (g, heap)
   in g
   , let (_
         , _
         , heap) = cogent_ffv42 (g, heap)
   in heap) -- cffv41: hu, g: gs1
cogent_cffv43 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_cffv43 (i, heap) =
   (()
   , i
   , let (_
         , heap) = cogent_ffv43 (i, heap)
   in heap) -- cffv43: hu
cogent_cffv44 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_cffv44 (i, heap) =
   (()
   , let (_
         , i
         , _) = cogent_ffv44 (i, heap)
   in i
   , let (_
         , _
         , heap) = cogent_ffv44 (i, heap)
   in heap) -- cffv44: hu
cogent_cffv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv45 (i, g, heap) =
   (()
   , i
   , let (_
         , g
         , _) = cogent_ffv45 (i, g, heap)
   in g
   , let (_
         , _
         , heap) = cogent_ffv45 (i
                                , g
                                , heap)
   in heap) -- g: gs1, cffv45: hu
cogent_cffv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv46 (i, g, heap) =
   (()
   , let (_
         , i
         , _
         , _) = cogent_ffv46 (i, g, heap)
   in i
   , let (_
         , _
         , g
         , _) = cogent_ffv46 (i, g, heap)
   in g
   , let (_
         , _
         , _
         , heap) = cogent_ffv46 (i
                                , g
                                , heap)
   in heap) -- g: gs1, cffv46: hu
cogent_cffv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_cffv47 (i, j, heap) =
   (()
   , let (_
         , i
         , _
         , _) = cogent_ffv47 (i, j, heap)
   in i
   , let (_
         , _
         , j
         , _) = cogent_ffv47 (i, j, heap)
   in j
   , let (_
         , _
         , _
         , heap) = cogent_ffv47 (i
                                , j
                                , heap)
   in heap) -- cffv47: hu
cogent_cffv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv48 (i, j, g, heap) =
   (()
   , let (_
         , i
         , _
         , _
         , _) = cogent_ffv48 (i
                             , j
                             , g
                             , heap)
   in i
   , let (_
         , _
         , j
         , _
         , _) = cogent_ffv48 (i
                             , j
                             , g
                             , heap)
   in j
   , let (_
         , _
         , _
         , g
         , _) = cogent_ffv48 (i
                             , j
                             , g
                             , heap)
   in g
   , let (_
         , _
         , _
         , _
         , heap) = cogent_ffv48 (i
                                , j
                                , g
                                , heap)
   in heap) -- g: gs1, cffv48: hu

cogent_cffi1 : () -> U32
cogent_cffi1 () = cogent_ffi1 ()

cogent_cffi11 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_cffi11 i =
   (cogent_ffi11 i, i)
cogent_cffi12 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_cffi12 i = cogent_ffi12 i
cogent_cffi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi15 (i, j) =
   (cogent_ffi15 (i, j), i, j)
cogent_cffi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi16 (i, j) =
   let (r', i) = cogent_ffi16 (i
                              , j)
   in (r', i, j)
cogent_cffi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi17 (i, j) =
   let (r', j) = cogent_ffi17 (i
                              , j)
   in (r', i, j)
cogent_cffi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi18 (i, j) =
   cogent_ffi18 (i, j)

cogent_cffi21 : GlobState1 -> ( U32, GlobState1 )
cogent_cffi21 g = cogent_ffi21 g -- g: gs1
cogent_cffi22 : GlobState2 -> ( U32, GlobState2 )
cogent_cffi22 g = cogent_ffi22 g -- g: gs2
cogent_cffi23 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_cffi23 (g1, g2) =
   cogent_ffi23 (g1, g2) -- g1: gs1, g2: gs2

cogent_cffi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_cffi31 (i, g) =
   let (r', g) = cogent_ffi31 (i
                              , g)
   in (r', i, g) -- g: gs1
cogent_cffi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_cffi32 (i, g) =
   cogent_ffi32 (i, g) -- g: gs1
cogent_cffi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffi34 (i, j, g) =
   let (r', i, g) = cogent_ffi34 (i
                                 , j
                                 , g)
   in (r', i, j, g) -- g: gs1
cogent_cffi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffi35 (i, j, g) =
   cogent_ffi35 (i, j, g) -- g: gs1
cogent_cffi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cffi36 (i, j, g1, g2) =
   cogent_ffi36 (i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_cffi41 : Heap -> ( U32, Heap )
cogent_cffi41 heap =
   cogent_ffi41 heap -- cffv41: hu
cogent_cffi42 : ( GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_cffi42 (g, heap) =
   cogent_ffi42 (g, heap) -- cffv41: hu, g: gs1
cogent_cffi43 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_cffi43 (i, heap) =
   let (r', heap) = cogent_ffi43 (i
                                 , heap)
   in (r', i, heap) -- cffv43: hu
cogent_cffi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_cffi44 (i, heap) =
   cogent_ffi44 (i, heap) -- cffv44: hu
cogent_cffi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi45 (i, g, heap) =
   let (r'
       , g
       , heap) = cogent_ffi45 (i
                              , g
                              , heap)
   in (r', i, g, heap) -- g: gs1, cffv45: hu
cogent_cffi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi46 (i
              , heap
              , globheap1) =
   cogent_ffi46 (i
                , heap
                , globheap1) -- heap: gs1, cffv46: hu
cogent_cffi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi48 (i, j, g, heap) =
   cogent_ffi48 (i, j, g, heap) -- g: gs1, cffv48: hu
cogent_cffi49 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi49 (i, j, g, heap) =
   cogent_ffi49 (i, j, g, heap) -- g: gs1, cffv49: hu

-- Function Pointers

type Cogent_fpfvv =
   #CFunPtr_FXX_Void
type Cogent_ffvv = () -> ()
type Cogent_ffvi =
   MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
type Cogent_fpfvi =
   #CFunPtr_FXM_N_P_U32X_Void
type Cogent_fpfiv =
   #CFunPtr_FXX_U32
type Cogent_ffiv = () -> U32
type Cogent_fpfii =
   #CFunPtr_FXM_N_P_U32X_U32
type Cogent_ffii =
   MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )

type Struct_Cogent_fstd = { fvv : #Cogent_fpfvv, fvi : #Cogent_fpfvi, fiv : #Cogent_fpfiv, fii : #Cogent_fpfii }
type Struct_Cogent_fsptd = { fvv : #CFunPtr_Cogent_ffvv, fvi : #CFunPtr_Cogent_ffvi, fiv : #CFunPtr_Cogent_ffiv, fii : #CFunPtr_Cogent_ffii }
type Struct_Cogent_fsdir = { fvv : #CFunPtr_FXX_Void, fvi : #CFunPtr_FXM_N_P_U32X_Void, fiv : #CFunPtr_FXX_U32, fii : #CFunPtr_FXM_N_P_U32X_U32 }
type Struct_Cogent_fsro = { fvi : #Cogent_fpfvi, fii : #Cogent_fpfii } -- fvi/1: ro, fii/1: ro

cogent_ffp1vv : #Struct_Cogent_fstd -> #Cogent_fpfvv
cogent_ffp1vv s = s.fvv
cogent_ffp1vi : #Struct_Cogent_fstd -> #Cogent_fpfvi
cogent_ffp1vi s = s.fvi
cogent_ffp1iv : #Struct_Cogent_fstd -> #Cogent_fpfiv
cogent_ffp1iv s = s.fiv
cogent_ffp1ii : #Struct_Cogent_fstd -> #Cogent_fpfii
cogent_ffp1ii s = s.fii

cogent_cfpv1 : #Struct_Cogent_fstd -> ()
cogent_cfpv1 s = ()
cogent_cfpv2 : #Struct_Cogent_fstd -> ()
cogent_cfpv2 s = ()
cogent_cfpv3 : #Struct_Cogent_fsptd -> ()
cogent_cfpv3 s = ()
cogent_cfpv4 : #Struct_Cogent_fsdir -> ()
cogent_cfpv4 s = ()
cogent_cfpv5 : CArr5 #Cogent_fpfvv -> ( (), CArr5 #Cogent_fpfvv )
cogent_cfpv5 a =
   let () = () !a
   in ((), a)
cogent_cfpv6 : CArr5 #Cogent_fpfvv -> ( (), CArr5 #Cogent_fpfvv )
cogent_cfpv6 a =
   let () = () !a
   in ((), a)
cogent_cfpv7 : #Struct_Cogent_fstd -> ()
cogent_cfpv7 s = ()
cogent_cfpv8 : #Struct_Cogent_fstd -> ()
cogent_cfpv8 s = ()
cogent_cfpv9 : #Cogent_fpfvv -> ()
cogent_cfpv9 f = ()

cogent_cfpv11 : ( #Struct_Cogent_fstd, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv11 (s, i) = ((), i)
cogent_cfpv12 : ( #Struct_Cogent_fsptd, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv12 (s, i) =
   (()
   , let (_
         , i) = fromFunPtr[Cogent_ffvi
                          , #CFunPtr_Cogent_ffvi] s.fvi i
   in i)
cogent_cfpv13 : ( #Struct_Cogent_fsdir, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv13 (s, i) = ((), i)
cogent_cfpv14 : ( #Struct_Cogent_fsro, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv14 (s, i) = ((), i)
cogent_cfpv15 : ( CArr5 #Cogent_fpfvi, MayNull (CPtr U32) ) -> ( (), CArr5 #Cogent_fpfvi, MayNull (CPtr U32) )
cogent_cfpv15 (a, i) =
   let () = () !a
   in ((), a, i)
cogent_cfpv16 : ( #Struct_Cogent_fstd, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv16 (s, i) = ((), i)
cogent_cfpv17 : ( #Cogent_fpfvi, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv17 (f, i) = ((), i)
cogent_cfpv18 : ( #CFunPtr_Cogent_ffvi, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv18 (f, i) =
   ((), let (_, i) = f i in i)

cogent_cfpi1 : #Struct_Cogent_fstd -> U32
cogent_cfpi1 s =
   fromFunPtr[() -> U32
             , #Cogent_fpfiv] s.fiv ()
cogent_cfpi2 : #Struct_Cogent_fstd -> U32
cogent_cfpi2 s =
   fromFunPtr[() -> U32
             , #Cogent_fpfiv] s.fiv ()
cogent_cfpi3 : #Struct_Cogent_fsptd -> U32
cogent_cfpi3 s =
   fromFunPtr[Cogent_ffiv
             , #CFunPtr_Cogent_ffiv] s.fiv ()
cogent_cfpi4 : #Struct_Cogent_fsdir -> U32
cogent_cfpi4 s =
   fromFunPtr[() -> U32
             , #CFunPtr_FXX_U32] s.fiv ()
cogent_cfpi5 : CArr5 #Cogent_fpfiv -> ( U32, CArr5 #Cogent_fpfiv )
cogent_cfpi5 a =
   let (r'
       , ()) = (fromFunPtr[() -> U32
                          , #Cogent_fpfiv] (getArr[(CArr5 #Cogent_fpfiv)!
                                                  , U32
                                                  , #Cogent_fpfiv] (a, 1)) ()
               , ()) !a
   in (r', a)
cogent_cfpi6 : CArr5 #Cogent_fpfiv -> ( U32, CArr5 #Cogent_fpfiv )
cogent_cfpi6 a =
   let (r'
       , ()) = (fromFunPtr[() -> U32
                          , #Cogent_fpfiv] (getArr[(CArr5 #Cogent_fpfiv)!
                                                  , U32
                                                  , #Cogent_fpfiv] (a, 1)) ()
               , ()) !a
   in (r', a)
cogent_cfpi7 : #Struct_Cogent_fstd -> U32
cogent_cfpi7 s =
   fromFunPtr[() -> U32
             , #Cogent_fpfiv] (cogent_ffp1iv s) ()
cogent_cfpi8 : #Struct_Cogent_fstd -> U32
cogent_cfpi8 s =
   fromFunPtr[() -> U32
             , #Cogent_fpfiv] (cogent_ffp1iv s) ()
cogent_cfpi9 : #Cogent_fpfiv -> U32
cogent_cfpi9 f =
   fromFunPtr[() -> U32
             , #Cogent_fpfiv] f ()

cogent_cfpi11 : ( #Struct_Cogent_fstd, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi11 (s, i) =
   (fromFunPtr[MayNull (CPtr U32) -> U32
              , #Cogent_fpfii] s.fii i
   , i)
cogent_cfpi12 : ( #Struct_Cogent_fsptd, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi12 (s, i) =
   fromFunPtr[Cogent_ffii
             , #CFunPtr_Cogent_ffii] s.fii i
cogent_cfpi13 : ( #Struct_Cogent_fsdir, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi13 (s, i) =
   (fromFunPtr[MayNull (CPtr U32) -> U32
              , #CFunPtr_FXM_N_P_U32X_U32] s.fii i
   , i)
cogent_cfpi14 : ( #Struct_Cogent_fsro, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi14 (s, i) =
   (fromFunPtr[MayNull (CPtr U32) -> U32
              , #Cogent_fpfii] s.fii i
   , i)
cogent_cfpi15 : ( CArr5 #Cogent_fpfii, MayNull (CPtr U32) ) -> ( U32, CArr5 #Cogent_fpfii, MayNull (CPtr U32) )
cogent_cfpi15 (a, i) =
   let (r'
       , ()) = (fromFunPtr[MayNull (CPtr U32) -> U32
                          , #Cogent_fpfii] (getArr[(CArr5 #Cogent_fpfii)!
                                                  , U32
                                                  , #Cogent_fpfii] (a, 1)) i
               , ()) !a
   in (r', a, i)
cogent_cfpi16 : ( #Struct_Cogent_fstd, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi16 (s, i) =
   (fromFunPtr[MayNull (CPtr U32) -> U32
              , #Cogent_fpfii] (cogent_ffp1ii s) i
   , i)
cogent_cfpi17 : ( #Cogent_fpfii, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi17 (f, i) =
   (fromFunPtr[MayNull (CPtr U32) -> U32
              , #Cogent_fpfii] f i
   , i)
cogent_cfpi18 : ( #CFunPtr_Cogent_ffii, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi18 (f, i) = f i
