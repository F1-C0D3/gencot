{- Abstract data type for linear types which may be NULL -}

#ifndef GENCOT_MAYNULL
#define GENCOT_MAYNULL

#include "Memory.cogent"
#include "Default.cogent"

-- Linear type with the additional value NULL
--   a: linear type of all non-null values
type MayNull a 

-- Construct the NULL value
null: all(a). () -> MayNull a
roNull: all(a). () -> (MayNull a)!

-- Construct a non-NULL value
mayNull: all(a). a -> MayNull a
roMayNull: all(a). a! -> (MayNull a)!

-- Retrieve value if not NULL.
notNull: all(a). MayNull a -> Option a
roNotNull: all(a). (MayNull a)! -> (Option a)!

-- Utility functions

-- test for being NULL
isNull: all(a). (MayNull a)! -> Bool
isNull mn = roNotNull mn 
   | None -> True 
   | Some _ -> False

-- Part access functions

-- exchange values if not NULL
exchngNull: all(a). (MayNull a,a) -> (MayNull a,a)
exchngNull (mn, nn) = notNull mn
   | None -> (null(),nn)
   | Some x -> (mayNull nn, x)

-- apply modification function if not NULL
--   arg: the type of additional input for the modification function
modifyNull: all(a,arg:<DS,out). ModPartFun (MayNull a) a arg out
  {- DS is used instead of D to avoid an internal Cogent error -}
modifyNull (mn, (modfun,addinput)) = notNull mn
   | None -> (null (), defaultVal ())
   | Some x -> let (r,y) = modfun (x,addinput) in (mayNull r,y)


#endif {- GENCOT_MAYNULL -}
