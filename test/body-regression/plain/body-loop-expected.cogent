cogent_lf1 : ( U32, U32 ) -> U32
cogent_lf1 (a, b) =
   let (c', a, r') = let (c'
                         , a) = let v1' = 0
         and (c', a) = let i = v1'
            and (c', a, i) = let (c'
                                 , a
                                 , i) = repeat[( U8, U32, U32 )
                                              , U32]{{}} #{ n = b
                                                          , stop = \#{ acc = (c'
                                                                             , a
                                                                             , i)
                                                                     , obsv = b } => let v8' = let v6' = i
                                                             and v7' = b
                                                             and v8' = v6' < v7'
                                                             in v8'
                                                          in c' > 1 || not v8'
                                                          , step = \#{ acc = (_
                                                                             , a
                                                                             , i)
                                                                     , obsv = b } => let (c'
                                                                                         , a) = let (v5'
                                                                                                    , a) = let v2' = 2
                                                                and v3' = a
                                                                and v4' = v3' * v2'
                                                                and (v5'
                                                                    , a) = (v4'
                                                                           , v4')
                                                                in (v5', a)
                                                             in (0, a)
                                                          in if c' > 1
                                                             then (c', a, i)
                                                             else let (v12'
                                                                      , i) = let v9' = 1
                                                                   and v10' = i
                                                                   and v11' = v10' + v9'
                                                                   and (v12'
                                                                       , i) = (i
                                                                              , v11')
                                                                   in (v12', i)
                                                                in (0, a, i)
                                                          , acc = (0, a, i)
                                                          , obsv = b }
               in (if c' == 2 then 0 else c'
                  , a
                  , i)
            in (c', a)
         in (c', a)
      in if c' > 0
         then (c', a, r')
         else let (c', r') = let v13' = a
               in (3, v13')
            in (c', a, r')
   in r'
cogent_lf2 : U32 -> U32
cogent_lf2 i =
   let (c', i, r') = let (c'
                         , i) = let (c'
                                    , i) = repeat[( U8, U32 )
                                                 , ()]{{}} #{ n = 5
                                                            , stop = \#{ acc = (c'
                                                                               , i)
                                                                       , obsv = () } => let v3' = let v1' = i
                                                               and v2' = 5
                                                               and v3' = v1' < v2'
                                                               in v3'
                                                            in c' > 1 || not v3'
                                                            , step = \#{ acc = (_
                                                                               , i)
                                                                       , obsv = () } => let c' = 0
                                                            in if c' > 1
                                                               then (c', i)
                                                               else let (v7'
                                                                        , i) = let v4' = 1
                                                                     and v5' = i
                                                                     and v6' = v5' + v4'
                                                                     and (v7'
                                                                         , i) = (i
                                                                                , v6')
                                                                     in (v7', i)
                                                                  in (0, i)
                                                            , acc = (0, i)
                                                            , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v8' = i
               in (3, v8')
            in (c', i, r')
   in r'
cogent_lf3 : U32 -> U32
cogent_lf3 i =
   let (c', i, r') = let (c'
                         , i) = let (c'
                                    , i) = repeat[( U8, U32 )
                                                 , ()]{{}} #{ n = 5
                                                            , stop = \#{ acc = (c'
                                                                               , i)
                                                                       , obsv = () } => let v3' = let v1' = i
                                                               and v2' = 5
                                                               and v3' = v1' < v2'
                                                               in v3'
                                                            in c' > 1 || not v3'
                                                            , step = \#{ acc = (_
                                                                               , i)
                                                                       , obsv = () } => let c' = 1
                                                            in if c' > 1
                                                               then (c', i)
                                                               else let (v7'
                                                                        , i) = let v4' = 1
                                                                     and v5' = i
                                                                     and v6' = v5' + v4'
                                                                     and (v7'
                                                                         , i) = (i
                                                                                , v6')
                                                                     in (v7', i)
                                                                  in (0, i)
                                                            , acc = (0, i)
                                                            , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v8' = i
               in (3, v8')
            in (c', i, r')
   in r'
cogent_lf4 : U32 -> U32
cogent_lf4 i =
   let (c', i, r') = let (c'
                         , i) = let (c'
                                    , i) = repeat[( U8, U32 )
                                                 , ()]{{}} #{ n = 5
                                                            , stop = \#{ acc = (c'
                                                                               , i)
                                                                       , obsv = () } => let v3' = let v1' = i
                                                               and v2' = 5
                                                               and v3' = v1' < v2'
                                                               in v3'
                                                            in c' > 1 || not v3'
                                                            , step = \#{ acc = (_
                                                                               , i)
                                                                       , obsv = () } => let c' = 2
                                                            in if c' > 1
                                                               then (c', i)
                                                               else let (v7'
                                                                        , i) = let v4' = 1
                                                                     and v5' = i
                                                                     and v6' = v5' + v4'
                                                                     and (v7'
                                                                         , i) = (i
                                                                                , v6')
                                                                     in (v7', i)
                                                                  in (0, i)
                                                            , acc = (0, i)
                                                            , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v8' = i
               in (3, v8')
            in (c', i, r')
   in r'
cogent_lf5 : U32 -> U32
cogent_lf5 i =
   let (c', r', i) = let (c'
                         , r'
                         , i) = let (c'
                                    , r'
                                    , i) = repeat[( U8, U32, U32 )
                                                 , ()]{{}} #{ n = 5
                                                            , stop = \#{ acc = (c'
                                                                               , r'
                                                                               , i)
                                                                       , obsv = () } => let v4' = let v2' = i
                                                               and v3' = 5
                                                               and v4' = v2' < v3'
                                                               in v4'
                                                            in c' > 1 || not v4'
                                                            , step = \#{ acc = (_
                                                                               , r'
                                                                               , i)
                                                                       , obsv = () } => let (c'
                                                                                            , r') = let v1' = i
                                                               in (3, v1')
                                                            in if c' > 1
                                                               then (c', r', i)
                                                               else let (v8'
                                                                        , i) = let v5' = 1
                                                                     and v6' = i
                                                                     and v7' = v6' + v5'
                                                                     and (v8'
                                                                         , i) = (i
                                                                                , v7')
                                                                     in (v8', i)
                                                                  in (0, r', i)
                                                            , acc = (0, r', i)
                                                            , obsv = () }
         in (if c' == 2 then 0 else c'
            , r'
            , i)
      in if c' > 0
         then (c', r', i)
         else let (c', r') = let v9' = i
               in (3, v9')
            in (c', r', i)
   in r'
cogent_lf6 : U32 -> U32
cogent_lf6 i =
   let (c', i, r') = let (c'
                         , i) = let (c'
                                    , i) = repeat[( U8, U32 )
                                                 , ()]{{}} #{ n = let v' = 5
                                                            and v1' = 1
                                                            and v2' = v' + v1'
                                                            in v2'
                                                            , stop = \#{ acc = (c'
                                                                               , i)
                                                                       , obsv = () } => let v5' = let v3' = i
                                                               and v4' = 5
                                                               and v5' = v3' <= v4'
                                                               in v5'
                                                            in c' > 1 || not v5'
                                                            , step = \#{ acc = (_
                                                                               , i)
                                                                       , obsv = () } => let c' = 0
                                                            in if c' > 1
                                                               then (c', i)
                                                               else let (v9'
                                                                        , i) = let v6' = 1
                                                                     and v7' = i
                                                                     and v8' = v7' + v6'
                                                                     and (v9'
                                                                         , i) = (i
                                                                                , v8')
                                                                     in (v9', i)
                                                                  in (0, i)
                                                            , acc = (0, i)
                                                            , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v10' = i
               in (3, v10')
            in (c', i, r')
   in r'
cogent_lf7 : U32 -> U32
cogent_lf7 i =
   let (c', i, r') = let (c'
                         , i) = let (v4'
                                    , i) = let v1' = 12
            and v2' = i
            and v3' = v1'
            and (v4', i) = (v3', v3')
            in (v4', i)
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()]{{}} #{ n = 12
                                                   , stop = \#{ acc = (c', i)
                                                              , obsv = () } => let v7' = let v5' = i
                                                      and v6' = 5
                                                      and v7' = v5' > v6'
                                                      in v7'
                                                   in c' > 1 || not v7'
                                                   , step = \#{ acc = (_, i)
                                                              , obsv = () } => let c' = 0
                                                   in if c' > 1
                                                      then (c', i)
                                                      else let (v11'
                                                               , i) = let v8' = 1
                                                            and v9' = i
                                                            and v10' = v9' - v8'
                                                            and (v11', i) = (i
                                                                            , v10')
                                                            in (v11', i)
                                                         in (0, i)
                                                   , acc = (0, i)
                                                   , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v12' = i
               in (3, v12')
            in (c', i, r')
   in r'
cogent_lf8 : U32 -> U32
cogent_lf8 i =
   let (c', i, r') = let (c'
                         , i) = let (v6'
                                    , i) = let v3' = 12
            and v4' = i
            and v5' = v3'
            and (v6', i) = (v5', v5')
            in (v6', i)
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()]{{}} #{ n = let v' = 12
                                                   and v1' = 1
                                                   and v2' = v' + v1'
                                                   in v2'
                                                   , stop = \#{ acc = (c', i)
                                                              , obsv = () } => let v9' = let v7' = i
                                                      and v8' = 5
                                                      and v9' = v7' >= v8'
                                                      in v9'
                                                   in c' > 1 || not v9'
                                                   , step = \#{ acc = (_, i)
                                                              , obsv = () } => let c' = 0
                                                   in if c' > 1
                                                      then (c', i)
                                                      else let (v13'
                                                               , i) = let v10' = 1
                                                            and v11' = i
                                                            and v12' = v11' - v10'
                                                            and (v13', i) = (i
                                                                            , v12')
                                                            in (v13', i)
                                                         in (0, i)
                                                   , acc = (0, i)
                                                   , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v14' = i
               in (3, v14')
            in (c', i, r')
   in r'
cogent_lf9 : U32 -> U32
cogent_lf9 i =
   let (c', i, r') = let (c'
                         , i) = let (c'
                                    , i) = repeat[( U8, U32 )
                                                 , ()]{{}} #{ n = 5
                                                            , stop = \#{ acc = (c'
                                                                               , i)
                                                                       , obsv = () } => let v3' = let v1' = i
                                                               and v2' = 5
                                                               and v3' = v1' < v2'
                                                               in v3'
                                                            in c' > 1 || not v3'
                                                            , step = \#{ acc = (_
                                                                               , i)
                                                                       , obsv = () } => let c' = 0
                                                            in if c' > 1
                                                               then (c', i)
                                                               else let (v7'
                                                                        , i) = let v4' = 3
                                                                     and v5' = i
                                                                     and v6' = v5' + v4'
                                                                     and (v7'
                                                                         , i) = (v6'
                                                                                , v6')
                                                                     in (v7', i)
                                                                  in (0, i)
                                                            , acc = (0, i)
                                                            , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v8' = i
               in (3, v8')
            in (c', i, r')
   in r'
cogent_lf10 : U32 -> U32
cogent_lf10 i =
   let (c', i, r') = let (c'
                         , i) = let (c'
                                    , i) = repeat[( U8, U32 )
                                                 , ()]{{}} #{ n = 5
                                                            , stop = \#{ acc = (c'
                                                                               , i)
                                                                       , obsv = () } => let v3' = let v1' = i
                                                               and v2' = 5
                                                               and v3' = v1' < v2'
                                                               in v3'
                                                            in c' > 1 || not v3'
                                                            , step = \#{ acc = (_
                                                                               , i)
                                                                       , obsv = () } => let c' = 0
                                                            in if c' > 1
                                                               then (c', i)
                                                               else let (v9'
                                                                        , i) = let v4' = i
                                                                     and v5' = 3
                                                                     and v6' = v4' + v5'
                                                                     and v7' = i
                                                                     and v8' = v6'
                                                                     and (v9'
                                                                         , i) = (v8'
                                                                                , v8')
                                                                     in (v9', i)
                                                                  in (0, i)
                                                            , acc = (0, i)
                                                            , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v10' = i
               in (3, v10')
            in (c', i, r')
   in r'
cogent_lf11 : U32 -> U32
cogent_lf11 i =
   let (c', i, r') = let (c'
                         , i) = let (c'
                                    , i) = repeat[( U8, U32 )
                                                 , ()]{{}} #{ n = 5
                                                            , stop = \#{ acc = (c'
                                                                               , i)
                                                                       , obsv = () } => let v3' = let v1' = i
                                                               and v2' = 5
                                                               and v3' = v1' < v2'
                                                               in v3'
                                                            in c' > 1 || not v3'
                                                            , step = \#{ acc = (_
                                                                               , i)
                                                                       , obsv = () } => let c' = 0
                                                            in if c' > 1
                                                               then (c', i)
                                                               else let (v9'
                                                                        , i) = let v4' = 3
                                                                     and v5' = i
                                                                     and v6' = v4' + v5'
                                                                     and v7' = i
                                                                     and v8' = v6'
                                                                     and (v9'
                                                                         , i) = (v8'
                                                                                , v8')
                                                                     in (v9', i)
                                                                  in (0, i)
                                                            , acc = (0, i)
                                                            , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v10' = i
               in (3, v10')
            in (c', i, r')
   in r'
cogent_lf12 : U32 -> U32
cogent_lf12 i =
   let (c', i, r') = let (c'
                         , i) = let (v6'
                                    , i) = let v3' = 12
            and v4' = i
            and v5' = v3'
            and (v6', i) = (v5', v5')
            in (v6', i)
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()]{{}} #{ n = let v' = 12
                                                   and v1' = 1
                                                   and v2' = v' + v1'
                                                   in v2'
                                                   , stop = \#{ acc = (c', i)
                                                              , obsv = () } => let v9' = let v7' = i
                                                      and v8' = 5
                                                      and v9' = v7' >= v8'
                                                      in v9'
                                                   in c' > 1 || not v9'
                                                   , step = \#{ acc = (_, i)
                                                              , obsv = () } => let c' = 0
                                                   in if c' > 1
                                                      then (c', i)
                                                      else let (v13'
                                                               , i) = let v10' = 3
                                                            and v11' = i
                                                            and v12' = v11' - v10'
                                                            and (v13'
                                                                , i) = (v12'
                                                                       , v12')
                                                            in (v13', i)
                                                         in (0, i)
                                                   , acc = (0, i)
                                                   , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v14' = i
               in (3, v14')
            in (c', i, r')
   in r'
cogent_lf13 : U32 -> U32
cogent_lf13 i =
   let (c', i, r') = let (c'
                         , i) = let (v6'
                                    , i) = let v3' = 12
            and v4' = i
            and v5' = v3'
            and (v6', i) = (v5', v5')
            in (v6', i)
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()]{{}} #{ n = let v' = 12
                                                   and v1' = 1
                                                   and v2' = v' + v1'
                                                   in v2'
                                                   , stop = \#{ acc = (c', i)
                                                              , obsv = () } => let v9' = let v7' = i
                                                      and v8' = 5
                                                      and v9' = v7' >= v8'
                                                      in v9'
                                                   in c' > 1 || not v9'
                                                   , step = \#{ acc = (_, i)
                                                              , obsv = () } => let c' = 0
                                                   in if c' > 1
                                                      then (c', i)
                                                      else let (v15'
                                                               , i) = let v10' = i
                                                            and v11' = 3
                                                            and v12' = v10' - v11'
                                                            and v13' = i
                                                            and v14' = v12'
                                                            and (v15'
                                                                , i) = (v14'
                                                                       , v14')
                                                            in (v15', i)
                                                         in (0, i)
                                                   , acc = (0, i)
                                                   , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v16' = i
               in (3, v16')
            in (c', i, r')
   in r'
cogent_lf14 : ( U32, U32 ) -> U32
cogent_lf14 (i, j) =
   let (c', i, r') = let (c'
                         , i) = let (c'
                                    , i) = repeat[( U8, U32 )
                                                 , U32]{{}} #{ n = j
                                                             , stop = \#{ acc = (c'
                                                                                , i)
                                                                        , obsv = j } => let v3' = let v1' = i
                                                                and v2' = j
                                                                and v3' = v1' < v2'
                                                                in v3'
                                                             in c' > 1 || not v3'
                                                             , step = \#{ acc = (_
                                                                                , i)
                                                                        , obsv = j } => let c' = 0
                                                             in if c' > 1
                                                                then (c', i)
                                                                else let (v7'
                                                                         , i) = let v4' = 1
                                                                      and v5' = i
                                                                      and v6' = v5' + v4'
                                                                      and (v7'
                                                                          , i) = (i
                                                                                 , v6')
                                                                      in (v7'
                                                                         , i)
                                                                   in (0, i)
                                                             , acc = (0, i)
                                                             , obsv = j }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v8' = i
               in (3, v8')
            in (c', i, r')
   in r'
cogent_lf15 : U32 -> U32
cogent_lf15 i =
   let (c', i, r') = let (c'
                         , i) = let (v4'
                                    , i) = let v1' = 0
            and v2' = i
            and v3' = v1'
            and (v4', i) = (v3', v3')
            in (v4', i)
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()]{{}} #{ n = 5
                                                   , stop = \#{ acc = (c', i)
                                                              , obsv = () } => let v7' = let v5' = i
                                                      and v6' = 5
                                                      and v7' = v5' /= v6'
                                                      in v7'
                                                   in c' > 1 || not v7'
                                                   , step = \#{ acc = (_, i)
                                                              , obsv = () } => let c' = 0
                                                   in if c' > 1
                                                      then (c', i)
                                                      else let (v11'
                                                               , i) = let v8' = 1
                                                            and v9' = i
                                                            and v10' = v9' + v8'
                                                            and (v11', i) = (i
                                                                            , v10')
                                                            in (v11', i)
                                                         in (0, i)
                                                   , acc = (0, i)
                                                   , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v12' = i
               in (3, v12')
            in (c', i, r')
   in r'
cogent_lf16 : U32 -> U32
cogent_lf16 i =
   let (c', i, r') = let (c'
                         , i) = let (v4'
                                    , i) = let v1' = 10
            and v2' = i
            and v3' = v1'
            and (v4', i) = (v3', v3')
            in (v4', i)
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()]{{}} #{ n = 10
                                                   , stop = \#{ acc = (c', i)
                                                              , obsv = () } => let v7' = let v5' = i
                                                      and v6' = 5
                                                      and v7' = v5' /= v6'
                                                      in v7'
                                                   in c' > 1 || not v7'
                                                   , step = \#{ acc = (_, i)
                                                              , obsv = () } => let c' = 0
                                                   in if c' > 1
                                                      then (c', i)
                                                      else let (v11'
                                                               , i) = let v8' = 1
                                                            and v9' = i
                                                            and v10' = v9' - v8'
                                                            and (v11', i) = (i
                                                                            , v10')
                                                            in (v11', i)
                                                         in (0, i)
                                                   , acc = (0, i)
                                                   , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v12' = i
               in (3, v12')
            in (c', i, r')
   in r'

cogent_lfe1 : U32 -> U32
cogent_lfe1 i =
   let (c'
       , r') = let c' = gencotDummy "Unsupported form of for loop: Counting variables modified in body"
         {- for (; i < 5; i++)
             i = 0; -}
      in if c' > 0
         then (c', r')
         else let (c', r') = let v' = i
               in (3, v')
            in (c', r')
   in r'
cogent_lfe2 : ( U32, U32 ) -> U32
cogent_lfe2 (i, j) =
   let (c'
       , r') = let c' = gencotDummy "Unsupported form of for loop: Controlling expression modified"
         {- for (; i < j; i++)
             j = 0; -}
      in if c' > 0
         then (c', r')
         else let (c', r') = let v' = i
               in (3, v')
            in (c', r')
   in r'
cogent_lfe3 : U32 -> U32
cogent_lfe3 i =
   let (c'
       , r') = let c' = gencotDummy "Unsupported form of for loop: No counting variable found"
         {- for (; i < i + 5; i++)
             ; -}
      in if c' > 0
         then (c', r')
         else let (c', r') = let v' = i
               in (3, v')
            in (c', r')
   in r'
cogent_lfe4 : ( U32, U32 ) -> U32
cogent_lfe4 (i, j) =
   let (c'
       , r') = let c' = gencotDummy "Unsupported form of for loop: Controlling expression modified"
         {- for (; i < j; i++, j++)
             ; -}
      in if c' > 0
         then (c', r')
         else let (c', r') = let v' = i
               in (3, v')
            in (c', r')
   in r'
cogent_lfe5 : U32 -> U32
cogent_lfe5 i =
   let (c'
       , r') = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (; i < 5; i--)
             ; -}
      in if c' > 0
         then (c', r')
         else let (c', r') = let v' = i
               in (3, v')
            in (c', r')
   in r'
cogent_lfe6 : U32 -> U32
cogent_lfe6 i =
   let (c'
       , r') = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (; i > 5; i--)
             ; -}
      in if c' > 0
         then (c', r')
         else let (c', r') = let v' = i
               in (3, v')
            in (c', r')
   in r'
cogent_lfe7 : U32 -> U32
cogent_lfe7 i =
   let (c'
       , r') = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (; i != 5; i++)
             ; -}
      in if c' > 0
         then (c', r')
         else let (c', r') = let v' = i
               in (3, v')
            in (c', r')
   in r'
cogent_lfe8 : U32 -> U32
cogent_lfe8 i =
   let (c'
       , r') = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (i = 3; i != 5; i--)
             ; -}
      in if c' > 0
         then (c', r')
         else let (c', r') = let v' = i
               in (3, v')
            in (c', r')
   in r'
cogent_lfe9 : U32 -> U32
cogent_lfe9 i =
   let (c'
       , r') = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (i = 10; i != 5; i++)
             ; -}
      in if c' > 0
         then (c', r')
         else let (c', r') = let v' = i
               in (3, v')
            in (c', r')
   in r'
cogent_lfe10 : U32 -> U32
cogent_lfe10 i =
   let (c'
       , r') = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (i = 0; i != 5; i += 2)
             ; -}
      in if c' > 0
         then (c', r')
         else let (c', r') = let v' = i
               in (3, v')
            in (c', r')
   in r'
