{- Functions for allocating and deallocating data on the heap. -}

#ifndef GENCOT_MEMORY
#define GENCOT_MEMORY

include <gum/common/common.cogent>
#include "ModFun.cogent"
#include "AuxMacros.cogent"

-- Abstract type for modelling the heap
type Heap

-- Macro for generating the empty-value type for a valid-value boxed record type vvt.
-- The result is the type where all fields are taken.
--   vvt: the valid-value type
#define EVT(vvt) (vvt) take (..)

-- Creating an empty value of linear type by allocating memory for it 
-- and returning a pointer to the allocated space.
-- In case of error no pointer is returned.
-- Provided instances: create[EVT(vvt)] for all record types vvt.
--   evt: the linear empty-value type of the created values.
create: all(evt). Heap -> Result (evt,Heap) Heap

-- Disposing a value of empty-value linear type by deallocating its memory.
-- Provided instances: dispose[EVT(vvt)] for all record types vvt.
--   evt: the linear type of the empty values to be disposed.
dispose: all(evt). (evt,Heap) -> Heap

-- Initialization function which modifies an empty value to a valid value
-- In case of error the unmodified empty input value is returned.
--   evt: type of empty values
--   vvt: type of valid values
--   arg: type of additional input
--   out: type of the auxiliary output
type TIniFun evt vvt arg out = TModTypeFun evt vvt arg out

-- Initialization function which modifies an empty value to a valid value
-- No error can occur, the result is always the successfully initialized value.
--   evt: type of empty values
--   vvt: type of valid values
--   arg: type of additional input
--   out: type of the auxiliary output
type IniFun evt vvt arg out = ModTypeFun evt vvt arg out

-- Clearing function which modifies a valid value to an empty value
-- No error may occur.
--   vvt: type of valid values
--   evt: type of empty values
--   arg: type of additional input
--   out: type of the auxiliary output
type ClrFun vvt evt arg out = ModTypeFun vvt evt arg out

-- Initialization function which stores an unboxed value.
-- Always successful.
--   evt: type of empty values
--   vvt: type of valid values
initFull: all(evt,vvt). IniFun evt vvt #vvt ()

-- Clearing function which returns the content as an unboxed value.
--   vvt: type of valid values
--   evt: type of empty values
clearFull: all(evt,vvt). ClrFun vvt evt () #vvt

-- Initialization function which allocates linear content on the heap.
-- Content of primitive type is set to its default value using defaultVal.
-- Content of type (MayNull a) is set to null
-- Content of readonly type is not allowed.
-- May fail if allocation fails.
--   evt: type of empty values
--   vvt: type of valid values
initHeap: all(evt,vvt:<E). TIniFun evt vvt Heap Heap

-- Clearing function which deallocates linear content on the heap.
-- Content of primitive type is ignored.
-- Content of type (MayNull a) is only deallocated if not null.
-- Content of readonly type is not allowed.
--   vvt: type of valid values
--   evt: type of empty values
clearHeap: all(vvt:<E,evt). ClrFun vvt evt Heap Heap

-- Initialization function which sets all content to its default value using defaultVal.
-- Content of readonly or linear type is not allowed.
-- Always successful.
--   evt: type of empty values
--   vvt: type of valid values
initSimp: all(evt,vvt:<E). IniFun evt vvt () ()

-- Clearing function which ignores all content.
--   vvt: type of valid values, all content must be discardable
--   evt: type of empty values
clearSimp: all(vvt:<E,evt). ClrFun vvt evt () ()

-- Macros for specifying typed instances and types of the initialization and clearing functions
-- for valid-value record types.
--   func: one of Full, Heap, Simp
--   vvt: type of valid values
#define INIT(func,vvt) Gencot_MKFUNNAME(init,func)[EVT(vvt),vvt]
#define CLEAR(func,vvt) Gencot_MKFUNNAME(clear,func)[vvt,EVT(vvt)]
#define INITTYPE(func,vvt) Gencot_OPTTRNS(func)IniFun (EVT(vvt)) vvt Gencot_IELARGOUT(func,vvt)
#define CLEARTYPE(func,vvt) ClrFun vvt (EVT(vvt)) Gencot_CELARGOUT(func,vvt)

#endif {- GENCOT_MEMORY -}
