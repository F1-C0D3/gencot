cogent_fc1 : () -> U32
cogent_fc1 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 42 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fc2 : () -> U8
cogent_fc2 () :: () =
   let (_ :: U8
       , r' :: U8) = let v' :: U32 = let v' :: U32 = 'x' :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U8 :: U8
cogent_fc3 : () -> U8
cogent_fc3 () :: () =
   let (_ :: U8
       , r' :: U8) = let v' :: U32 = let v' :: U32 = gencotDummy :: String -> U32 "Multi character constants not supported" :: String :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U8 :: U8
cogent_fc4 : () -> String
cogent_fc4 () :: () =
   let (_ :: U8
       , r' :: String) = let v' :: String = let v' :: String = "abc" :: String
         in v' :: String :: String
      in (3 :: U8
         , v' :: String) :: (U8, String)
   in r' :: String :: String
cogent_fc5 : () -> err-float
cogent_fc5 () :: () =
   let (_ :: U8
       , r' :: err-float) = let v' :: err-float = let v' :: err-float = gencotDummy :: String -> err-float "Float literals not supported" :: String :: err-float
         in v' :: err-float :: err-float
      in (3 :: U8
         , v' :: err-float) :: (U8
                               , err-float)
   in r' :: err-float :: err-float
cogent_fv1 : U32 -> U32
cogent_fv1 v :: U32 =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = v :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fv2 : U32 -> U32
cogent_fv2 xyz_123 :: U32 =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = xyz_123 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo1 : () -> U32
cogent_fo1 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 42 :: U32
         and v' :: U32 = + v' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo2 : () -> U32
cogent_fo2 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 42 :: U32
         and v' :: U32 = - v' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo3 : () -> U32
cogent_fo3 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 42 :: U32
         and v1' :: U32 = 0 :: U32
         and v' :: Bool = v' :: U32 == v1' :: U32 :: Bool
         and v2' :: U32 = 1 :: U32
         and v1' :: U32 = 0 :: U32
         and v' :: U32 = if v' :: Bool
            then v2' :: U32
            else v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo4 : () -> U32
cogent_fo4 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 42 :: U32
         and v' :: U32 = complement v' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo5 : () -> U32
cogent_fo5 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 + v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo6 : () -> U32
cogent_fo6 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 - v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo7 : () -> U32
cogent_fo7 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 * v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo8 : () -> U32
cogent_fo8 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 % v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo9 : () -> U32
cogent_fo9 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 / v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo10 : () -> U32
cogent_fo10 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 << v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo11 : () -> U32
cogent_fo11 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 >> v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo12 : () -> U32
cogent_fo12 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 < v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo13 : () -> U32
cogent_fo13 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 > v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo14 : () -> U32
cogent_fo14 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 <= v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo15 : () -> U32
cogent_fo15 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 >= v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo16 : () -> U32
cogent_fo16 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 == v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo17 : () -> U32
cogent_fo17 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 /= v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo18 : () -> U32
cogent_fo18 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 .&. v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo19 : () -> U32
cogent_fo19 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 .|. v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo20 : () -> U32
cogent_fo20 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = v' :: U32 .^. v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo21 : () -> U32
cogent_fo21 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v2' :: U32 = 0 :: U32
         and v' :: U32 = if v' :: U32
            then v1' :: U32
            else v2' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fo22 : () -> U32
cogent_fo22 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v2' :: U32 = 1 :: U32
         and v1' :: U32 = 4 :: U32
         and v' :: U32 = if v' :: U32
            then v2' :: U32
            else v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_f1 : () -> U32
cogent_f1 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v2' :: U32 = 42 :: U32
         and v' :: U32 = if v' :: U32
            then v1' :: U32
            else v2' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_f2 : () -> U32
cogent_f2 () :: () =
   let (_ :: U8
       , r' :: U32) = let v2' :: U32 = let v' :: U32 = 17 :: U32
         and v1' :: U32 = 4 :: U32
         and v2' :: U32 = 42 :: U32
         in v2' :: U32 :: U32
      in (3 :: U8, v2' :: U32) :: (U8
                                  , U32)
   in r' :: U32 :: U32
cogent_f3 : () -> U32
cogent_f3 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: () -> U32 = cogent_fc1 :: () -> U32
         and v' :: U32 = v' :: () -> U32 () :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_f4 : () -> U32
cogent_f4 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 -> U32 = cogent_fv1 :: U32 -> U32
         and v1' :: U32 = 42 :: U32
         and v' :: U32 = v' :: U32 -> U32 v1' :: U32 :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_fx : (U32
            , U8
            , U32) -> U32
cogent_fx (a :: U32
          , b :: U8
          , c :: U32) =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: U32 = a :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
cogent_f5 : () -> U32
cogent_f5 () :: () =
   let (_ :: U8
       , r' :: U32) = let v' :: U32 = let v' :: (U32
                                                , U8
                                                , U32) -> U32 = cogent_fx :: (U32
                                                                             , U8
                                                                             , U32) -> U32
         and v1' :: U32 = 17 :: U32
         and v2' :: U32 = 'x' :: U32
         and v3' :: U32 = 4 :: U32
         and v' :: U32 = v' :: (U32
                               , U8
                               , U32) -> U32 (v1' :: U32
                                             , v2' :: U32
                                             , v3' :: U32) :: U32
         in v' :: U32 :: U32
      in (3 :: U8, v' :: U32) :: (U8
                                 , U32)
   in r' :: U32 :: U32
type Struct_Cogent_s1 =
    { m1 : U32, m2 : U32 }
type Struct_Cogent_s2 =
    { m3 : U32
    , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                 , m2 : U32 }) }
cogent_fs1 : (Struct_Cogent_s1 =  #{ m1 : U32
                                   , m2 : U32 }) -> U32
cogent_fs1 s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                      , m2 : U32 }) =
   let (_ :: U8
       , r' :: U32
       , s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                    , m2 : U32 })) = let (v' :: U32
                                                         , s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                      , m2 : U32 })) = let v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                       , m2 : U32 }) = s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                  , m2 : U32 })
         and s { m1 = p0' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                            , m2 : U32 }) = v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                        , m2 : U32 })
         and v' :: U32 = p0' :: U32
         and s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                        , m2 : U32 }) = s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                   , m2 : U32 }) { m1 = p0' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                              , m2 : U32 })
         in (v' :: U32
            , s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                         , m2 : U32 })) :: (U32
                                                           , (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                   , m2 : U32 }))
      in (3 :: U8
         , v' :: U32
         , s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                      , m2 : U32 })) :: (U8
                                                        , U32
                                                        , (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                , m2 : U32 }))
   in r' :: U32 :: U32
cogent_fs2 : (Struct_Cogent_s1 =  #{ m1 : U32
                                   , m2 : U32 }) -> U32
cogent_fs2 s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                      , m2 : U32 }) =
   let (_ :: U8
       , r' :: U32
       , s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                    , m2 : U32 })) = let (v' :: U32
                                                         , s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                      , m2 : U32 })) = let v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                       , m2 : U32 }) = s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                  , m2 : U32 })
         and s { m1 = p0' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                            , m2 : U32 }) = v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                        , m2 : U32 })
         and v' :: U32 = p0' :: U32
         and v1' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                          , m2 : U32 }) = s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                     , m2 : U32 })
         and s { m2 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                            , m2 : U32 }) = v1' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                         , m2 : U32 })
         and v1' :: U32 = p1' :: U32
         and v' :: U32 = v' :: U32 + v1' :: U32 :: U32
         and s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                        , m2 : U32 }) = s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                   , m2 : U32 }) { m2 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                              , m2 : U32 })
         and s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                        , m2 : U32 }) = s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                   , m2 : U32 }) { m1 = p0' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                              , m2 : U32 })
         in (v' :: U32
            , s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                         , m2 : U32 })) :: (U32
                                                           , (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                   , m2 : U32 }))
      in (3 :: U8
         , v' :: U32
         , s :: (Struct_Cogent_s1 =  #{ m1 : U32
                                      , m2 : U32 })) :: (U8
                                                        , U32
                                                        , (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                , m2 : U32 }))
   in r' :: U32 :: U32
cogent_fs3 : (Struct_Cogent_s2 =  #{ m3 : U32
                                   , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                , m2 : U32 }) }) -> U32
cogent_fs3 s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                      , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                   , m2 : U32 }) }) =
   let (_ :: U8
       , r' :: U32
       , s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                    , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                 , m2 : U32 }) })) = let (v' :: U32
                                                                                         , s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                      , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                   , m2 : U32 }) })) = let v' :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                                                                                       , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                                    , m2 : U32 }) }) = s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                                                                                                                                                                  , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                                                                                                               , m2 : U32 }) })
         and s { m4 = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                   , m2 : U32 }) } :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                            , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                         , m2 : U32 }) }) = v' :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                                                        , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                     , m2 : U32 }) })
         and v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                         , m2 : U32 }) = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                      , m2 : U32 })
         and p0' { m1 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                              , m2 : U32 }) = v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                          , m2 : U32 })
         and v' :: U32 = p1' :: U32
         and p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                          , m2 : U32 }) = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                       , m2 : U32 }) { m1 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 })
         and s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                        , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                     , m2 : U32 }) }) = s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                   , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                , m2 : U32 }) }) { m4 = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                     , m2 : U32 }) } :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                                                                                                                              , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                                                                           , m2 : U32 }) })
         in (v' :: U32
            , s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                         , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                      , m2 : U32 }) })) :: (U32
                                                                                           , (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                   , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                , m2 : U32 }) }))
      in (3 :: U8
         , v' :: U32
         , s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                      , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                   , m2 : U32 }) })) :: (U8
                                                                                        , U32
                                                                                        , (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                             , m2 : U32 }) }))
   in r' :: U32 :: U32
cogent_fs4 : (Struct_Cogent_s2 =  #{ m3 : U32
                                   , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                , m2 : U32 }) }) -> U32
cogent_fs4 s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                      , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                   , m2 : U32 }) }) =
   let (_ :: U8
       , r' :: U32
       , s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                    , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                 , m2 : U32 }) })) = let (v' :: U32
                                                                                         , s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                      , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                   , m2 : U32 }) })) = let v' :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                                                                                       , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                                    , m2 : U32 }) }) = s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                                                                                                                                                                  , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                                                                                                               , m2 : U32 }) })
         and s { m4 = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                   , m2 : U32 }) } :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                            , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                         , m2 : U32 }) }) = v' :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                                                        , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                     , m2 : U32 }) })
         and v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                         , m2 : U32 }) = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                      , m2 : U32 })
         and p0' { m1 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                              , m2 : U32 }) = v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                          , m2 : U32 })
         and v' :: U32 = p1' :: U32
         and v1' :: (Struct_Cogent_s2 =  #{ m3 : U32
                                          , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                       , m2 : U32 }) }) = s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                     , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 }) })
         and s { m4 = p2' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                   , m2 : U32 }) } :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                            , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                         , m2 : U32 }) }) = v1' :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                                                         , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                      , m2 : U32 }) })
         and v1' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                          , m2 : U32 }) = p2' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                       , m2 : U32 })
         and p2' { m2 = p3' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                              , m2 : U32 }) = v1' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                           , m2 : U32 })
         and v1' :: U32 = p3' :: U32
         and v' :: U32 = v' :: U32 + v1' :: U32 :: U32
         and v2' :: (Struct_Cogent_s2 =  #{ m3 : U32
                                          , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                       , m2 : U32 }) }) = s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                     , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 }) })
         and s { m3 = p4' :: U32 } :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                            , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                         , m2 : U32 }) }) = v2' :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                         , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                      , m2 : U32 }) })
         and v2' :: U32 = p4' :: U32
         and v' :: U32 = v' :: U32 + v2' :: U32 :: U32
         and s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                        , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                     , m2 : U32 }) }) = s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                   , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                , m2 : U32 }) }) { m3 = p4' :: U32 } :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                                                                                              , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                                           , m2 : U32 }) })
         and p2' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                          , m2 : U32 }) = p2' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                       , m2 : U32 }) { m2 = p3' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 })
         and s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                        , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                     , m2 : U32 }) }) = s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                   , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                , m2 : U32 }) }) { m4 = p2' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                     , m2 : U32 }) } :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                                                                                                                              , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                                                                           , m2 : U32 }) })
         and p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                          , m2 : U32 }) = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                       , m2 : U32 }) { m1 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 })
         and s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                        , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                     , m2 : U32 }) }) = s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                   , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                , m2 : U32 }) }) { m4 = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                     , m2 : U32 }) } :: (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                                                                                                                                              , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                                                                           , m2 : U32 }) })
         in (v' :: U32
            , s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                         , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                      , m2 : U32 }) })) :: (U32
                                                                                           , (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                   , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                , m2 : U32 }) }))
      in (3 :: U8
         , v' :: U32
         , s :: (Struct_Cogent_s2 =  #{ m3 : U32
                                      , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                   , m2 : U32 }) })) :: (U8
                                                                                        , U32
                                                                                        , (Struct_Cogent_s2 =  #{ m3 : U32
                                                                                                                , m4 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                             , m2 : U32 }) }))
   in r' :: U32 :: U32
type Cogent_a1 = CArr5 U32
type Cogent_a2 =
   CArr5 (Struct_Cogent_s1 =  #{ m1 : U32
                               , m2 : U32 })
cogent_fa1 : (Cogent_a1 =  { arr5 : U32#[() :: ()] }) -> (U32
                                                         , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
cogent_fa1 a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) =
   let (_ :: U8
       , r' :: U32
       , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) = let (v' :: U32
                                                              , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) = let v1' :: U32 = 3 :: U32
         and v' :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) = a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
         and (a @{ @v1' :: U32 = p0' :: U32 } :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
             , i0' :: U32) = (v' :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
                             , v1' :: U32)
         and v' :: U32 = p0' :: U32
         and a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) = a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) @{ @i0' :: U32 = p0' :: U32 } :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
         in (v' :: U32
            , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) :: (U32
                                                                , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
      in (3 :: U8
         , v' :: U32
         , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) :: (U8
                                                             , U32
                                                             , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
   in (r' :: U32
      , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) :: (U32
                                                          , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
cogent_fa2 : (Cogent_a1 =  { arr5 : U32#[() :: ()] }) -> (U32
                                                         , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
cogent_fa2 a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) =
   let (_ :: U8
       , r' :: U32
       , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) = let (v' :: U32
                                                              , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) = let v1' :: U32 = 3 :: U32
         and v' :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) = a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
         and (a @{ @v1' :: U32 = p0' :: U32 } :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
             , i0' :: U32) = (v' :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
                             , v1' :: U32)
         and v' :: U32 = p0' :: U32
         and v3' :: U32 = 1 :: U32
         and v2' :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) = a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
         and (a @{ @v3' :: U32 = p1' :: U32 } :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
             , i1' :: U32) = (v2' :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
                             , v3' :: U32)
         and v2' :: U32 = p1' :: U32
         and v' :: U32 = v' :: U32 + v2' :: U32 :: U32
         and a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) = a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) @{ @i1' :: U32 = p1' :: U32 } :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
         and a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) = a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) @{ @i0' :: U32 = p0' :: U32 } :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
         in (v' :: U32
            , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) :: (U32
                                                                , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
      in (3 :: U8
         , v' :: U32
         , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) :: (U8
                                                             , U32
                                                             , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
   in (r' :: U32
      , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) :: (U32
                                                          , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
cogent_fa3 : (Cogent_a1 =  { arr5 : U32#[() :: ()] }) -> (U32
                                                         , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
cogent_fa3 a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) =
   let (_ :: U8
       , r' :: U32
       , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) = let (v' :: U32
                                                              , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) = let v2' :: U32 = 2 :: U32
         and v1' :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) = a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
         and (a @{ @v2' :: U32 = p0' :: U32 } :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
             , i0' :: U32) = (v1' :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
                             , v2' :: U32)
         and v1' :: U32 = p0' :: U32
         and v' :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) = a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
         and (a @{ @v1' :: U32 = p1' :: U32 } :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
             , i1' :: U32) = (v' :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
                             , v1' :: U32)
         and v' :: U32 = p1' :: U32
         and a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) = a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) @{ @i1' :: U32 = p1' :: U32 } :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
         and a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) = a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] }) @{ @i0' :: U32 = p0' :: U32 } :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })
         in (v' :: U32
            , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) :: (U32
                                                                , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
      in (3 :: U8
         , v' :: U32
         , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) :: (U8
                                                             , U32
                                                             , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
   in (r' :: U32
      , a :: (Cogent_a1 =  { arr5 : U32#[() :: ()] })) :: (U32
                                                          , (Cogent_a1 =  { arr5 : U32#[() :: ()] }))
cogent_fa4 : (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                          , m2 : U32 })#[() :: ()] }) -> (U32
                                                                                         , (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                        , m2 : U32 })#[() :: ()] }))
cogent_fa4 a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                             , m2 : U32 })#[() :: ()] }) =
   let (_ :: U8
       , r' :: U32
       , a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                           , m2 : U32 })#[() :: ()] })) = let (v' :: U32
                                                                                              , a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 })#[() :: ()] })) = let v1' :: U32 = 3 :: U32
         and v' :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                , m2 : U32 })#[() :: ()] }) = a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                , m2 : U32 })#[() :: ()] })
         and (a @{ @v1' :: U32 = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                              , m2 : U32 }) } :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                              , m2 : U32 })#[() :: ()] })
             , i0' :: U32) = (v' :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                 , m2 : U32 })#[() :: ()] })
                             , v1' :: U32)
         and v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                         , m2 : U32 }) = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                      , m2 : U32 })
         and p0' { m1 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                              , m2 : U32 }) = v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                          , m2 : U32 })
         and v' :: U32 = p1' :: U32
         and p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                          , m2 : U32 }) = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                       , m2 : U32 }) { m1 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 })
         and a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                               , m2 : U32 })#[() :: ()] }) = a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                               , m2 : U32 })#[() :: ()] }) @{ @i0' :: U32 = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                         , m2 : U32 }) } :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                                                                                         , m2 : U32 })#[() :: ()] })
         in (v' :: U32
            , a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                , m2 : U32 })#[() :: ()] })) :: (U32
                                                                                                , (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                               , m2 : U32 })#[() :: ()] }))
      in (3 :: U8
         , v' :: U32
         , a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                             , m2 : U32 })#[() :: ()] })) :: (U8
                                                                                             , U32
                                                                                             , (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                            , m2 : U32 })#[() :: ()] }))
   in (r' :: U32
      , a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                          , m2 : U32 })#[() :: ()] })) :: (U32
                                                                                          , (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                         , m2 : U32 })#[() :: ()] }))
cogent_fa5 : (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                          , m2 : U32 })#[() :: ()] }) -> (U32
                                                                                         , (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                        , m2 : U32 })#[() :: ()] }))
cogent_fa5 a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                             , m2 : U32 })#[() :: ()] }) =
   let (_ :: U8
       , r' :: U32
       , a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                           , m2 : U32 })#[() :: ()] })) = let (v' :: U32
                                                                                              , a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 })#[() :: ()] })) = let v2' :: U32 = 2 :: U32
         and v1' :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                 , m2 : U32 })#[() :: ()] }) = a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                 , m2 : U32 })#[() :: ()] })
         and (a @{ @v2' :: U32 = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                              , m2 : U32 }) } :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                              , m2 : U32 })#[() :: ()] })
             , i0' :: U32) = (v1' :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                  , m2 : U32 })#[() :: ()] })
                             , v2' :: U32)
         and v1' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                          , m2 : U32 }) = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                       , m2 : U32 })
         and p0' { m2 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                              , m2 : U32 }) = v1' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                           , m2 : U32 })
         and v1' :: U32 = p1' :: U32
         and v' :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                , m2 : U32 })#[() :: ()] }) = a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                , m2 : U32 })#[() :: ()] })
         and (a @{ @v1' :: U32 = p2' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                              , m2 : U32 }) } :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                              , m2 : U32 })#[() :: ()] })
             , i2' :: U32) = (v' :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                 , m2 : U32 })#[() :: ()] })
                             , v1' :: U32)
         and v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                         , m2 : U32 }) = p2' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                      , m2 : U32 })
         and p2' { m1 = p3' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                              , m2 : U32 }) = v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                          , m2 : U32 })
         and v' :: U32 = p3' :: U32
         and p2' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                          , m2 : U32 }) = p2' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                       , m2 : U32 }) { m1 = p3' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 })
         and a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                               , m2 : U32 })#[() :: ()] }) = a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                               , m2 : U32 })#[() :: ()] }) @{ @i2' :: U32 = p2' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                         , m2 : U32 }) } :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                                                                                         , m2 : U32 })#[() :: ()] })
         and p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                          , m2 : U32 }) = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                       , m2 : U32 }) { m2 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 })
         and a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                               , m2 : U32 })#[() :: ()] }) = a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                               , m2 : U32 })#[() :: ()] }) @{ @i0' :: U32 = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                         , m2 : U32 }) } :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                                                                                                                                                         , m2 : U32 })#[() :: ()] })
         in (v' :: U32
            , a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                , m2 : U32 })#[() :: ()] })) :: (U32
                                                                                                , (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                               , m2 : U32 })#[() :: ()] }))
      in (3 :: U8
         , v' :: U32
         , a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                             , m2 : U32 })#[() :: ()] })) :: (U8
                                                                                             , U32
                                                                                             , (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                            , m2 : U32 })#[() :: ()] }))
   in (r' :: U32
      , a :: (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                          , m2 : U32 })#[() :: ()] })) :: (U32
                                                                                          , (Cogent_a2 =  { arr5 : (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                         , m2 : U32 })#[() :: ()] }))
type Struct_Cogent_s3 =
    { m5 : U32
    , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                        , m2 : U32 }) }
type Cogent_a3 =
   CArr5 (MayNull (CPtr =  { cont : U32 }))
cogent_fp1 : MayNull (CPtr =  { cont : U32 }) -> (U32
                                                 , MayNull (CPtr =  { cont : U32 }))
cogent_fp1 p :: MayNull (CPtr =  { cont : U32 }) =
   let (_ :: U8
       , r' :: U32
       , p :: MayNull (CPtr =  { cont : U32 })) = let (v' :: U32
                                                      , p :: MayNull (CPtr =  { cont : U32 })) = let v' :: MayNull (CPtr =  { cont : U32 }) = p :: MayNull (CPtr =  { cont : U32 })
         and p { cont = p0' :: U32 } :: MayNull (CPtr =  { cont : U32 }) = v' :: MayNull (CPtr =  { cont : U32 })
         and v' :: U32 = p0' :: U32
         and p :: MayNull (CPtr =  { cont : U32 }) = p :: MayNull (CPtr =  { cont : U32 }) { cont = p0' :: U32 } :: MayNull (CPtr =  { cont : U32 })
         in (v' :: U32
            , p :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                        , MayNull (CPtr =  { cont : U32 }))
      in (3 :: U8
         , v' :: U32
         , p :: MayNull (CPtr =  { cont : U32 })) :: (U8
                                                     , U32
                                                     , MayNull (CPtr =  { cont : U32 }))
   in (r' :: U32
      , p :: MayNull (CPtr =  { cont : U32 })) :: (U32
                                                  , MayNull (CPtr =  { cont : U32 }))
cogent_fp2 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                          , m2 : U32 }) -> (U32
                                                           , MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                          , m2 : U32 }))
cogent_fp2 p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                             , m2 : U32 }) =
   let (_ :: U8
       , r' :: U32
       , p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                           , m2 : U32 })) = let (v' :: U32
                                                                , p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                    , m2 : U32 })) = let v' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                            , m2 : U32 }) = p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                              , m2 : U32 })
         and p { cont = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                     , m2 : U32 }) } :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                     , m2 : U32 }) = v' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                        , m2 : U32 })
         and v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                         , m2 : U32 }) = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                      , m2 : U32 })
         and p0' { m1 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                              , m2 : U32 }) = v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                          , m2 : U32 })
         and v' :: U32 = p1' :: U32
         and p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                          , m2 : U32 }) = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                       , m2 : U32 }) { m1 = p1' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 })
         and p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                               , m2 : U32 }) = p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                 , m2 : U32 }) { cont = p0' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                     , m2 : U32 }) } :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                     , m2 : U32 })
         in (v' :: U32
            , p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                , m2 : U32 })) :: (U32
                                                                  , MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                 , m2 : U32 }))
      in (3 :: U8
         , v' :: U32
         , p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                             , m2 : U32 })) :: (U8
                                                               , U32
                                                               , MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                              , m2 : U32 }))
   in (r' :: U32
      , p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                          , m2 : U32 })) :: (U32
                                                            , MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                           , m2 : U32 }))
cogent_fp3 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                          , m2 : U32 }) -> (U32
                                                           , MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                          , m2 : U32 }))
cogent_fp3 p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                             , m2 : U32 }) =
   let (_ :: U8
       , r' :: U32
       , p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                           , m2 : U32 })) = let (v' :: U32
                                                                , p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                    , m2 : U32 })) = let v' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                            , m2 : U32 }) = p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                              , m2 : U32 })
         and p { m1 = p0' :: U32 } :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                   , m2 : U32 }) = v' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                      , m2 : U32 })
         and v' :: U32 = p0' :: U32
         and p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                               , m2 : U32 }) = p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                 , m2 : U32 }) { m1 = p0' :: U32 } :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                   , m2 : U32 })
         in (v' :: U32
            , p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                , m2 : U32 })) :: (U32
                                                                  , MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                 , m2 : U32 }))
      in (3 :: U8
         , v' :: U32
         , p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                             , m2 : U32 })) :: (U8
                                                               , U32
                                                               , MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                              , m2 : U32 }))
   in (r' :: U32
      , p :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                          , m2 : U32 })) :: (U32
                                                            , MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                           , m2 : U32 }))
cogent_fp4 : MayNull (Struct_Cogent_s3 =  { m5 : U32
                                          , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                              , m2 : U32 }) }) -> (U32
                                                                                                  , MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                 , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                     , m2 : U32 }) }))
cogent_fp4 p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                             , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                 , m2 : U32 }) }) =
   let (_ :: U8
       , r' :: U32
       , p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                           , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                               , m2 : U32 }) })) = let (v' :: U32
                                                                                                       , p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                           , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                               , m2 : U32 }) })) = let v' :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                                                                                                                          , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                                                                                              , m2 : U32 }) }) = p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                                                                                                                                                                                                                   , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                                                                                                                                                                                       , m2 : U32 }) })
         and p { m6 = p0' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                          , m2 : U32 }) } :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                          , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                              , m2 : U32 }) }) = v' :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                                                                                    , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                                                        , m2 : U32 }) })
         and v' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                , m2 : U32 }) = p0' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                    , m2 : U32 })
         and p0' { cont = p1' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                       , m2 : U32 }) } :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                       , m2 : U32 }) = v' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                          , m2 : U32 })
         and v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                         , m2 : U32 }) = p1' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                      , m2 : U32 })
         and p1' { m1 = p2' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                              , m2 : U32 }) = v' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                          , m2 : U32 })
         and v' :: U32 = p2' :: U32
         and p1' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                          , m2 : U32 }) = p1' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                       , m2 : U32 }) { m1 = p2' :: U32 } :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                  , m2 : U32 })
         and p0' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                 , m2 : U32 }) = p0' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                     , m2 : U32 }) { cont = p1' :: (Struct_Cogent_s1 =  #{ m1 : U32
                                                                                                                                                         , m2 : U32 }) } :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                         , m2 : U32 })
         and p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                               , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                   , m2 : U32 }) }) = p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                        , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                            , m2 : U32 }) }) { m6 = p0' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                                                        , m2 : U32 }) } :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                                                                                                                                                                        , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                                                                                                                                            , m2 : U32 }) })
         in (v' :: U32
            , p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                    , m2 : U32 }) })) :: (U32
                                                                                                         , MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                        , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                            , m2 : U32 }) }))
      in (3 :: U8
         , v' :: U32
         , p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                             , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                 , m2 : U32 }) })) :: (U8
                                                                                                      , U32
                                                                                                      , MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                     , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                         , m2 : U32 }) }))
   in (r' :: U32
      , p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                          , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                              , m2 : U32 }) })) :: (U32
                                                                                                   , MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                  , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                      , m2 : U32 }) }))
cogent_fp5 : MayNull (Struct_Cogent_s3 =  { m5 : U32
                                          , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                              , m2 : U32 }) }) -> (U32
                                                                                                  , MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                 , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                     , m2 : U32 }) }))
cogent_fp5 p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                             , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                 , m2 : U32 }) }) =
   let (_ :: U8
       , r' :: U32
       , p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                           , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                               , m2 : U32 }) })) = let (v' :: U32
                                                                                                       , p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                           , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                               , m2 : U32 }) })) = let v' :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                                                                                                                          , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                                                                                              , m2 : U32 }) }) = p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                                                                                                                                                                                                                   , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                                                                                                                                                                                       , m2 : U32 }) })
         and p { m6 = p0' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                          , m2 : U32 }) } :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                          , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                              , m2 : U32 }) }) = v' :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                                                                                    , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                                                        , m2 : U32 }) })
         and v' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                , m2 : U32 }) = p0' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                    , m2 : U32 })
         and p0' { m1 = p1' :: U32 } :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                     , m2 : U32 }) = v' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                        , m2 : U32 })
         and v' :: U32 = p1' :: U32
         and p0' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                 , m2 : U32 }) = p0' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                     , m2 : U32 }) { m1 = p1' :: U32 } :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                       , m2 : U32 })
         and p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                               , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                   , m2 : U32 }) }) = p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                        , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                            , m2 : U32 }) }) { m6 = p0' :: MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                                                        , m2 : U32 }) } :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                                                                                                                                                                        , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                                                                                                                                                                            , m2 : U32 }) })
         in (v' :: U32
            , p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                    , m2 : U32 }) })) :: (U32
                                                                                                         , MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                        , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                            , m2 : U32 }) }))
      in (3 :: U8
         , v' :: U32
         , p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                             , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                 , m2 : U32 }) })) :: (U8
                                                                                                      , U32
                                                                                                      , MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                     , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                         , m2 : U32 }) }))
   in (r' :: U32
      , p :: MayNull (Struct_Cogent_s3 =  { m5 : U32
                                          , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                              , m2 : U32 }) })) :: (U32
                                                                                                   , MayNull (Struct_Cogent_s3 =  { m5 : U32
                                                                                                                                  , m6 : MayNull (Struct_Cogent_s1 =  { m1 : U32
                                                                                                                                                                      , m2 : U32 }) }))
cogent_fp6 : (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] }) -> (U32
                                                                                        , (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] }))
cogent_fp6 p :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] }) =
   let (_ :: U8
       , r' :: U32
       , p :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] })) = let (v' :: U32
                                                                                             , p :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] })) = let v1' :: U32 = 3 :: U32
         and v' :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] }) = p :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] })
         and (p @{ @v1' :: U32 = p0' :: MayNull (CPtr =  { cont : U32 }) } :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] })
             , i0' :: U32) = (v' :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] })
                             , v1' :: U32)
         and v' :: MayNull (CPtr =  { cont : U32 }) = p0' :: MayNull (CPtr =  { cont : U32 })
         and p0' { cont = p1' :: U32 } :: MayNull (CPtr =  { cont : U32 }) = v' :: MayNull (CPtr =  { cont : U32 })
         and v' :: U32 = p1' :: U32
         and p0' :: MayNull (CPtr =  { cont : U32 }) = p0' :: MayNull (CPtr =  { cont : U32 }) { cont = p1' :: U32 } :: MayNull (CPtr =  { cont : U32 })
         and p :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] }) = p :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] }) @{ @i0' :: U32 = p0' :: MayNull (CPtr =  { cont : U32 }) } :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] })
         in (v' :: U32
            , p :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] })) :: (U32
                                                                                               , (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] }))
      in (3 :: U8
         , v' :: U32
         , p :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] })) :: (U8
                                                                                            , U32
                                                                                            , (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] }))
   in (r' :: U32
      , p :: (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] })) :: (U32
                                                                                         , (Cogent_a3 =  { arr5 : (MayNull (CPtr =  { cont : U32 }))#[() :: ()] }))
