cogent_lf1 : ( U32, U32 ) -> U32
cogent_lf1 (a
           , b) =
   if (let (c'
           , _
           , _) = repeat #{ n = b
                          , stop = \#{ acc = (c', a, i)
                                     , obsv = b } => c' > 1 || not (i < b)
                          , step = \#{ acc = (_, a, i)
                                     , obsv = b } => (0
                                                     , a * 2
                                                     , i + 1)
                          , acc = (0, a, 0)
                          , obsv = b }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , a
            , _) = repeat #{ n = b
                           , stop = \#{ acc = (c', a, i)
                                      , obsv = b } => c' > 1 || not (i < b)
                           , step = \#{ acc = (_, a, i)
                                      , obsv = b } => (0
                                                      , a * 2
                                                      , i + 1)
                           , acc = (0, a, 0)
                           , obsv = b }
      in a
cogent_lf2 : U32 -> U32
cogent_lf2 i =
   if (let (c'
           , _) = repeat #{ n = 5
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i < 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, i + 1)
                          , acc = (0, i)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 5
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i < 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, i + 1)
                           , acc = (0, i)
                           , obsv = () }
      in i
cogent_lf3 : U32 -> U32
cogent_lf3 i =
   if (let (c'
           , _) = repeat #{ n = 5
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i < 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, i + 1)
                          , acc = (0, i)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 5
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i < 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, i + 1)
                           , acc = (0, i)
                           , obsv = () }
      in i
cogent_lf4 : U32 -> U32
cogent_lf4 i =
   if (let (c'
           , _) = repeat #{ n = 5
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i < 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (2, i)
                          , acc = (0, i)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 5
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i < 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (2, i)
                           , acc = (0, i)
                           , obsv = () }
      in i
cogent_lf5 : U32 -> U32
cogent_lf5 i =
   if (let (c'
           , _
           , _) = repeat #{ n = 5
                          , stop = \#{ acc = (c', r', i)
                                     , obsv = () } => c' > 1 || not (i < 5)
                          , step = \#{ acc = (_, r', i)
                                     , obsv = () } => (3, i, i)
                          , acc = (0, r', i)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then let (_
            , r'
            , _) = repeat #{ n = 5
                           , stop = \#{ acc = (c', r', i)
                                      , obsv = () } => c' > 1 || not (i < 5)
                           , step = \#{ acc = (_, r', i)
                                      , obsv = () } => (3, i, i)
                           , acc = (0, r', i)
                           , obsv = () }
      in r'
   else let (_
            , _
            , i) = repeat #{ n = 5
                           , stop = \#{ acc = (c', r', i)
                                      , obsv = () } => c' > 1 || not (i < 5)
                           , step = \#{ acc = (_, r', i)
                                      , obsv = () } => (3, i, i)
                           , acc = (0, r', i)
                           , obsv = () }
      in i
cogent_lf6 : U32 -> U32
cogent_lf6 i =
   if (let (c'
           , _) = repeat #{ n = 5 + 1
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i <= 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, i + 1)
                          , acc = (0, i)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 5 + 1
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i <= 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, i + 1)
                           , acc = (0, i)
                           , obsv = () }
      in i
cogent_lf7 : U32 -> U32
cogent_lf7 i =
   if (let (c'
           , _) = repeat #{ n = 12
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i > 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, i - 1)
                          , acc = (0, 12)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 12
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i > 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, i - 1)
                           , acc = (0, 12)
                           , obsv = () }
      in i
cogent_lf8 : U32 -> U32
cogent_lf8 i =
   if (let (c'
           , _) = repeat #{ n = 12 + 1
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i >= 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, i - 1)
                          , acc = (0, 12)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 12 + 1
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i >= 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, i - 1)
                           , acc = (0, 12)
                           , obsv = () }
      in i
cogent_lf9 : U32 -> U32
cogent_lf9 i =
   if (let (c'
           , _) = repeat #{ n = 5
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i < 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, i + 3)
                          , acc = (0, i)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 5
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i < 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, i + 3)
                           , acc = (0, i)
                           , obsv = () }
      in i
cogent_lf10 : U32 -> U32
cogent_lf10 i =
   if (let (c'
           , _) = repeat #{ n = 5
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i < 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, i + 3)
                          , acc = (0, i)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 5
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i < 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, i + 3)
                           , acc = (0, i)
                           , obsv = () }
      in i
cogent_lf11 : U32 -> U32
cogent_lf11 i =
   if (let (c'
           , _) = repeat #{ n = 5
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i < 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, 3 + i)
                          , acc = (0, i)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 5
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i < 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, 3 + i)
                           , acc = (0, i)
                           , obsv = () }
      in i
cogent_lf12 : U32 -> U32
cogent_lf12 i =
   if (let (c'
           , _) = repeat #{ n = 12 + 1
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i >= 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, i - 3)
                          , acc = (0, 12)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 12 + 1
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i >= 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, i - 3)
                           , acc = (0, 12)
                           , obsv = () }
      in i
cogent_lf13 : U32 -> U32
cogent_lf13 i =
   if (let (c'
           , _) = repeat #{ n = 12 + 1
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i >= 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, i - 3)
                          , acc = (0, 12)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 12 + 1
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i >= 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, i - 3)
                           , acc = (0, 12)
                           , obsv = () }
      in i
cogent_lf14 : ( U32, U32 ) -> U32
cogent_lf14 (i
            , j) =
   if (let (c'
           , _) = repeat #{ n = j
                          , stop = \#{ acc = (c', i)
                                     , obsv = j } => c' > 1 || not (i < j)
                          , step = \#{ acc = (_, i)
                                     , obsv = j } => (0, i + 1)
                          , acc = (0, i)
                          , obsv = j }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = j
                           , stop = \#{ acc = (c', i)
                                      , obsv = j } => c' > 1 || not (i < j)
                           , step = \#{ acc = (_, i)
                                      , obsv = j } => (0, i + 1)
                           , acc = (0, i)
                           , obsv = j }
      in i
cogent_lf15 : U32 -> U32
cogent_lf15 i =
   if (let (c'
           , _) = repeat #{ n = 5
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i /= 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, i + 1)
                          , acc = (0, 0)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 5
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i /= 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, i + 1)
                           , acc = (0, 0)
                           , obsv = () }
      in i
cogent_lf16 : U32 -> U32
cogent_lf16 i =
   if (let (c'
           , _) = repeat #{ n = 10
                          , stop = \#{ acc = (c', i)
                                     , obsv = () } => c' > 1 || not (i /= 5)
                          , step = \#{ acc = (_, i)
                                     , obsv = () } => (0, i - 1)
                          , acc = (0, 10)
                          , obsv = () }
      in if c' == 2
         then 0
         else c') > 0
   then r'
   else let (_
            , i) = repeat #{ n = 10
                           , stop = \#{ acc = (c', i)
                                      , obsv = () } => c' > 1 || not (i /= 5)
                           , step = \#{ acc = (_, i)
                                      , obsv = () } => (0, i - 1)
                           , acc = (0, 10)
                           , obsv = () }
      in i

cogent_lfe1 : U32 -> U32
cogent_lfe1 i =
   if gencotDummy "Unsupported form of for loop: Counting variables modified in body" > 0
   then r'
   else i
cogent_lfe2 : ( U32, U32 ) -> U32
cogent_lfe2 (i
            , j) =
   if gencotDummy "Unsupported form of for loop: Controlling expression modified" > 0
   then r'
   else i
cogent_lfe3 : U32 -> U32
cogent_lfe3 i =
   if gencotDummy "Unsupported form of for loop: No counting variable found" > 0
   then r'
   else i
cogent_lfe4 : ( U32, U32 ) -> U32
cogent_lfe4 (i
            , j) =
   if gencotDummy "Unsupported form of for loop: Controlling expression modified" > 0
   then r'
   else i
cogent_lfe5 : U32 -> U32
cogent_lfe5 i =
   if gencotDummy "Unsupported form of for loop: No upper limit for iterations found" > 0
   then r'
   else i
cogent_lfe6 : U32 -> U32
cogent_lfe6 i =
   if gencotDummy "Unsupported form of for loop: No upper limit for iterations found" > 0
   then r'
   else i
cogent_lfe7 : U32 -> U32
cogent_lfe7 i =
   if gencotDummy "Unsupported form of for loop: No upper limit for iterations found" > 0
   then r'
   else i
cogent_lfe8 : U32 -> U32
cogent_lfe8 i =
   if gencotDummy "Unsupported form of for loop: No upper limit for iterations found" > 0
   then r'
   else i
cogent_lfe9 : U32 -> U32
cogent_lfe9 i =
   if gencotDummy "Unsupported form of for loop: No upper limit for iterations found" > 0
   then r'
   else i
cogent_lfe10 : U32 -> U32
cogent_lfe10 i =
   if gencotDummy "Unsupported form of for loop: No upper limit for iterations found" > 0
   then r'
   else i
