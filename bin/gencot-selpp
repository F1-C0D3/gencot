#! /bin/sh

# Select and normalize preprocessor directives from a C source, retaining their line positions.
# This is a filter from stdin to stdout.

awk \
'BEGIN { 
   cont = 0 
 } 
 { if ($0 ~ /^[[:blank:]]*#/) { 
     if ($0 ~ /^[[:blank:]]*#[[:blank:]]*[[:digit:]]+/) { 
       gsub(/^[[:blank:]]*#[[:blank:]]*/, "# ") 
     } 
     else { 
       gsub(/^[[:blank:]]*#[[:blank:]]*/, "#") 
       if ($0 ~ /\\$/) cont = 1 
       else cont = 0 
     } 
     print 
   } 
   else if (cont) { 
     print 
     if ($0 ~ /\\$/) cont = 1 
     else cont = 0 
   } 
   else printf("\n") 
 }'

# documentation:
#
# Line directives are normalized by removing whitespace before the # sign and reducing whitespace 
# after the # sign to a single blank
# All other directives are normalized by removing all whitespace around the # sign.
# 
# Implementation in awk:
# - A preprocessor directive may be written with or without whitespace before and after the keyword and at
#   the beginning of the line. Thus the regular expressions 
#     /^[[:blank:]]*#/
#     /^[[:blank:]]*#[[:blank:]]*[[:digit:]]+/
#   match all directives or all line directives, respectively.
# - A matched line directive is normalized by creating the form where there is only one space after #.
# - A matched other directive is normalized by creating the form where there is no space before or after #.
# - cont is a boolean variable which tells whether the next line is a continuation line for the
#   same directive. It is set according to whether there is a backslash at the end of the previous line.
#   This is detected by matching the line with the regular expression /\\$/.
# - we assume that line directives are never continued in successive lines.
