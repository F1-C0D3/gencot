#! /bin/sh

# Select preprocessor constant definitions from normalized preprocessor directives, retaining their line positions.
# This is a filter from stdin to stdout with an additional filename argument.
# The argument file must contain a list of preprocessor macro names (one per line).

if [ $# -gt 1 ]
then
  echo "Error: Only optional file name expected as arguments."
  exit 0
fi

awk \
'BEGIN { 
   if (ARGC > 1) { 
     rfile = ARGV[1]; delete ARGV[1] 
     while ((getline cline < rfile) > 0) { 
       omit[cline] = 1 
     } 
     close(rfile) 
   } 
 } 
 { if ($1 == "#define" && !($2 ~ /\(/) && !(omit[$2]) && (NF > 2 || $0 ~ /\\$/)) { 
     print 
     if ($0 ~ /\\$/) cont = 1 
     else cont = 0 
   } 
   else if (cont) { 
     print 
     if ($0 ~ /\\$/) cont = 1 
     else cont = 0 
   } 
   else if ($1 == "#") print 
   else printf "\n" 
 }' $1

# documentation:
# 
# A preprocessor constant definition has the form
#   #define NNN XXX
# where NNN does not contain a "(" (parameterless macro) and XXX is not empty.
# Definitions where NNN is listed in the argument file are omitted.
#
# Implementation in awk:
# - After matching a normalized directive, NNN is field 2 and XXX consists of the remaining fields.
# - To test whether field 2 contains a parenthesis it is matched against the pattern /\(/.
# - To test whether XXX is empty the number of fields NF is tested to be larger than 2.
# - Alternatively XXX may be specified in continuation lines. Then the definition line ends with a backslash
#   which is tested by matching the definition line against the pattern /\\$/. 
# - The boolean variable cont is set when the current line ends with a backslash. If it is true
#   for an input line that line is a continuation line of a constant definition and is output.
# - Line directives begin with an isolated # sign, this is tested by comparing field 1 with "#".
#   Line directives are copied to the output.
