cogent_lf1 : ( U32, U32 ) -> U32
cogent_lf1 (a, b) =
   let r' = let (c'
                , a) = let v1' = 0
         and (c', a) = let i = v1'
            and (c', a) = let (c'
                              , a
                              , i) = repeat[( U8, U32, U32 )
                                           , U32] #{ n = b
                                                   , stop = \#{ acc = (c', a, i)
                                                              , obsv = b } => c' > 1
                                                   , step = \#{ acc = (_, a, i)
                                                              , obsv = b } => let (c'
                                                                                  , a) = let v6' = i
                                                      and v7' = b
                                                      and v8' = v6' < v7'
                                                      in if v8'
                                                         then let (c'
                                                                  , a) = let v2' = 2
                                                               and v3' = a
                                                               and v4' = v3' * v2'
                                                               and a = v4'
                                                               in (0, a)
                                                            in (c', a)
                                                         else let c' = 2
                                                            in (c', a)
                                                   in if c' > 1
                                                      then (c', a, i)
                                                      else let i = let v9' = 1
                                                            and v10' = i
                                                            and v11' = v10' + v9'
                                                            and i = v11'
                                                            in i
                                                         in (0, a, i)
                                                   , acc = (0, a, i)
                                                   , obsv = b }
               in (if c' == 2 then 0 else c'
                  , a)
            in (c', a)
         in (c', a)
      in if c' > 0
         then r'
         else let r' = let v13' = a
               in v13'
            in r'
   in r'
cogent_lf2 : U32 -> U32
cogent_lf2 i =
   let r' = let (c', i) = let (c'
                              , i) = repeat[( U8, U32 )
                                           , ()] #{ n = 5
                                                  , stop = \#{ acc = (c', i)
                                                             , obsv = () } => c' > 1
                                                  , step = \#{ acc = (_, i)
                                                             , obsv = () } => let c' = let v1' = i
                                                     and v2' = 5
                                                     and v3' = v1' < v2'
                                                     in if v3'
                                                        then let c' = 0
                                                           in c'
                                                        else let c' = 2
                                                           in c'
                                                  in if c' > 1
                                                     then (c', i)
                                                     else let i = let v4' = 1
                                                           and v5' = i
                                                           and v6' = v5' + v4'
                                                           and i = v6'
                                                           in i
                                                        in (0, i)
                                                  , acc = (0, i)
                                                  , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then r'
         else let r' = let v8' = i in v8'
            in r'
   in r'
cogent_lf3 : U32 -> U32
cogent_lf3 i =
   let r' = let (c', i) = let (c'
                              , i) = repeat[( U8, U32 )
                                           , ()] #{ n = 5
                                                  , stop = \#{ acc = (c', i)
                                                             , obsv = () } => c' > 1
                                                  , step = \#{ acc = (_, i)
                                                             , obsv = () } => let c' = let v1' = i
                                                     and v2' = 5
                                                     and v3' = v1' < v2'
                                                     in if v3'
                                                        then let c' = 1
                                                           in c'
                                                        else let c' = 2
                                                           in c'
                                                  in if c' > 1
                                                     then (c', i)
                                                     else let i = let v4' = 1
                                                           and v5' = i
                                                           and v6' = v5' + v4'
                                                           and i = v6'
                                                           in i
                                                        in (0, i)
                                                  , acc = (0, i)
                                                  , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then r'
         else let r' = let v8' = i in v8'
            in r'
   in r'
cogent_lf4 : U32 -> U32
cogent_lf4 i =
   let r' = let (c', i) = let (c'
                              , i) = repeat[( U8, U32 )
                                           , ()] #{ n = 5
                                                  , stop = \#{ acc = (c', i)
                                                             , obsv = () } => c' > 1
                                                  , step = \#{ acc = (_, i)
                                                             , obsv = () } => let c' = let v1' = i
                                                     and v2' = 5
                                                     and v3' = v1' < v2'
                                                     in if v3'
                                                        then let c' = 2
                                                           in c'
                                                        else let c' = 2
                                                           in c'
                                                  in if c' > 1
                                                     then (c', i)
                                                     else let i = let v4' = 1
                                                           and v5' = i
                                                           and v6' = v5' + v4'
                                                           and i = v6'
                                                           in i
                                                        in (0, i)
                                                  , acc = (0, i)
                                                  , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then r'
         else let r' = let v8' = i in v8'
            in r'
   in r'
cogent_lf5 : U32 -> U32
cogent_lf5 i =
   let r' = let (c'
                , r'
                , i) = let (c'
                           , r'
                           , i) = repeat[( U8, U32, U32 )
                                        , ()] #{ n = 5
                                               , stop = \#{ acc = (c', r', i)
                                                          , obsv = () } => c' > 1
                                               , step = \#{ acc = (_, r', i)
                                                          , obsv = () } => let (c'
                                                                               , r') = let v2' = i
                                                  and v3' = 5
                                                  and v4' = v2' < v3'
                                                  in if v4'
                                                     then let (c'
                                                              , r') = let v1' = i
                                                           in (3, v1')
                                                        in (c', r')
                                                     else let c' = 2
                                                        in (c', r')
                                               in if c' > 1
                                                  then (c', r', i)
                                                  else let i = let v5' = 1
                                                        and v6' = i
                                                        and v7' = v6' + v5'
                                                        and i = v7'
                                                        in i
                                                     in (0, r', i)
                                               , acc = (0, r', i)
                                               , obsv = () }
         in (if c' == 2 then 0 else c'
            , r'
            , i)
      in if c' > 0
         then r'
         else let r' = let v9' = i in v9'
            in r'
   in r'
cogent_lf6 : U32 -> U32
cogent_lf6 i =
   let r' = let (c', i) = let (c'
                              , i) = repeat[( U8, U32 )
                                           , ()] #{ n = let v' = 5
                                                  and v1' = 1
                                                  and v2' = v' + v1'
                                                  in v2'
                                                  , stop = \#{ acc = (c', i)
                                                             , obsv = () } => c' > 1
                                                  , step = \#{ acc = (_, i)
                                                             , obsv = () } => let c' = let v3' = i
                                                     and v4' = 5
                                                     and v5' = v3' <= v4'
                                                     in if v5'
                                                        then let c' = 0
                                                           in c'
                                                        else let c' = 2
                                                           in c'
                                                  in if c' > 1
                                                     then (c', i)
                                                     else let i = let v6' = 1
                                                           and v7' = i
                                                           and v8' = v7' + v6'
                                                           and i = v8'
                                                           in i
                                                        in (0, i)
                                                  , acc = (0, i)
                                                  , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then r'
         else let r' = let v10' = i
               in v10'
            in r'
   in r'
cogent_lf7 : U32 -> U32
cogent_lf7 i =
   let r' = let (c'
                , i) = let i = let v1' = 12
            and v3' = v1'
            and i = v3'
            in i
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()] #{ n = 12
                                               , stop = \#{ acc = (c', i)
                                                          , obsv = () } => c' > 1
                                               , step = \#{ acc = (_, i)
                                                          , obsv = () } => let c' = let v5' = i
                                                  and v6' = 5
                                                  and v7' = v5' > v6'
                                                  in if v7'
                                                     then let c' = 0
                                                        in c'
                                                     else let c' = 2
                                                        in c'
                                               in if c' > 1
                                                  then (c', i)
                                                  else let i = let v8' = 1
                                                        and v9' = i
                                                        and v10' = v9' - v8'
                                                        and i = v10'
                                                        in i
                                                     in (0, i)
                                               , acc = (0, i)
                                               , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then r'
         else let r' = let v12' = i
               in v12'
            in r'
   in r'
cogent_lf8 : U32 -> U32
cogent_lf8 i =
   let r' = let (c'
                , i) = let i = let v3' = 12
            and v5' = v3'
            and i = v5'
            in i
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()] #{ n = let v' = 12
                                               and v1' = 1
                                               and v2' = v' + v1'
                                               in v2'
                                               , stop = \#{ acc = (c', i)
                                                          , obsv = () } => c' > 1
                                               , step = \#{ acc = (_, i)
                                                          , obsv = () } => let c' = let v7' = i
                                                  and v8' = 5
                                                  and v9' = v7' >= v8'
                                                  in if v9'
                                                     then let c' = 0
                                                        in c'
                                                     else let c' = 2
                                                        in c'
                                               in if c' > 1
                                                  then (c', i)
                                                  else let i = let v10' = 1
                                                        and v11' = i
                                                        and v12' = v11' - v10'
                                                        and i = v12'
                                                        in i
                                                     in (0, i)
                                               , acc = (0, i)
                                               , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then r'
         else let r' = let v14' = i
               in v14'
            in r'
   in r'
cogent_lf9 : U32 -> U32
cogent_lf9 i =
   let r' = let (c', i) = let (c'
                              , i) = repeat[( U8, U32 )
                                           , ()] #{ n = 5
                                                  , stop = \#{ acc = (c', i)
                                                             , obsv = () } => c' > 1
                                                  , step = \#{ acc = (_, i)
                                                             , obsv = () } => let c' = let v1' = i
                                                     and v2' = 5
                                                     and v3' = v1' < v2'
                                                     in if v3'
                                                        then let c' = 0
                                                           in c'
                                                        else let c' = 2
                                                           in c'
                                                  in if c' > 1
                                                     then (c', i)
                                                     else let i = let v4' = 3
                                                           and v5' = i
                                                           and v6' = v5' + v4'
                                                           and i = v6'
                                                           in i
                                                        in (0, i)
                                                  , acc = (0, i)
                                                  , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then r'
         else let r' = let v8' = i in v8'
            in r'
   in r'
cogent_lf10 : U32 -> U32
cogent_lf10 i =
   let r' = let (c', i) = let (c'
                              , i) = repeat[( U8, U32 )
                                           , ()] #{ n = 5
                                                  , stop = \#{ acc = (c', i)
                                                             , obsv = () } => c' > 1
                                                  , step = \#{ acc = (_, i)
                                                             , obsv = () } => let c' = let v1' = i
                                                     and v2' = 5
                                                     and v3' = v1' < v2'
                                                     in if v3'
                                                        then let c' = 0
                                                           in c'
                                                        else let c' = 2
                                                           in c'
                                                  in if c' > 1
                                                     then (c', i)
                                                     else let i = let v4' = i
                                                           and v5' = 3
                                                           and v6' = v4' + v5'
                                                           and v8' = v6'
                                                           and i = v8'
                                                           in i
                                                        in (0, i)
                                                  , acc = (0, i)
                                                  , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then r'
         else let r' = let v10' = i
               in v10'
            in r'
   in r'
cogent_lf11 : U32 -> U32
cogent_lf11 i =
   let r' = let (c', i) = let (c'
                              , i) = repeat[( U8, U32 )
                                           , ()] #{ n = 5
                                                  , stop = \#{ acc = (c', i)
                                                             , obsv = () } => c' > 1
                                                  , step = \#{ acc = (_, i)
                                                             , obsv = () } => let c' = let v1' = i
                                                     and v2' = 5
                                                     and v3' = v1' < v2'
                                                     in if v3'
                                                        then let c' = 0
                                                           in c'
                                                        else let c' = 2
                                                           in c'
                                                  in if c' > 1
                                                     then (c', i)
                                                     else let i = let v4' = 3
                                                           and v5' = i
                                                           and v6' = v4' + v5'
                                                           and v8' = v6'
                                                           and i = v8'
                                                           in i
                                                        in (0, i)
                                                  , acc = (0, i)
                                                  , obsv = () }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then r'
         else let r' = let v10' = i
               in v10'
            in r'
   in r'
cogent_lf12 : U32 -> U32
cogent_lf12 i =
   let r' = let (c'
                , i) = let i = let v3' = 12
            and v5' = v3'
            and i = v5'
            in i
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()] #{ n = let v' = 12
                                               and v1' = 1
                                               and v2' = v' + v1'
                                               in v2'
                                               , stop = \#{ acc = (c', i)
                                                          , obsv = () } => c' > 1
                                               , step = \#{ acc = (_, i)
                                                          , obsv = () } => let c' = let v7' = i
                                                  and v8' = 5
                                                  and v9' = v7' >= v8'
                                                  in if v9'
                                                     then let c' = 0
                                                        in c'
                                                     else let c' = 2
                                                        in c'
                                               in if c' > 1
                                                  then (c', i)
                                                  else let i = let v10' = 3
                                                        and v11' = i
                                                        and v12' = v11' - v10'
                                                        and i = v12'
                                                        in i
                                                     in (0, i)
                                               , acc = (0, i)
                                               , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then r'
         else let r' = let v14' = i
               in v14'
            in r'
   in r'
cogent_lf13 : U32 -> U32
cogent_lf13 i =
   let r' = let (c'
                , i) = let i = let v3' = 12
            and v5' = v3'
            and i = v5'
            in i
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()] #{ n = let v' = 12
                                               and v1' = 1
                                               and v2' = v' + v1'
                                               in v2'
                                               , stop = \#{ acc = (c', i)
                                                          , obsv = () } => c' > 1
                                               , step = \#{ acc = (_, i)
                                                          , obsv = () } => let c' = let v7' = i
                                                  and v8' = 5
                                                  and v9' = v7' >= v8'
                                                  in if v9'
                                                     then let c' = 0
                                                        in c'
                                                     else let c' = 2
                                                        in c'
                                               in if c' > 1
                                                  then (c', i)
                                                  else let i = let v10' = i
                                                        and v11' = 3
                                                        and v12' = v10' - v11'
                                                        and v14' = v12'
                                                        and i = v14'
                                                        in i
                                                     in (0, i)
                                               , acc = (0, i)
                                               , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then r'
         else let r' = let v16' = i
               in v16'
            in r'
   in r'
cogent_lf14 : ( U32, U32 ) -> U32
cogent_lf14 (i, j) =
   let r' = let (c', i) = let (c'
                              , i) = repeat[( U8, U32 )
                                           , U32] #{ n = j
                                                   , stop = \#{ acc = (c', i)
                                                              , obsv = j } => c' > 1
                                                   , step = \#{ acc = (_, i)
                                                              , obsv = j } => let c' = let v1' = i
                                                      and v2' = j
                                                      and v3' = v1' < v2'
                                                      in if v3'
                                                         then let c' = 0
                                                            in c'
                                                         else let c' = 2
                                                            in c'
                                                   in if c' > 1
                                                      then (c', i)
                                                      else let i = let v4' = 1
                                                            and v5' = i
                                                            and v6' = v5' + v4'
                                                            and i = v6'
                                                            in i
                                                         in (0, i)
                                                   , acc = (0, i)
                                                   , obsv = j }
         in (if c' == 2 then 0 else c'
            , i)
      in if c' > 0
         then r'
         else let r' = let v8' = i in v8'
            in r'
   in r'
cogent_lf15 : U32 -> U32
cogent_lf15 i =
   let r' = let (c'
                , i) = let i = let v1' = 0
            and v3' = v1'
            and i = v3'
            in i
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()] #{ n = 5
                                               , stop = \#{ acc = (c', i)
                                                          , obsv = () } => c' > 1
                                               , step = \#{ acc = (_, i)
                                                          , obsv = () } => let c' = let v5' = i
                                                  and v6' = 5
                                                  and v7' = v5' /= v6'
                                                  in if v7'
                                                     then let c' = 0
                                                        in c'
                                                     else let c' = 2
                                                        in c'
                                               in if c' > 1
                                                  then (c', i)
                                                  else let i = let v8' = 1
                                                        and v9' = i
                                                        and v10' = v9' + v8'
                                                        and i = v10'
                                                        in i
                                                     in (0, i)
                                               , acc = (0, i)
                                               , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then r'
         else let r' = let v12' = i
               in v12'
            in r'
   in r'
cogent_lf16 : U32 -> U32
cogent_lf16 i =
   let r' = let (c'
                , i) = let i = let v1' = 10
            and v3' = v1'
            and i = v3'
            in i
         and (c', i) = let (c'
                           , i) = repeat[( U8, U32 )
                                        , ()] #{ n = 10
                                               , stop = \#{ acc = (c', i)
                                                          , obsv = () } => c' > 1
                                               , step = \#{ acc = (_, i)
                                                          , obsv = () } => let c' = let v5' = i
                                                  and v6' = 5
                                                  and v7' = v5' /= v6'
                                                  in if v7'
                                                     then let c' = 0
                                                        in c'
                                                     else let c' = 2
                                                        in c'
                                               in if c' > 1
                                                  then (c', i)
                                                  else let i = let v8' = 1
                                                        and v9' = i
                                                        and v10' = v9' - v8'
                                                        and i = v10'
                                                        in i
                                                     in (0, i)
                                               , acc = (0, i)
                                               , obsv = () }
            in (if c' == 2 then 0 else c'
               , i)
         in (c', i)
      in if c' > 0
         then r'
         else let r' = let v12' = i
               in v12'
            in r'
   in r'

cogent_lfe1 : U32 -> U32
cogent_lfe1 i =
   let r' = let c' = gencotDummy "Unsupported form of for loop: Counting variables modified in body"
         {- for (; i < 5; i++)
             i = 0; -}
      in if c' > 0
         then r'
         else let r' = let v' = i in v'
            in r'
   in r'
cogent_lfe2 : ( U32, U32 ) -> U32
cogent_lfe2 (i, j) =
   let r' = let c' = gencotDummy "Unsupported form of for loop: Controlling expression modified"
         {- for (; i < j; i++)
             j = 0; -}
      in if c' > 0
         then r'
         else let r' = let v' = i in v'
            in r'
   in r'
cogent_lfe3 : U32 -> U32
cogent_lfe3 i =
   let r' = let c' = gencotDummy "Unsupported form of for loop: No counting variable found"
         {- for (; i < i + 5; i++)
             ; -}
      in if c' > 0
         then r'
         else let r' = let v' = i in v'
            in r'
   in r'
cogent_lfe4 : ( U32, U32 ) -> U32
cogent_lfe4 (i, j) =
   let r' = let c' = gencotDummy "Unsupported form of for loop: Controlling expression modified"
         {- for (; i < j; i++, j++)
             ; -}
      in if c' > 0
         then r'
         else let r' = let v' = i in v'
            in r'
   in r'
cogent_lfe5 : U32 -> U32
cogent_lfe5 i =
   let r' = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (; i < 5; i--)
             ; -}
      in if c' > 0
         then r'
         else let r' = let v' = i in v'
            in r'
   in r'
cogent_lfe6 : U32 -> U32
cogent_lfe6 i =
   let r' = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (; i > 5; i--)
             ; -}
      in if c' > 0
         then r'
         else let r' = let v' = i in v'
            in r'
   in r'
cogent_lfe7 : U32 -> U32
cogent_lfe7 i =
   let r' = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (; i != 5; i++)
             ; -}
      in if c' > 0
         then r'
         else let r' = let v' = i in v'
            in r'
   in r'
cogent_lfe8 : U32 -> U32
cogent_lfe8 i =
   let r' = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (i = 3; i != 5; i--)
             ; -}
      in if c' > 0
         then r'
         else let r' = let v' = i in v'
            in r'
   in r'
cogent_lfe9 : U32 -> U32
cogent_lfe9 i =
   let r' = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (i = 10; i != 5; i++)
             ; -}
      in if c' > 0
         then r'
         else let r' = let v' = i in v'
            in r'
   in r'
cogent_lfe10 : U32 -> U32
cogent_lfe10 i =
   let r' = let c' = gencotDummy "Unsupported form of for loop: No upper limit for iterations found"
         {- for (i = 0; i != 5; i += 2)
             ; -}
      in if c' > 0
         then r'
         else let r' = let v' = i in v'
            in r'
   in r'

cogent_lfn1 : ( U32, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_lfn1 (i, j) =
   let (j, r') = let (c'
                     , i
                     , j) = let i = let v1' = 0
            and v3' = v1'
            and i = v3'
            in i
         and (c', j, i) = let (c'
                              , j
                              , i) = repeat[( U8, MayNull (CPtr U32), U32 )
                                           , ()] #{ n = 5
                                                  , stop = \#{ acc = (c', j, i)
                                                             , obsv = () } => c' > 1
                                                  , step = \#{ acc = (_, j, i)
                                                             , obsv = () } => let (c'
                                                                                  , j) = let v15' = let v10' = j
                                                        and v10' = v10' /= cogent_NULL
                                                        in if v10'
                                                           then let v11' = i
                                                              and v12' = 5
                                                              and v13' = v11' < v12'
                                                              in v13'
                                                           else let v14' = False
                                                              in v14'
                                                     in if v15'
                                                        then let (c'
                                                                 , j) = let v5' = 0
                                                              and v6' = j
                                                              and j { cont = p0' } = v6'
                                                              and v8' = v5'
                                                              and p0' = v8'
                                                              and j = j { cont = p0' }
                                                              in (0, j)
                                                           in (c', j)
                                                        else let c' = 2
                                                           in (c', j)
                                                  in if c' > 1
                                                     then (c', j, i)
                                                     else let i = let v16' = 1
                                                           and v17' = i
                                                           and v18' = v17' + v16'
                                                           and i = v18'
                                                           in i
                                                        in (0, j, i)
                                                  , acc = (0, j, i)
                                                  , obsv = () }
            in (if c' == 2 then 0 else c'
               , j
               , i)
         in (c', i, j)
      in if c' > 0
         then (j, r')
         else let r' = let v20' = i
               in v20'
            in (j, r')
   in (r', j)

type Cogent_lfa =
   CArr5 (MayNull (CPtr U32))
cogent_lfn2 : Cogent_lfa -> ( U32, Cogent_lfa )
cogent_lfn2 a =
   let (r', a) = let (c'
                     , r'
                     , a) = let v1' = 0
         and (c', r', a) = let i = v1'
            and (c', r', a) = let (c'
                                  , r'
                                  , a
                                  , i) = repeat[( U8, U32, Cogent_lfa, U32 )
                                               , ()] #{ n = 5
                                                      , stop = \#{ acc = (c'
                                                                         , r'
                                                                         , a
                                                                         , i)
                                                                 , obsv = () } => c' > 1
                                                      , step = \#{ acc = (_
                                                                         , r'
                                                                         , a
                                                                         , i)
                                                                 , obsv = () } => let (c'
                                                                                      , a
                                                                                      , r') = let (v13'
                                                                                                  , a) = let v6' = i
                                                            and v7' = 5
                                                            and v8' = v6' < v7'
                                                            in if v8'
                                                               then let v10' = i
                                                                  and v9' = a
                                                                  and a @{ @v10' = p2' } = v9'
                                                                  and v11' = p2'
                                                                  and a = a @{ @v10' = p2' }
                                                                  and v11' = v11' /= cogent_NULL
                                                                  in (v11', a)
                                                               else
                                                                  let v12' = False
                                                                  in (v12', a)
                                                         in if v13'
                                                            then let (c'
                                                                     , r'
                                                                     , a) = let v3' = i
                                                                  and v2' = a
                                                                  and a @{ @v3' = p0' } = v2'
                                                                  and v4' = p0'
                                                                  and p0' { cont = p1' } = v4'
                                                                  and v5' = p1'
                                                                  and p0' = p0' { cont = p1' }
                                                                  and a = a @{ @v3' = p0' }
                                                                  in (3, v5', a)
                                                               in (c', a, r')
                                                            else let c' = 2
                                                               in (c', a, r')
                                                      in if c' > 1
                                                         then (c', r', a, i)
                                                         else
                                                            let i = let v14' = 1
                                                               and v15' = i
                                                               and v16' = v15' + v14'
                                                               and i = v16'
                                                               in i
                                                            in (0, r', a, i)
                                                      , acc = (0, r', a, i)
                                                      , obsv = () }
               in (if c' == 2 then 0 else c'
                  , r'
                  , a)
            in (c', r', a)
         in (c', r', a)
      in if c' > 0
         then (r', a)
         else let r' = let v18' = 0
               in v18'
            in (r', a)
   in (r', a)
