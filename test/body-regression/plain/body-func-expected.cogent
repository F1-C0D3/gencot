-- Function definitions

cogent_ffv1 : () -> ()
cogent_ffv1 () = let _ = 0 in ()
cogent_ffv2 : () -> ()
cogent_ffv2 () =
   let (_
       , r') = let v' = let v' = ()
         in v'
      in (3, v')
   in ()

cogent_ffv11 : MayNull (CPtr U32) -> ()
cogent_ffv11 i = let _ = 0 in () -- i: -ar
cogent_ffv12 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_ffv12 i =
   let _ = 0
   in ((), i)
cogent_ffv13 : MayNull (CPtr U32) -> ()
cogent_ffv13 i =
   let (_, i) = let (v1'
                    , i) = let v' = 5
         and v1' = i
         and i { cont = p0' } = v1'
         and v1' = p0'
         and v1' = v'
         and (v1', p0') = (v1', v1')
         and i = i { cont = p0' }
         and v1' = v1'
         in (v1', i)
      in (0, i)
   in () -- i: -ar
cogent_ffv14 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_ffv14 i =
   let (_, i) = let (v1'
                    , i) = let v' = 5
         and v1' = i
         and i { cont = p0' } = v1'
         and v1' = p0'
         and v1' = v'
         and (v1', p0') = (v1', v1')
         and i = i { cont = p0' }
         and v1' = v1'
         in (v1', i)
      in (0, i)
   in ((), i)
cogent_ffv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ()
cogent_ffv15 (i, j) =
   let (_, j, i) = let (c'
                       , j
                       , i) = let (v1'
                                  , j
                                  , i) = let v' = j
            and j { cont = p0' } = v'
            and v' = p0'
            and j = j { cont = p0' }
            and v' = v'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            in (v1', j, i)
         in (0, j, i)
      in if c' > 0
         then (c', j, i)
         else let (c', j) = let (v1'
                                , j) = let v' = 5
                  and v1' = j
                  and j { cont = p2' } = v1'
                  and v1' = p2'
                  and v1' = v'
                  and (v1', p2') = (v1', v1')
                  and j = j { cont = p2' }
                  and v1' = v1'
                  in (v1', j)
               in (0, j)
            in (c', j, i)
   in () -- i: -ar, j: -ar
cogent_ffv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_ffv16 (i, j) =
   let (_, j, i) = let (c'
                       , j
                       , i) = let (v1'
                                  , j
                                  , i) = let v' = j
            and j { cont = p0' } = v'
            and v' = p0'
            and j = j { cont = p0' }
            and v' = v'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            in (v1', j, i)
         in (0, j, i)
      in if c' > 0
         then (c', j, i)
         else let (c', j) = let (v1'
                                , j) = let v' = 5
                  and v1' = j
                  and j { cont = p2' } = v1'
                  and v1' = p2'
                  and v1' = v'
                  and (v1', p2') = (v1', v1')
                  and j = j { cont = p2' }
                  and v1' = v1'
                  in (v1', j)
               in (0, j)
            in (c', j, i)
   in ((), i) -- j: -ar
cogent_ffv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_ffv17 (i, j) =
   let (_, j, i) = let (c'
                       , j
                       , i) = let (v1'
                                  , j
                                  , i) = let v' = j
            and j { cont = p0' } = v'
            and v' = p0'
            and j = j { cont = p0' }
            and v' = v'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            in (v1', j, i)
         in (0, j, i)
      in if c' > 0
         then (c', j, i)
         else let (c', j) = let (v1'
                                , j) = let v' = 5
                  and v1' = j
                  and j { cont = p2' } = v1'
                  and v1' = p2'
                  and v1' = v'
                  and (v1', p2') = (v1', v1')
                  and j = j { cont = p2' }
                  and v1' = v1'
                  in (v1', j)
               in (0, j)
            in (c', j, i)
   in ((), j) -- i: -ar
cogent_ffv18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_ffv18 (i, j) =
   let (_, j, i) = let (c'
                       , j
                       , i) = let (v1'
                                  , j
                                  , i) = let v' = j
            and j { cont = p0' } = v'
            and v' = p0'
            and j = j { cont = p0' }
            and v' = v'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            in (v1', j, i)
         in (0, j, i)
      in if c' > 0
         then (c', j, i)
         else let (c', j) = let (v1'
                                , j) = let v' = 5
                  and v1' = j
                  and j { cont = p2' } = v1'
                  and v1' = p2'
                  and v1' = v'
                  and (v1', p2') = (v1', v1')
                  and j = j { cont = p2' }
                  and v1' = v1'
                  in (v1', j)
               in (0, j)
            in (c', j, i)
   in ((), i, j)

type GlobState1 = CPtr U32 -- glob1: gs1
type GlobState2 = CPtr U32 -- glob2: gs2

cogent_ffv21 : GlobState1 -> ( (), GlobState1 )
cogent_ffv21 g =
   let _ = 0
   in ((), g) -- g: gs1
cogent_ffv22 : GlobState2 -> ( (), GlobState2 )
cogent_ffv22 g =
   let _ = 0
   in ((), g) -- g: gs2
cogent_ffv23 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv23 (g1, g2) =
   let _ = 0
   in ((), g1, g2) -- g1: gs1, g2: gs2
cogent_ffv24 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv24 (g1, g2) =
   let _ = 0
   in ((), g1, g2) -- g2: gs2, g1: gs1
cogent_ffv25 : GlobState1 -> ( (), GlobState1 )
cogent_ffv25 g =
   let (_, g) = let (v1'
                    , g) = let v' = 5
         and v1' = g
         and g { cont = p0' } = v1'
         and v1' = p0'
         and v1' = v'
         and (v1', p0') = (v1', v1')
         and g = g { cont = p0' }
         and v1' = v1'
         in (v1', g)
      in (0, g)
   in ((), g) -- g: gs1
cogent_ffv26 : GlobState1 -> ( (), GlobState1 )
cogent_ffv26 g =
   let _ = let v1' = let v' = 5
         and v1' = gencotDummy "Cannot access global variable: glob2"
            {- *; -}
         and v1' = v'
         and (v1', err') = (v1', v1')
         in v1'
      in 0
   in ((), g) -- g: gs1 (!)
cogent_ffv27 : GlobState1 -> ( (), GlobState1 )
cogent_ffv27 g =
   let (_, g) = let (v1'
                    , g) = let v' = 1
         and v1' = g
         and g { cont = p0' } = v1'
         and v1' = p0'
         and v1' = v1' + v'
         and (v1', p0') = (p0', v1')
         and g = g { cont = p0' }
         and v1' = v1'
         in (v1', g)
      in (0, g)
   in ((), g) -- g: gs1
cogent_ffv28 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv28 (g1, g2) =
   let (_, g2, g1) = let (v1'
                         , g2
                         , g1) = let v' = g2
         and g2 { cont = p0' } = v'
         and v' = p0'
         and v1' = g1
         and g1 { cont = p1' } = v1'
         and v1' = p1'
         and v1' = v'
         and (v1', p1') = (v1', v1')
         and g1 = g1 { cont = p1' }
         and v1' = v1'
         and g2 = g2 { cont = p0' }
         in (v1', g2, g1)
      in (0, g2, g1)
   in ((), g1, g2) -- g1: gs1, g2: gs2

cogent_ffv31 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), GlobState1 )
cogent_ffv31 (i, g) =
   let (_, i, g) = let (v1'
                       , i
                       , g) = let v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and i = i { cont = p0' }
         and v' = v'
         and v1' = g
         and g { cont = p1' } = v1'
         and v1' = p1'
         and v1' = v'
         and (v1', p1') = (v1', v1')
         and g = g { cont = p1' }
         and v1' = v1'
         in (v1', i, g)
      in (0, i, g)
   in ((), g) -- i: -ar, g: gs1
cogent_ffv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv32 (i, g) =
   let (_, g, i) = let (v1'
                       , g
                       , i) = let v' = g
         and g { cont = p0' } = v'
         and v' = p0'
         and v1' = i
         and i { cont = p1' } = v1'
         and v1' = p1'
         and v1' = v'
         and (v1', p1') = (v1', v1')
         and i = i { cont = p1' }
         and v1' = v1'
         and g = g { cont = p0' }
         in (v1', g, i)
      in (0, g, i)
   in ((), i, g) -- g: gs1
cogent_ffv33 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv33 (i, g) =
   let (_, g, i) = let (v2'
                       , g
                       , i) = let v' = 1
         and v1' = g
         and g { cont = p0' } = v1'
         and v1' = p0'
         and v1' = v1' + v'
         and (v1', p0') = (p0', v1')
         and g = g { cont = p0' }
         and v1' = v1'
         and v2' = i
         and i { cont = p1' } = v2'
         and v2' = p1'
         and v2' = v1'
         and (v2', p1') = (v2', v2')
         and i = i { cont = p1' }
         and v2' = v2'
         in (v2', g, i)
      in (0, g, i)
   in ((), i, g) -- g: gs1
cogent_ffv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv34 (i, j, g) =
   let (_, g, i, j) = let (c'
                          , g
                          , i) = let (v1'
                                     , g
                                     , i) = let v' = g
            and g { cont = p0' } = v'
            and v' = p0'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            and g = g { cont = p0' }
            in (v1', g, i)
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j)
         else let (c', j, g) = let (v1'
                                   , j
                                   , g) = let v' = j
                  and j { cont = p2' } = v'
                  and v' = p2'
                  and j = j { cont = p2' }
                  and v' = v'
                  and v1' = g
                  and g { cont = p3' } = v1'
                  and v1' = p3'
                  and v1' = v'
                  and (v1', p3') = (v1', v1')
                  and g = g { cont = p3' }
                  and v1' = v1'
                  in (v1', j, g)
               in (0, j, g)
            in (c', g, i, j)
   in ((), i, g) -- j: -ar, g: gs1
cogent_ffv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_ffv35 (i, j, g) =
   let (_, g, i, j) = let (c'
                          , g
                          , i) = let (v1'
                                     , g
                                     , i) = let v' = g
            and g { cont = p0' } = v'
            and v' = p0'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            and g = g { cont = p0' }
            in (v1', g, i)
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j)
         else let (c', j, g) = let (v1'
                                   , j
                                   , g) = let v' = j
                  and j { cont = p2' } = v'
                  and v' = p2'
                  and j = j { cont = p2' }
                  and v' = v'
                  and v1' = g
                  and g { cont = p3' } = v1'
                  and v1' = p3'
                  and v1' = v'
                  and (v1', p3') = (v1', v1')
                  and g = g { cont = p3' }
                  and v1' = v1'
                  in (v1', j, g)
               in (0, j, g)
            in (c', g, i, j)
   in ((), i, j, g) -- g: gs1
cogent_ffv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_ffv36 (i, j, g1, g2) =
   let (_, g1, i, j, g2) = let (c'
                               , g1
                               , i) = let (v1'
                                          , g1
                                          , i) = let v' = g1
            and g1 { cont = p0' } = v'
            and v' = p0'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            and g1 = g1 { cont = p0' }
            in (v1', g1, i)
         in (0, g1, i)
      in if c' > 0
         then (c', g1, i, j, g2)
         else let (c', j, g2) = let (v1'
                                    , j
                                    , g2) = let v' = j
                  and j { cont = p2' } = v'
                  and v' = p2'
                  and j = j { cont = p2' }
                  and v' = v'
                  and v1' = g2
                  and g2 { cont = p3' } = v1'
                  and v1' = p3'
                  and v1' = v'
                  and (v1', p3') = (v1', v1')
                  and g2 = g2 { cont = p3' }
                  and v1' = v1'
                  in (v1', j, g2)
               in (0, j, g2)
            in (c', g1, i, j, g2)
   in ((), i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_ffv41 : Heap -> ( (), Heap )
cogent_ffv41 heap =
   let _ = 0
   in ((), heap) -- ffv41: hu
cogent_ffv42 : ( GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_ffv42 (g, heap) =
   let _ = 0
   in ((), g, heap) -- ffv42: hu, g: gs1
cogent_ffv43 : ( MayNull (CPtr U32), Heap ) -> ( (), Heap )
cogent_ffv43 (i, heap) =
   let (_, i) = let (v1'
                    , i) = let v' = 5
         and v1' = i
         and i { cont = p0' } = v1'
         and v1' = p0'
         and v1' = v'
         and (v1', p0') = (v1', v1')
         and i = i { cont = p0' }
         and v1' = v1'
         in (v1', i)
      in (0, i)
   in ((), heap) -- i: -ar, ffv43: hu
cogent_ffv44 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_ffv44 (i, heap) =
   let (_, i) = let (v1'
                    , i) = let v' = 5
         and v1' = i
         and i { cont = p0' } = v1'
         and v1' = p0'
         and v1' = v'
         and (v1', p0') = (v1', v1')
         and i = i { cont = p0' }
         and v1' = v1'
         in (v1', i)
      in (0, i)
   in ((), i, heap) -- ffv44: hu
cogent_ffv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_ffv45 (i, g, heap) =
   let (_, i, g) = let (v1'
                       , i
                       , g) = let v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and i = i { cont = p0' }
         and v' = v'
         and v1' = g
         and g { cont = p1' } = v1'
         and v1' = p1'
         and v1' = v'
         and (v1', p1') = (v1', v1')
         and g = g { cont = p1' }
         and v1' = v1'
         in (v1', i, g)
      in (0, i, g)
   in ((), g, heap) -- i: -ar, g: gs1, ffv45: hu
cogent_ffv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffv46 (i, g, heap) =
   let (_, g, i) = let (v1'
                       , g
                       , i) = let v' = g
         and g { cont = p0' } = v'
         and v' = p0'
         and v1' = i
         and i { cont = p1' } = v1'
         and v1' = p1'
         and v1' = v'
         and (v1', p1') = (v1', v1')
         and i = i { cont = p1' }
         and v1' = v1'
         and g = g { cont = p0' }
         in (v1', g, i)
      in (0, g, i)
   in ((), i, g, heap) -- g: gs1, ffv46: hu
cogent_ffv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_ffv47 (i, j, heap) =
   let (_, i, j) = let (c'
                       , i) = let (v1'
                                  , i) = let v' = gencotDummy "Cannot access global variable: glob1"
               {- *; -}
            and v1' = i
            and i { cont = p0' } = v1'
            and v1' = p0'
            and v1' = v'
            and (v1', p0') = (v1', v1')
            and i = i { cont = p0' }
            and v1' = v1'
            in (v1', i)
         in (0, i)
      in if c' > 0
         then (c', i, j)
         else let (c', j) = let (v1'
                                , j) = let v' = j
                  and j { cont = p1' } = v'
                  and v' = p1'
                  and j = j { cont = p1' }
                  and v' = v'
                  and v1' = gencotDummy "Cannot access global variable: glob1"
                     {- *; -}
                  and v1' = v'
                  and (v1', err') = (v1', v1')
                  in (v1', j)
               in (0, j)
            in (c', i, j)
   in ((), i, j, heap) -- ffv47: hu
cogent_ffv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffv48 (i, j, g, heap) =
   let (_, g, i, j) = let (c'
                          , g
                          , i) = let (v1'
                                     , g
                                     , i) = let v' = g
            and g { cont = p0' } = v'
            and v' = p0'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            and g = g { cont = p0' }
            in (v1', g, i)
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j)
         else let (c', j, g) = let (v1'
                                   , j
                                   , g) = let v' = j
                  and j { cont = p2' } = v'
                  and v' = p2'
                  and j = j { cont = p2' }
                  and v' = v'
                  and v1' = g
                  and g { cont = p3' } = v1'
                  and v1' = p3'
                  and v1' = v'
                  and (v1', p3') = (v1', v1')
                  and g = g { cont = p3' }
                  and v1' = v1'
                  in (v1', j, g)
               in (0, j, g)
            in (c', g, i, j)
   in ((), i, j, g, heap) -- g: gs1, ffv48: hu


cogent_ffi1 : () -> U32
cogent_ffi1 () =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in r'

cogent_ffi11 : MayNull (CPtr U32) -> U32
cogent_ffi11 i =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in r' -- i: -ar
cogent_ffi12 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_ffi12 i =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', i)
cogent_ffi13 : MayNull (CPtr U32) -> U32
cogent_ffi13 i =
   let (_, i, r') = let (c'
                        , i) = let (v1', i) = let v' = 5
            and v1' = i
            and i { cont = p0' } = v1'
            and v1' = p0'
            and v1' = v'
            and (v1', p0') = (v1', v1')
            and i = i { cont = p0' }
            and v1' = v1'
            in (v1', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in r' -- i: -ar 
cogent_ffi14 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_ffi14 i =
   let (_, i, r') = let (c'
                        , i) = let (v1', i) = let v' = 5
            and v1' = i
            and i { cont = p0' } = v1'
            and v1' = p0'
            and v1' = v'
            and (v1', p0') = (v1', v1')
            and i = i { cont = p0' }
            and v1' = v1'
            in (v1', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', i)
cogent_ffi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> U32
cogent_ffi15 (i, j) =
   let (_, j, i, r') = let (c'
                           , j
                           , i) = let (v1'
                                      , j
                                      , i) = let v' = j
            and j { cont = p0' } = v'
            and v' = p0'
            and j = j { cont = p0' }
            and v' = v'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            in (v1', j, i)
         in (0, j, i)
      in if c' > 0
         then (c', j, i, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v1', j) = let v' = 5
                     and v1' = j
                     and j { cont = p2' } = v1'
                     and v1' = p2'
                     and v1' = v'
                     and (v1', p2') = (v1', v1')
                     and j = j { cont = p2' }
                     and v1' = v1'
                     in (v1', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', j, i, r')
   in r' -- i: -ar, j: -ar 
cogent_ffi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_ffi16 (i, j) =
   let (_, j, i, r') = let (c'
                           , j
                           , i) = let (v1'
                                      , j
                                      , i) = let v' = j
            and j { cont = p0' } = v'
            and v' = p0'
            and j = j { cont = p0' }
            and v' = v'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            in (v1', j, i)
         in (0, j, i)
      in if c' > 0
         then (c', j, i, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v1', j) = let v' = 5
                     and v1' = j
                     and j { cont = p2' } = v1'
                     and v1' = p2'
                     and v1' = v'
                     and (v1', p2') = (v1', v1')
                     and j = j { cont = p2' }
                     and v1' = v1'
                     in (v1', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', j, i, r')
   in (r', i) -- j: -ar
cogent_ffi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_ffi17 (i, j) =
   let (_, j, i, r') = let (c'
                           , j
                           , i) = let (v1'
                                      , j
                                      , i) = let v' = j
            and j { cont = p0' } = v'
            and v' = p0'
            and j = j { cont = p0' }
            and v' = v'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            in (v1', j, i)
         in (0, j, i)
      in if c' > 0
         then (c', j, i, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v1', j) = let v' = 5
                     and v1' = j
                     and j { cont = p2' } = v1'
                     and v1' = p2'
                     and v1' = v'
                     and (v1', p2') = (v1', v1')
                     and j = j { cont = p2' }
                     and v1' = v1'
                     in (v1', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', j, i, r')
   in (r', j) -- i: -ar
cogent_ffi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_ffi18 (i, j) =
   let (_, j, i, r') = let (c'
                           , j
                           , i) = let (v1'
                                      , j
                                      , i) = let v' = j
            and j { cont = p0' } = v'
            and v' = p0'
            and j = j { cont = p0' }
            and v' = v'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            in (v1', j, i)
         in (0, j, i)
      in if c' > 0
         then (c', j, i, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v1', j) = let v' = 5
                     and v1' = j
                     and j { cont = p2' } = v1'
                     and v1' = p2'
                     and v1' = v'
                     and (v1', p2') = (v1', v1')
                     and j = j { cont = p2' }
                     and v1' = v1'
                     in (v1', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', j, i, r')
   in (r', i, j)

cogent_ffi21 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi21 g =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', g) -- g: gs1
cogent_ffi22 : GlobState2 -> ( U32, GlobState2 )
cogent_ffi22 g =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', g) -- g: gs2
cogent_ffi23 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi23 (g1, g2) =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', g1, g2) -- g1: gs1, g2: gs2
cogent_ffi24 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi24 (g1, g2) =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', g1, g2) -- g2: gs2, g1: gs1
cogent_ffi25 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi25 g =
   let (_, g, r') = let (c'
                        , g) = let (v1', g) = let v' = 5
            and v1' = g
            and g { cont = p0' } = v1'
            and v1' = p0'
            and v1' = v'
            and (v1', p0') = (v1', v1')
            and g = g { cont = p0' }
            and v1' = v1'
            in (v1', g)
         in (0, g)
      in if c' > 0
         then (c', g, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', g, r')
   in (r', g) -- g: gs1
cogent_ffi26 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi26 g =
   let (_
       , r') = let c' = let v1' = let v' = 5
            and v1' = gencotDummy "Cannot access global variable: glob2"
               {- *; -}
            and v1' = v'
            and (v1', err') = (v1', v1')
            in v1'
         in 0
      in if c' > 0
         then (c', r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', r')
   in (r', g) -- g: gs1 (!)
cogent_ffi27 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi27 g =
   let (_, g, r') = let (c'
                        , g) = let (v1', g) = let v' = 1
            and v1' = g
            and g { cont = p0' } = v1'
            and v1' = p0'
            and v1' = v1' + v'
            and (v1', p0') = (p0', v1')
            and g = g { cont = p0' }
            and v1' = v1'
            in (v1', g)
         in (0, g)
      in if c' > 0
         then (c', g, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', g, r')
   in (r', g) -- g: gs1
cogent_ffi28 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi28 (g1, g2) =
   let (_, g2, g1, r') = let (c'
                             , g2
                             , g1) = let (v1'
                                         , g2
                                         , g1) = let v' = g2
            and g2 { cont = p0' } = v'
            and v' = p0'
            and v1' = g1
            and g1 { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and g1 = g1 { cont = p1' }
            and v1' = v1'
            and g2 = g2 { cont = p0' }
            in (v1', g2, g1)
         in (0, g2, g1)
      in if c' > 0
         then (c', g2, g1, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', g2, g1, r')
   in (r', g1, g2) -- g1: gs1, g2: gs2

cogent_ffi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, GlobState1 )
cogent_ffi31 (i, g) =
   let (_, i, g, r') = let (c'
                           , i
                           , g) = let (v1'
                                      , i
                                      , g) = let v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and i = i { cont = p0' }
            and v' = v'
            and v1' = g
            and g { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and g = g { cont = p1' }
            and v1' = v1'
            in (v1', i, g)
         in (0, i, g)
      in if c' > 0
         then (c', i, g, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, g, r')
   in (r', g) -- i: -ar, g: gs1
cogent_ffi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi32 (i, g) =
   let (_, g, i, r') = let (c'
                           , g
                           , i) = let (v1'
                                      , g
                                      , i) = let v' = g
            and g { cont = p0' } = v'
            and v' = p0'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            and g = g { cont = p0' }
            in (v1', g, i)
         in (0, g, i)
      in if c' > 0
         then (c', g, i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', g, i, r')
   in (r', i, g) -- g: gs1
cogent_ffi33 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi33 (i, g) =
   let (_, g, i, r') = let (c'
                           , g
                           , i) = let (v2'
                                      , g
                                      , i) = let v' = 1
            and v1' = g
            and g { cont = p0' } = v1'
            and v1' = p0'
            and v1' = v1' + v'
            and (v1', p0') = (p0', v1')
            and g = g { cont = p0' }
            and v1' = v1'
            and v2' = i
            and i { cont = p1' } = v2'
            and v2' = p1'
            and v2' = v1'
            and (v2', p1') = (v2', v2')
            and i = i { cont = p1' }
            and v2' = v2'
            in (v2', g, i)
         in (0, g, i)
      in if c' > 0
         then (c', g, i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', g, i, r')
   in (r', i, g) -- g: gs1
cogent_ffi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi34 (i, j, g) =
   let (_, g, i, j, r') = let (c'
                              , g
                              , i) = let (v1'
                                         , g
                                         , i) = let v' = g
            and g { cont = p0' } = v'
            and v' = p0'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            and g = g { cont = p0' }
            in (v1', g, i)
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j, r')
         else let (c'
                  , j
                  , g
                  , r') = let (c'
                              , j
                              , g) = let (v1'
                                         , j
                                         , g) = let v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and j = j { cont = p2' }
                     and v' = v'
                     and v1' = g
                     and g { cont = p3' } = v1'
                     and v1' = p3'
                     and v1' = v'
                     and (v1', p3') = (v1', v1')
                     and g = g { cont = p3' }
                     and v1' = v1'
                     in (v1', j, g)
                  in (0, j, g)
               in if c' > 0
                  then (c', j, g, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, g, r')
            in (c', g, i, j, r')
   in (r', i, g) -- j: -ar, g: gs1
cogent_ffi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_ffi35 (i, j, g) =
   let (_, g, i, j, r') = let (c'
                              , g
                              , i) = let (v1'
                                         , g
                                         , i) = let v' = g
            and g { cont = p0' } = v'
            and v' = p0'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            and g = g { cont = p0' }
            in (v1', g, i)
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j, r')
         else let (c'
                  , j
                  , g
                  , r') = let (c'
                              , j
                              , g) = let (v1'
                                         , j
                                         , g) = let v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and j = j { cont = p2' }
                     and v' = v'
                     and v1' = g
                     and g { cont = p3' } = v1'
                     and v1' = p3'
                     and v1' = v'
                     and (v1', p3') = (v1', v1')
                     and g = g { cont = p3' }
                     and v1' = v1'
                     in (v1', j, g)
                  in (0, j, g)
               in if c' > 0
                  then (c', j, g, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, g, r')
            in (c', g, i, j, r')
   in (r', i, j, g) -- g: gs1
cogent_ffi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_ffi36 (i, j, g1, g2) =
   let (_
       , g2
       , i
       , j
       , g1
       , r') = let (c'
                   , g2
                   , i) = let (v1'
                              , g2
                              , i) = let v' = g2
            and g2 { cont = p0' } = v'
            and v' = p0'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            and g2 = g2 { cont = p0' }
            in (v1', g2, i)
         in (0, g2, i)
      in if c' > 0
         then (c', g2, i, j, g1, r')
         else let (c'
                  , j
                  , g1
                  , r') = let (c'
                              , j
                              , g1) = let (v1'
                                          , j
                                          , g1) = let v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and j = j { cont = p2' }
                     and v' = v'
                     and v1' = g1
                     and g1 { cont = p3' } = v1'
                     and v1' = p3'
                     and v1' = v'
                     and (v1', p3') = (v1', v1')
                     and g1 = g1 { cont = p3' }
                     and v1' = v1'
                     in (v1', j, g1)
                  in (0, j, g1)
               in if c' > 0
                  then (c', j, g1, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, g1, r')
            in (c', g2, i, j, g1, r')
   in (r', i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_ffi41 : Heap -> ( U32, Heap )
cogent_ffi41 heap =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', heap) -- ffv41: hu
cogent_ffi42 : ( GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_ffi42 (g, heap) =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', g, heap) -- ffv41: hu, g: gs1
cogent_ffi43 : ( MayNull (CPtr U32), Heap ) -> ( U32, Heap )
cogent_ffi43 (i, heap) =
   let (_, i, r') = let (c'
                        , i) = let (v1', i) = let v' = 5
            and v1' = i
            and i { cont = p0' } = v1'
            and v1' = p0'
            and v1' = v'
            and (v1', p0') = (v1', v1')
            and i = i { cont = p0' }
            and v1' = v1'
            in (v1', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', heap) -- i: -ar, ffv43: hu
cogent_ffi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_ffi44 (i, heap) =
   let (_, i, r') = let (c'
                        , i) = let (v1', i) = let v' = 5
            and v1' = i
            and i { cont = p0' } = v1'
            and v1' = p0'
            and v1' = v'
            and (v1', p0') = (v1', v1')
            and i = i { cont = p0' }
            and v1' = v1'
            in (v1', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', i, heap) -- ffv44: hu
cogent_ffi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_ffi45 (i, g, heap) =
   let (_, i, g, r') = let (c'
                           , i
                           , g) = let (v1'
                                      , i
                                      , g) = let v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and i = i { cont = p0' }
            and v' = v'
            and v1' = g
            and g { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and g = g { cont = p1' }
            and v1' = v1'
            in (v1', i, g)
         in (0, i, g)
      in if c' > 0
         then (c', i, g, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, g, r')
   in (r', g, heap) -- i: -ar, g: gs1, ffv45: hu
cogent_ffi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi46 (i, g, heap) =
   let (_, g, i, r') = let (c'
                           , g
                           , i) = let (v1'
                                      , g
                                      , i) = let v' = g
            and g { cont = p0' } = v'
            and v' = p0'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            and g = g { cont = p0' }
            in (v1', g, i)
         in (0, g, i)
      in if c' > 0
         then (c', g, i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', g, i, r')
   in (r', i, g, heap) -- g: gs1, ffv46: hu
cogent_ffi47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_ffi47 (i, j, heap) =
   let (_, i, j, r') = let (c'
                           , i) = let (v1'
                                      , i) = let v' = gencotDummy "Cannot access global variable: glob1"
               {- *; -}
            and v1' = i
            and i { cont = p0' } = v1'
            and v1' = p0'
            and v1' = v'
            and (v1', p0') = (v1', v1')
            and i = i { cont = p0' }
            and v1' = v1'
            in (v1', i)
         in (0, i)
      in if c' > 0
         then (c', i, j, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v1', j) = let v' = j
                     and j { cont = p1' } = v'
                     and v' = p1'
                     and j = j { cont = p1' }
                     and v' = v'
                     and v1' = gencotDummy "Cannot access global variable: glob1"
                        {- *; -}
                     and v1' = v'
                     and (v1', err') = (v1', v1')
                     in (v1', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', i, j, r')
   in (r', i, j, heap) -- ffv47: hu (Error: no parameter for glob1)
cogent_ffi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi48 (i, j, g, heap) =
   let (_, g, i, j, r') = let (c'
                              , g
                              , i) = let (v1'
                                         , g
                                         , i) = let v' = g
            and g { cont = p0' } = v'
            and v' = p0'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            and g = g { cont = p0' }
            in (v1', g, i)
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j, r')
         else let (c'
                  , j
                  , g
                  , r') = let (c'
                              , j
                              , g) = let (v1'
                                         , j
                                         , g) = let v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and j = j { cont = p2' }
                     and v' = v'
                     and v1' = g
                     and g { cont = p3' } = v1'
                     and v1' = p3'
                     and v1' = v'
                     and (v1', p3') = (v1', v1')
                     and g = g { cont = p3' }
                     and v1' = v1'
                     in (v1', j, g)
                  in (0, j, g)
               in if c' > 0
                  then (c', j, g, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, g, r')
            in (c', g, i, j, r')
   in (r', i, j, g, heap) -- g: gs1, ffv48: hu
cogent_ffi49 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi49 (i, j, g, heap) =
   let (_, j, i, r') = let (c'
                           , j
                           , i) = let (v1'
                                      , j
                                      , i) = let v' = j
            and j { cont = p0' } = v'
            and v' = p0'
            and j = j { cont = p0' }
            and v' = v'
            and v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v'
            and (v1', p1') = (v1', v1')
            and i = i { cont = p1' }
            and v1' = v1'
            in (v1', j, i)
         in (0, j, i)
      in if c' > 0
         then (c', j, i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', j, i, r')
   in (r', i, j, g, heap) -- g: gs1, ffv49: hu


-- Function calls

cogent_cffv1 : () -> ()
cogent_cffv1 () =
   let _ = let v' = let v' = cogent_ffv1
         and v' = v' ()
         in v'
      in 0
   in ()

cogent_cffv11 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_cffv11 i =
   let _ = let v' = let v' = cogent_ffv11
         and v1' = i
         and v' = v' v1'
         in v'
      in 0
   in ((), i)
cogent_cffv12 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_cffv12 i =
   let (_, i) = let (v'
                    , i) = let v' = cogent_ffv12
         and v1' = i
         and (v', i) = v' v1'
         in (v', i)
      in (0, i)
   in ((), i)
cogent_cffv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv15 (i, j) =
   let _ = let v' = let v' = cogent_ffv15
         and v1' = i
         and v2' = j
         and v' = v' (v1', v2')
         in v'
      in 0
   in ((), i, j)
cogent_cffv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv16 (i, j) =
   let (_, i) = let (v'
                    , i) = let v' = cogent_ffv16
         and v1' = i
         and v2' = j
         and (v', i) = v' (v1', v2')
         in (v', i)
      in (0, i)
   in ((), i, j)
cogent_cffv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv17 (i, j) =
   let (_, j) = let (v'
                    , j) = let v' = cogent_ffv17
         and v1' = i
         and v2' = j
         and (v', j) = v' (v1', v2')
         in (v', j)
      in (0, j)
   in ((), i, j)
cogent_cffv18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv18 (i, j) =
   let (_, i, j) = let (v'
                       , i
                       , j) = let v' = cogent_ffv18
         and v1' = i
         and v2' = j
         and (v', i, j) = v' (v1', v2')
         in (v', i, j)
      in (0, i, j)
   in ((), i, j)

cogent_cffv21 : GlobState1 -> ( (), GlobState1 )
cogent_cffv21 g =
   let (_, g) = let (v'
                    , g) = let v' = cogent_ffv21
         and v1' = g
         and (v', g) = v' v1'
         in (v', g)
      in (0, g)
   in ((), g) -- g: gs1
cogent_cffv22 : GlobState1 -> ( (), GlobState1 )
cogent_cffv22 g =
   let _ = let v' = let v' = cogent_ffv22
         and v1' = gencotDummy "no context parameter for property gs2"
         and (v', err') = v' v1'
         in v'
      in 0
   in ((), g) -- g: gs1 (Error: no argument for gs2)
cogent_cffv23 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_cffv23 (g1, g2) =
   let (_, g1, g2) = let (v'
                         , g1
                         , g2) = let v' = cogent_ffv23
         and v1' = g1
         and v2' = g2
         and (v', g1, g2) = v' (v1', v2')
         in (v', g1, g2)
      in (0, g1, g2)
   in ((), g1, g2) -- g1: gs1, g2: gs2

cogent_cffv31 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_cffv31 (i, g) =
   let (_, g) = let (v'
                    , g) = let v' = cogent_ffv31
         and v1' = i
         and v2' = g
         and (v', g) = v' (v1', v2')
         in (v', g)
      in (0, g)
   in ((), i, g) -- g: gs1
cogent_cffv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_cffv32 (i, g) =
   let (_, i, g) = let (v'
                       , i
                       , g) = let v' = cogent_ffv32
         and v1' = i
         and v2' = g
         and (v', i, g) = v' (v1', v2')
         in (v', i, g)
      in (0, i, g)
   in ((), i, g) -- g: gs1
cogent_cffv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffv34 (i, j, g) =
   let (_, i, g) = let (v'
                       , i
                       , g) = let v' = cogent_ffv34
         and v1' = i
         and v2' = j
         and v3' = g
         and (v', i, g) = v' (v1'
                             , v2'
                             , v3')
         in (v', i, g)
      in (0, i, g)
   in ((), i, j, g) -- g: gs1
cogent_cffv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffv35 (i, j, g) =
   let (_, i, j, g) = let (v'
                          , i
                          , j
                          , g) = let v' = cogent_ffv35
         and v1' = i
         and v2' = j
         and v3' = g
         and (v', i, j, g) = v' (v1'
                                , v2'
                                , v3')
         in (v', i, j, g)
      in (0, i, j, g)
   in ((), i, j, g) -- g: gs1
cogent_cffv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cffv36 (i, j, g1, g2) =
   let (_, i, j, g1, g2) = let (v'
                               , i
                               , j
                               , g1
                               , g2) = let v' = cogent_ffv36
         and v1' = i
         and v2' = j
         and v3' = g1
         and v4' = g2
         and (v', i, j, g1, g2) = v' (v1'
                                     , v2'
                                     , v3'
                                     , v4')
         in (v', i, j, g1, g2)
      in (0, i, j, g1, g2)
   in ((), i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_cffv41 : Heap -> ( (), Heap )
cogent_cffv41 heap =
   let (_, heap) = let (v'
                       , heap) = let v' = cogent_ffv41
         and v1' = heap
         and (v', heap) = v' v1'
         in (v', heap)
      in (0, heap)
   in ((), heap) -- cffv41: hu
cogent_cffv42 : ( GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_cffv42 (g, heap) =
   let (_, g, heap) = let (v'
                          , g
                          , heap) = let v' = cogent_ffv42
         and v1' = g
         and v2' = heap
         and (v', g, heap) = v' (v1'
                                , v2')
         in (v', g, heap)
      in (0, g, heap)
   in ((), g, heap) -- cffv41: hu, g: gs1
cogent_cffv43 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_cffv43 (i, heap) =
   let (_, heap) = let (v'
                       , heap) = let v' = cogent_ffv43
         and v1' = i
         and v2' = heap
         and (v', heap) = v' (v1', v2')
         in (v', heap)
      in (0, heap)
   in ((), i, heap) -- cffv43: hu
cogent_cffv44 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_cffv44 (i, heap) =
   let (_, i, heap) = let (v'
                          , i
                          , heap) = let v' = cogent_ffv44
         and v1' = i
         and v2' = heap
         and (v', i, heap) = v' (v1'
                                , v2')
         in (v', i, heap)
      in (0, i, heap)
   in ((), i, heap) -- cffv44: hu
cogent_cffv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv45 (i, g, heap) =
   let (_, g, heap) = let (v'
                          , g
                          , heap) = let v' = cogent_ffv45
         and v1' = i
         and v2' = g
         and v3' = heap
         and (v', g, heap) = v' (v1'
                                , v2'
                                , v3')
         in (v', g, heap)
      in (0, g, heap)
   in ((), i, g, heap) -- g: gs1, cffv45: hu
cogent_cffv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv46 (i, g, heap) =
   let (_, i, g, heap) = let (v'
                             , i
                             , g
                             , heap) = let v' = cogent_ffv46
         and v1' = i
         and v2' = g
         and v3' = heap
         and (v', i, g, heap) = v' (v1'
                                   , v2'
                                   , v3')
         in (v', i, g, heap)
      in (0, i, g, heap)
   in ((), i, g, heap) -- g: gs1, cffv46: hu
cogent_cffv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_cffv47 (i, j, heap) =
   let (_, i, j, heap) = let (v'
                             , i
                             , j
                             , heap) = let v' = cogent_ffv47
         and v1' = i
         and v2' = j
         and v3' = heap
         and (v', i, j, heap) = v' (v1'
                                   , v2'
                                   , v3')
         in (v', i, j, heap)
      in (0, i, j, heap)
   in ((), i, j, heap) -- cffv47: hu
cogent_cffv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv48 (i, j, g, heap) =
   let (_, i, j, g, heap) = let (v'
                                , i
                                , j
                                , g
                                , heap) = let v' = cogent_ffv48
         and v1' = i
         and v2' = j
         and v3' = g
         and v4' = heap
         and (v'
             , i
             , j
             , g
             , heap) = v' (v1'
                          , v2'
                          , v3'
                          , v4')
         in (v', i, j, g, heap)
      in (0, i, j, g, heap)
   in ((), i, j, g, heap) -- g: gs1, cffv48: hu

cogent_cffi1 : () -> U32
cogent_cffi1 () =
   let (_
       , r') = let v' = let v' = cogent_ffi1
         and v' = v' ()
         in v'
      in (3, v')
   in r'

cogent_cffi11 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_cffi11 i =
   let (_
       , r') = let v' = let v' = cogent_ffi11
         and v1' = i
         and v' = v' v1'
         in v'
      in (3, v')
   in (r', i)
cogent_cffi12 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_cffi12 i =
   let (_, r', i) = let (v'
                        , i) = let v' = cogent_ffi12
         and v1' = i
         and (v', i) = v' v1'
         in (v', i)
      in (3, v', i)
   in (r', i)
cogent_cffi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi15 (i, j) =
   let (_
       , r') = let v' = let v' = cogent_ffi15
         and v1' = i
         and v2' = j
         and v' = v' (v1', v2')
         in v'
      in (3, v')
   in (r', i, j)
cogent_cffi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi16 (i, j) =
   let (_, r', i) = let (v'
                        , i) = let v' = cogent_ffi16
         and v1' = i
         and v2' = j
         and (v', i) = v' (v1', v2')
         in (v', i)
      in (3, v', i)
   in (r', i, j)
cogent_cffi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi17 (i, j) =
   let (_, r', j) = let (v'
                        , j) = let v' = cogent_ffi17
         and v1' = i
         and v2' = j
         and (v', j) = v' (v1', v2')
         in (v', j)
      in (3, v', j)
   in (r', i, j)
cogent_cffi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi18 (i, j) =
   let (_, r', i, j) = let (v'
                           , i
                           , j) = let v' = cogent_ffi18
         and v1' = i
         and v2' = j
         and (v', i, j) = v' (v1', v2')
         in (v', i, j)
      in (3, v', i, j)
   in (r', i, j)

cogent_cffi21 : GlobState1 -> ( U32, GlobState1 )
cogent_cffi21 g =
   let (_, r', g) = let (v'
                        , g) = let v' = cogent_ffi21
         and v1' = g
         and (v', g) = v' v1'
         in (v', g)
      in (3, v', g)
   in (r', g) -- g: gs1
cogent_cffi22 : GlobState2 -> ( U32, GlobState2 )
cogent_cffi22 g =
   let (_, r', g) = let (v'
                        , g) = let v' = cogent_ffi22
         and v1' = g
         and (v', g) = v' v1'
         in (v', g)
      in (3, v', g)
   in (r', g) -- g: gs2
cogent_cffi23 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_cffi23 (g1, g2) =
   let (_, r', g1, g2) = let (v'
                             , g1
                             , g2) = let v' = cogent_ffi23
         and v1' = g1
         and v2' = g2
         and (v', g1, g2) = v' (v1', v2')
         in (v', g1, g2)
      in (3, v', g1, g2)
   in (r', g1, g2) -- g1: gs1, g2: gs2

cogent_cffi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_cffi31 (i, g) =
   let (_, r', g) = let (v'
                        , g) = let v' = cogent_ffi31
         and v1' = i
         and v2' = g
         and (v', g) = v' (v1', v2')
         in (v', g)
      in (3, v', g)
   in (r', i, g) -- g: gs1
cogent_cffi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_cffi32 (i, g) =
   let (_, r', i, g) = let (v'
                           , i
                           , g) = let v' = cogent_ffi32
         and v1' = i
         and v2' = g
         and (v', i, g) = v' (v1', v2')
         in (v', i, g)
      in (3, v', i, g)
   in (r', i, g) -- g: gs1
cogent_cffi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffi34 (i, j, g) =
   let (_, r', i, g) = let (v'
                           , i
                           , g) = let v' = cogent_ffi34
         and v1' = i
         and v2' = j
         and v3' = g
         and (v', i, g) = v' (v1'
                             , v2'
                             , v3')
         in (v', i, g)
      in (3, v', i, g)
   in (r', i, j, g) -- g: gs1
cogent_cffi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffi35 (i, j, g) =
   let (_, r', i, j, g) = let (v'
                              , i
                              , j
                              , g) = let v' = cogent_ffi35
         and v1' = i
         and v2' = j
         and v3' = g
         and (v', i, j, g) = v' (v1'
                                , v2'
                                , v3')
         in (v', i, j, g)
      in (3, v', i, j, g)
   in (r', i, j, g) -- g: gs1
cogent_cffi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cffi36 (i, j, g1, g2) =
   let (_
       , r'
       , i
       , j
       , g1
       , g2) = let (v'
                   , i
                   , j
                   , g1
                   , g2) = let v' = cogent_ffi36
         and v1' = i
         and v2' = j
         and v3' = g1
         and v4' = g2
         and (v', i, j, g1, g2) = v' (v1'
                                     , v2'
                                     , v3'
                                     , v4')
         in (v', i, j, g1, g2)
      in (3, v', i, j, g1, g2)
   in (r', i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_cffi41 : Heap -> ( U32, Heap )
cogent_cffi41 heap =
   let (_, r', heap) = let (v'
                           , heap) = let v' = cogent_ffi41
         and v1' = heap
         and (v', heap) = v' v1'
         in (v', heap)
      in (3, v', heap)
   in (r', heap) -- cffv41: hu
cogent_cffi42 : ( GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_cffi42 (g, heap) =
   let (_, r', g, heap) = let (v'
                              , g
                              , heap) = let v' = cogent_ffi42
         and v1' = g
         and v2' = heap
         and (v', g, heap) = v' (v1'
                                , v2')
         in (v', g, heap)
      in (3, v', g, heap)
   in (r', g, heap) -- cffv41: hu, g: gs1
cogent_cffi43 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_cffi43 (i, heap) =
   let (_, r', heap) = let (v'
                           , heap) = let v' = cogent_ffi43
         and v1' = i
         and v2' = heap
         and (v', heap) = v' (v1', v2')
         in (v', heap)
      in (3, v', heap)
   in (r', i, heap) -- cffv43: hu
cogent_cffi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_cffi44 (i, heap) =
   let (_, r', i, heap) = let (v'
                              , i
                              , heap) = let v' = cogent_ffi44
         and v1' = i
         and v2' = heap
         and (v', i, heap) = v' (v1'
                                , v2')
         in (v', i, heap)
      in (3, v', i, heap)
   in (r', i, heap) -- cffv44: hu
cogent_cffi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi45 (i, g, heap) =
   let (_, r', g, heap) = let (v'
                              , g
                              , heap) = let v' = cogent_ffi45
         and v1' = i
         and v2' = g
         and v3' = heap
         and (v', g, heap) = v' (v1'
                                , v2'
                                , v3')
         in (v', g, heap)
      in (3, v', g, heap)
   in (r', i, g, heap) -- g: gs1, cffv45: hu
cogent_cffi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi46 (i
              , heap
              , globheap1) =
   let (_
       , r'
       , i
       , heap
       , globheap1) = let (v'
                          , i
                          , heap
                          , globheap1) = let v' = cogent_ffi46
         and v1' = i
         and v2' = heap
         and v3' = globheap1
         and (v'
             , i
             , heap
             , globheap1) = v' (v1'
                               , v2'
                               , v3')
         in (v', i, heap, globheap1)
      in (3, v', i, heap, globheap1)
   in (r', i, heap, globheap1) -- heap: gs1, cffv46: hu
cogent_cffi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi48 (i, j, g, heap) =
   let (_
       , r'
       , i
       , j
       , g
       , heap) = let (v'
                     , i
                     , j
                     , g
                     , heap) = let v' = cogent_ffi48
         and v1' = i
         and v2' = j
         and v3' = g
         and v4' = heap
         and (v'
             , i
             , j
             , g
             , heap) = v' (v1'
                          , v2'
                          , v3'
                          , v4')
         in (v', i, j, g, heap)
      in (3, v', i, j, g, heap)
   in (r', i, j, g, heap) -- g: gs1, cffv48: hu
cogent_cffi49 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi49 (i, j, g, heap) =
   let (_
       , r'
       , i
       , j
       , g
       , heap) = let (v'
                     , i
                     , j
                     , g
                     , heap) = let v' = cogent_ffi49
         and v1' = i
         and v2' = j
         and v3' = g
         and v4' = heap
         and (v'
             , i
             , j
             , g
             , heap) = v' (v1'
                          , v2'
                          , v3'
                          , v4')
         in (v', i, j, g, heap)
      in (3, v', i, j, g, heap)
   in (r', i, j, g, heap) -- g: gs1, cffv49: hu
