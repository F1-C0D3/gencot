-- Function definitions

cogent_ffv1 : () -> ()
cogent_ffv1 () =
   let c' = 0
   in ()
cogent_ffv2 : () -> ()
cogent_ffv2 () =
   let (c', r') = let v' = ()
      in (3, v')
   in ()

cogent_ffv11 : MayNull (CPtr U32) -> ()
cogent_ffv11 i =
   let c' = 0
   in () -- i: -ar
cogent_ffv12 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_ffv12 i =
   let c' = 0
   in ((), i)
cogent_ffv13 : MayNull (CPtr U32) -> ()
cogent_ffv13 i =
   let (c', i) = let v' = 5
      and v1' = i
      and i { cont = p0' } = v1'
      and v2' = p0'
      and v3' = v'
      and (v4', p0') = (v3', v3')
      and i = i { cont = p0' }
      in (0, i)
   in () -- i: -ar
cogent_ffv14 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_ffv14 i =
   let (c', i) = let v' = 5
      and v1' = i
      and i { cont = p0' } = v1'
      and v2' = p0'
      and v3' = v'
      and (v4', p0') = (v3', v3')
      and i = i { cont = p0' }
      in (0, i)
   in ((), i)
cogent_ffv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ()
cogent_ffv15 (i, j) =
   let (c', j, i) = let (c'
                        , j
                        , i) = let v' = j
         and j { cont = p0' } = v'
         and v1' = p0'
         and j = j { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, j, i)
      in if c' > 0
         then (c', j, i)
         else let (c', j) = let v6' = 5
               and v7' = j
               and j { cont = p2' } = v7'
               and v8' = p2'
               and v9' = v6'
               and (v10', p2') = (v9', v9')
               and j = j { cont = p2' }
               in (0, j)
            in (c', j, i)
   in () -- i: -ar, j: -ar
cogent_ffv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_ffv16 (i, j) =
   let (c', j, i) = let (c'
                        , j
                        , i) = let v' = j
         and j { cont = p0' } = v'
         and v1' = p0'
         and j = j { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, j, i)
      in if c' > 0
         then (c', j, i)
         else let (c', j) = let v6' = 5
               and v7' = j
               and j { cont = p2' } = v7'
               and v8' = p2'
               and v9' = v6'
               and (v10', p2') = (v9', v9')
               and j = j { cont = p2' }
               in (0, j)
            in (c', j, i)
   in ((), i) -- j: -ar
cogent_ffv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_ffv17 (i, j) =
   let (c', j, i) = let (c'
                        , j
                        , i) = let v' = j
         and j { cont = p0' } = v'
         and v1' = p0'
         and j = j { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, j, i)
      in if c' > 0
         then (c', j, i)
         else let (c', j) = let v6' = 5
               and v7' = j
               and j { cont = p2' } = v7'
               and v8' = p2'
               and v9' = v6'
               and (v10', p2') = (v9', v9')
               and j = j { cont = p2' }
               in (0, j)
            in (c', j, i)
   in ((), j) -- i: -ar
cogent_ffv18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_ffv18 (i, j) =
   let (c', j, i) = let (c'
                        , j
                        , i) = let v' = j
         and j { cont = p0' } = v'
         and v1' = p0'
         and j = j { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, j, i)
      in if c' > 0
         then (c', j, i)
         else let (c', j) = let v6' = 5
               and v7' = j
               and j { cont = p2' } = v7'
               and v8' = p2'
               and v9' = v6'
               and (v10', p2') = (v9', v9')
               and j = j { cont = p2' }
               in (0, j)
            in (c', j, i)
   in ((), i, j)

type GlobState1 = CPtr U32 -- glob1: gs1
type GlobState2 = CPtr U32 -- glob2: gs2

cogent_ffv21 : GlobState1 -> ( (), GlobState1 )
cogent_ffv21 g =
   let c' = 0
   in ((), g) -- g: gs1
cogent_ffv22 : GlobState2 -> ( (), GlobState2 )
cogent_ffv22 g =
   let c' = 0
   in ((), g) -- g: gs2
cogent_ffv23 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv23 (g1, g2) =
   let c' = 0
   in ((), g1, g2) -- g1: gs1, g2: gs2
cogent_ffv24 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv24 (g1, g2) =
   let c' = 0
   in ((), g1, g2) -- g2: gs2, g1: gs1
cogent_ffv25 : GlobState1 -> ( (), GlobState1 )
cogent_ffv25 g =
   let (c', g) = let v' = 5
      and v1' = g
      and g { cont = p0' } = v1'
      and v2' = p0'
      and v3' = v'
      and (v4', p0') = (v3', v3')
      and g = g { cont = p0' }
      in (0, g)
   in ((), g) -- g: gs1
cogent_ffv26 : GlobState1 -> ( (), GlobState1 )
cogent_ffv26 g =
   let c' = let v' = 5
      and v1' = gencotDummy "Cannot access global variable: glob2"
         {- *; -}
      and v2' = v'
      and (v3', err') = (v2', v2')
      in 0
   in ((), g) -- g: gs1 (!)
cogent_ffv27 : GlobState1 -> ( (), GlobState1 )
cogent_ffv27 g =
   let (c', g) = let v' = 1
      and v1' = g
      and g { cont = p0' } = v1'
      and v2' = p0'
      and v3' = v2' + v'
      and (v4', p0') = (p0', v3')
      and g = g { cont = p0' }
      in (0, g)
   in ((), g) -- g: gs1
cogent_ffv28 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv28 (g1, g2) =
   let (c', g2, g1) = let v' = g2
      and g2 { cont = p0' } = v'
      and v1' = p0'
      and g2 = g2 { cont = p0' }
      and v2' = g1
      and g1 { cont = p1' } = v2'
      and v3' = p1'
      and v4' = v1'
      and (v5', p1') = (v4', v4')
      and g1 = g1 { cont = p1' }
      in (0, g2, g1)
   in ((), g1, g2) -- g1: gs1, g2: gs2
cogent_ffv29 : GlobState1! -> ()
cogent_ffv29 g1 =
   let (c', g1) = let v' = 5
      and v1' = g1
      and g1 { cont = p0' } = v1'
      and v2' = p0'
      and v3' = v'
      and (v4', p0') = (v3', v3')
      and g1 = g1 { cont = p0' }
      in (0, g1)
   in () -- g: gs1 ro

cogent_ffv31 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), GlobState1 )
cogent_ffv31 (i, g) =
   let (c', i, g) = let v' = i
      and i { cont = p0' } = v'
      and v1' = p0'
      and i = i { cont = p0' }
      and v2' = g
      and g { cont = p1' } = v2'
      and v3' = p1'
      and v4' = v1'
      and (v5', p1') = (v4', v4')
      and g = g { cont = p1' }
      in (0, i, g)
   in ((), g) -- i: -ar, g: gs1
cogent_ffv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv32 (i, g) =
   let (c', g, i) = let v' = g
      and g { cont = p0' } = v'
      and v1' = p0'
      and g = g { cont = p0' }
      and v2' = i
      and i { cont = p1' } = v2'
      and v3' = p1'
      and v4' = v1'
      and (v5', p1') = (v4', v4')
      and i = i { cont = p1' }
      in (0, g, i)
   in ((), i, g) -- g: gs1
cogent_ffv33 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv33 (i, g) =
   let (c', g, i) = let v' = 1
      and v1' = g
      and g { cont = p0' } = v1'
      and v2' = p0'
      and v3' = v2' + v'
      and (v4', p0') = (p0', v3')
      and g = g { cont = p0' }
      and v5' = i
      and i { cont = p1' } = v5'
      and v6' = p1'
      and v7' = v4'
      and (v8', p1') = (v7', v7')
      and i = i { cont = p1' }
      in (0, g, i)
   in ((), i, g) -- g: gs1
cogent_ffv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv34 (i, j, g) =
   let (c', g, i, j) = let (c'
                           , g
                           , i) = let v' = g
         and g { cont = p0' } = v'
         and v1' = p0'
         and g = g { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j)
         else let (c'
                  , j
                  , g) = let v6' = j
               and j { cont = p2' } = v6'
               and v7' = p2'
               and j = j { cont = p2' }
               and v8' = g
               and g { cont = p3' } = v8'
               and v9' = p3'
               and v10' = v7'
               and (v11', p3') = (v10', v10')
               and g = g { cont = p3' }
               in (0, j, g)
            in (c', g, i, j)
   in ((), i, g) -- j: -ar, g: gs1
cogent_ffv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_ffv35 (i, j, g) =
   let (c', g, i, j) = let (c'
                           , g
                           , i) = let v' = g
         and g { cont = p0' } = v'
         and v1' = p0'
         and g = g { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j)
         else let (c'
                  , j
                  , g) = let v6' = j
               and j { cont = p2' } = v6'
               and v7' = p2'
               and j = j { cont = p2' }
               and v8' = g
               and g { cont = p3' } = v8'
               and v9' = p3'
               and v10' = v7'
               and (v11', p3') = (v10', v10')
               and g = g { cont = p3' }
               in (0, j, g)
            in (c', g, i, j)
   in ((), i, j, g) -- g: gs1
cogent_ffv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_ffv36 (i, j, g1, g2) =
   let (c', g1, i, j, g2) = let (c'
                                , g1
                                , i) = let v' = g1
         and g1 { cont = p0' } = v'
         and v1' = p0'
         and g1 = g1 { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, g1, i)
      in if c' > 0
         then (c', g1, i, j, g2)
         else let (c'
                  , j
                  , g2) = let v6' = j
               and j { cont = p2' } = v6'
               and v7' = p2'
               and j = j { cont = p2' }
               and v8' = g2
               and g2 { cont = p3' } = v8'
               and v9' = p3'
               and v10' = v7'
               and (v11', p3') = (v10', v10')
               and g2 = g2 { cont = p3' }
               in (0, j, g2)
            in (c', g1, i, j, g2)
   in ((), i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_ffv41 : Heap -> ( (), Heap )
cogent_ffv41 heap =
   let c' = 0
   in ((), heap) -- ffv41: hu
cogent_ffv42 : ( GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_ffv42 (g, heap) =
   let c' = 0
   in ((), g, heap) -- ffv42: hu, g: gs1
cogent_ffv43 : ( MayNull (CPtr U32), Heap ) -> ( (), Heap )
cogent_ffv43 (i, heap) =
   let (c', i) = let v' = 5
      and v1' = i
      and i { cont = p0' } = v1'
      and v2' = p0'
      and v3' = v'
      and (v4', p0') = (v3', v3')
      and i = i { cont = p0' }
      in (0, i)
   in ((), heap) -- i: -ar, ffv43: hu
cogent_ffv44 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_ffv44 (i, heap) =
   let (c', i) = let v' = 5
      and v1' = i
      and i { cont = p0' } = v1'
      and v2' = p0'
      and v3' = v'
      and (v4', p0') = (v3', v3')
      and i = i { cont = p0' }
      in (0, i)
   in ((), i, heap) -- ffv44: hu
cogent_ffv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_ffv45 (i, g, heap) =
   let (c', i, g) = let v' = i
      and i { cont = p0' } = v'
      and v1' = p0'
      and i = i { cont = p0' }
      and v2' = g
      and g { cont = p1' } = v2'
      and v3' = p1'
      and v4' = v1'
      and (v5', p1') = (v4', v4')
      and g = g { cont = p1' }
      in (0, i, g)
   in ((), g, heap) -- i: -ar, g: gs1, ffv45: hu
cogent_ffv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffv46 (i, g, heap) =
   let (c', g, i) = let v' = g
      and g { cont = p0' } = v'
      and v1' = p0'
      and g = g { cont = p0' }
      and v2' = i
      and i { cont = p1' } = v2'
      and v3' = p1'
      and v4' = v1'
      and (v5', p1') = (v4', v4')
      and i = i { cont = p1' }
      in (0, g, i)
   in ((), i, g, heap) -- g: gs1, ffv46: hu
cogent_ffv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_ffv47 (i, j, heap) =
   let (c', i, j) = let (c'
                        , i) = let v' = gencotDummy "Cannot access global variable: glob1"
            {- *i = *; -}
         and v1' = i
         and i { cont = p0' } = v1'
         and v2' = p0'
         and v3' = v'
         and (v4', p0') = (v3', v3')
         and i = i { cont = p0' }
         in (0, i)
      in if c' > 0
         then (c', i, j)
         else let (c', j) = let v5' = j
               and j { cont = p1' } = v5'
               and v6' = p1'
               and j = j { cont = p1' }
               and v7' = gencotDummy "Cannot access global variable: glob1"
                  {- *; -}
               and v8' = v6'
               and (v9', err') = (v8', v8')
               in (0, j)
            in (c', i, j)
   in ((), i, j, heap) -- ffv47: hu
cogent_ffv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffv48 (i, j, g, heap) =
   let (c', g, i, j) = let (c'
                           , g
                           , i) = let v' = g
         and g { cont = p0' } = v'
         and v1' = p0'
         and g = g { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j)
         else let (c'
                  , j
                  , g) = let v6' = j
               and j { cont = p2' } = v6'
               and v7' = p2'
               and j = j { cont = p2' }
               and v8' = g
               and g { cont = p3' } = v8'
               and v9' = p3'
               and v10' = v7'
               and (v11', p3') = (v10', v10')
               and g = g { cont = p3' }
               in (0, j, g)
            in (c', g, i, j)
   in ((), i, j, g, heap) -- g: gs1, ffv48: hu


cogent_ffi1 : () -> U32
cogent_ffi1 () =
   let (c', r') = let v' = 5
      in (3, v')
   in r'

cogent_ffi11 : MayNull (CPtr U32) -> U32
cogent_ffi11 i =
   let (c', r') = let v' = 5
      in (3, v')
   in r' -- i: -ar
cogent_ffi12 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_ffi12 i =
   let (c', r') = let v' = 5
      in (3, v')
   in (r', i)
cogent_ffi13 : MayNull (CPtr U32) -> U32
cogent_ffi13 i =
   let (c', i, r') = let (c'
                         , i) = let v' = 5
         and v1' = i
         and i { cont = p0' } = v1'
         and v2' = p0'
         and v3' = v'
         and (v4', p0') = (v3', v3')
         and i = i { cont = p0' }
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v5' = 2
               in (3, v5')
            in (c', i, r')
   in r' -- i: -ar 
cogent_ffi14 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_ffi14 i =
   let (c', i, r') = let (c'
                         , i) = let v' = 5
         and v1' = i
         and i { cont = p0' } = v1'
         and v2' = p0'
         and v3' = v'
         and (v4', p0') = (v3', v3')
         and i = i { cont = p0' }
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v5' = 2
               in (3, v5')
            in (c', i, r')
   in (r', i)
cogent_ffi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> U32
cogent_ffi15 (i, j) =
   let (c', j, i, r') = let (c'
                            , j
                            , i) = let v' = j
         and j { cont = p0' } = v'
         and v1' = p0'
         and j = j { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, j, i)
      in if c' > 0
         then (c', j, i, r')
         else let (c', j, r') = let (c'
                                    , j) = let v6' = 5
                  and v7' = j
                  and j { cont = p2' } = v7'
                  and v8' = p2'
                  and v9' = v6'
                  and (v10', p2') = (v9', v9')
                  and j = j { cont = p2' }
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c', r') = let v11' = 2
                        in (3, v11')
                     in (c', j, r')
            in (c', j, i, r')
   in r' -- i: -ar, j: -ar 
cogent_ffi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_ffi16 (i, j) =
   let (c', j, i, r') = let (c'
                            , j
                            , i) = let v' = j
         and j { cont = p0' } = v'
         and v1' = p0'
         and j = j { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, j, i)
      in if c' > 0
         then (c', j, i, r')
         else let (c', j, r') = let (c'
                                    , j) = let v6' = 5
                  and v7' = j
                  and j { cont = p2' } = v7'
                  and v8' = p2'
                  and v9' = v6'
                  and (v10', p2') = (v9', v9')
                  and j = j { cont = p2' }
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c', r') = let v11' = 2
                        in (3, v11')
                     in (c', j, r')
            in (c', j, i, r')
   in (r', i) -- j: -ar
cogent_ffi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_ffi17 (i, j) =
   let (c', j, i, r') = let (c'
                            , j
                            , i) = let v' = j
         and j { cont = p0' } = v'
         and v1' = p0'
         and j = j { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, j, i)
      in if c' > 0
         then (c', j, i, r')
         else let (c', j, r') = let (c'
                                    , j) = let v6' = 5
                  and v7' = j
                  and j { cont = p2' } = v7'
                  and v8' = p2'
                  and v9' = v6'
                  and (v10', p2') = (v9', v9')
                  and j = j { cont = p2' }
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c', r') = let v11' = 2
                        in (3, v11')
                     in (c', j, r')
            in (c', j, i, r')
   in (r', j) -- i: -ar
cogent_ffi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_ffi18 (i, j) =
   let (c', j, i, r') = let (c'
                            , j
                            , i) = let v' = j
         and j { cont = p0' } = v'
         and v1' = p0'
         and j = j { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, j, i)
      in if c' > 0
         then (c', j, i, r')
         else let (c', j, r') = let (c'
                                    , j) = let v6' = 5
                  and v7' = j
                  and j { cont = p2' } = v7'
                  and v8' = p2'
                  and v9' = v6'
                  and (v10', p2') = (v9', v9')
                  and j = j { cont = p2' }
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c', r') = let v11' = 2
                        in (3, v11')
                     in (c', j, r')
            in (c', j, i, r')
   in (r', i, j)

cogent_ffi21 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi21 g =
   let (c', r') = let v' = 5
      in (3, v')
   in (r', g) -- g: gs1
cogent_ffi22 : GlobState2 -> ( U32, GlobState2 )
cogent_ffi22 g =
   let (c', r') = let v' = 5
      in (3, v')
   in (r', g) -- g: gs2
cogent_ffi23 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi23 (g1, g2) =
   let (c', r') = let v' = 5
      in (3, v')
   in (r', g1, g2) -- g1: gs1, g2: gs2
cogent_ffi24 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi24 (g1, g2) =
   let (c', r') = let v' = 5
      in (3, v')
   in (r', g1, g2) -- g2: gs2, g1: gs1
cogent_ffi25 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi25 g =
   let (c', g, r') = let (c'
                         , g) = let v' = 5
         and v1' = g
         and g { cont = p0' } = v1'
         and v2' = p0'
         and v3' = v'
         and (v4', p0') = (v3', v3')
         and g = g { cont = p0' }
         in (0, g)
      in if c' > 0
         then (c', g, r')
         else let (c', r') = let v5' = 2
               in (3, v5')
            in (c', g, r')
   in (r', g) -- g: gs1
cogent_ffi26 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi26 g =
   let (c'
       , r') = let c' = let v' = 5
         and v1' = gencotDummy "Cannot access global variable: glob2"
            {- *; -}
         and v2' = v'
         and (v3', err') = (v2', v2')
         in 0
      in if c' > 0
         then (c', r')
         else let (c', r') = let v4' = 2
               in (3, v4')
            in (c', r')
   in (r', g) -- g: gs1 (!)
cogent_ffi27 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi27 g =
   let (c', g, r') = let (c'
                         , g) = let v' = 1
         and v1' = g
         and g { cont = p0' } = v1'
         and v2' = p0'
         and v3' = v2' + v'
         and (v4', p0') = (p0', v3')
         and g = g { cont = p0' }
         in (0, g)
      in if c' > 0
         then (c', g, r')
         else let (c', r') = let v5' = 2
               in (3, v5')
            in (c', g, r')
   in (r', g) -- g: gs1
cogent_ffi28 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi28 (g1, g2) =
   let (c', g2, g1, r') = let (c'
                              , g2
                              , g1) = let v' = g2
         and g2 { cont = p0' } = v'
         and v1' = p0'
         and g2 = g2 { cont = p0' }
         and v2' = g1
         and g1 { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and g1 = g1 { cont = p1' }
         in (0, g2, g1)
      in if c' > 0
         then (c', g2, g1, r')
         else let (c', r') = let v6' = 2
               in (3, v6')
            in (c', g2, g1, r')
   in (r', g1, g2) -- g1: gs1, g2: gs2

cogent_ffi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, GlobState1 )
cogent_ffi31 (i, g) =
   let (c', i, g, r') = let (c'
                            , i
                            , g) = let v' = i
         and i { cont = p0' } = v'
         and v1' = p0'
         and i = i { cont = p0' }
         and v2' = g
         and g { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and g = g { cont = p1' }
         in (0, i, g)
      in if c' > 0
         then (c', i, g, r')
         else let (c', r') = let v6' = 2
               in (3, v6')
            in (c', i, g, r')
   in (r', g) -- i: -ar, g: gs1
cogent_ffi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi32 (i, g) =
   let (c', g, i, r') = let (c'
                            , g
                            , i) = let v' = g
         and g { cont = p0' } = v'
         and v1' = p0'
         and g = g { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, g, i)
      in if c' > 0
         then (c', g, i, r')
         else let (c', r') = let v6' = 2
               in (3, v6')
            in (c', g, i, r')
   in (r', i, g) -- g: gs1
cogent_ffi33 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi33 (i, g) =
   let (c', g, i, r') = let (c'
                            , g
                            , i) = let v' = 1
         and v1' = g
         and g { cont = p0' } = v1'
         and v2' = p0'
         and v3' = v2' + v'
         and (v4', p0') = (p0', v3')
         and g = g { cont = p0' }
         and v5' = i
         and i { cont = p1' } = v5'
         and v6' = p1'
         and v7' = v4'
         and (v8', p1') = (v7', v7')
         and i = i { cont = p1' }
         in (0, g, i)
      in if c' > 0
         then (c', g, i, r')
         else let (c', r') = let v9' = 2
               in (3, v9')
            in (c', g, i, r')
   in (r', i, g) -- g: gs1
cogent_ffi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi34 (i, j, g) =
   let (c', g, i, j, r') = let (c'
                               , g
                               , i) = let v' = g
         and g { cont = p0' } = v'
         and v1' = p0'
         and g = g { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j, r')
         else let (c'
                  , j
                  , g
                  , r') = let (c'
                              , j
                              , g) = let v6' = j
                  and j { cont = p2' } = v6'
                  and v7' = p2'
                  and j = j { cont = p2' }
                  and v8' = g
                  and g { cont = p3' } = v8'
                  and v9' = p3'
                  and v10' = v7'
                  and (v11', p3') = (v10', v10')
                  and g = g { cont = p3' }
                  in (0, j, g)
               in if c' > 0
                  then (c', j, g, r')
                  else let (c', r') = let v12' = 2
                        in (3, v12')
                     in (c', j, g, r')
            in (c', g, i, j, r')
   in (r', i, g) -- j: -ar, g: gs1
cogent_ffi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_ffi35 (i, j, g) =
   let (c', g, i, j, r') = let (c'
                               , g
                               , i) = let v' = g
         and g { cont = p0' } = v'
         and v1' = p0'
         and g = g { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j, r')
         else let (c'
                  , j
                  , g
                  , r') = let (c'
                              , j
                              , g) = let v6' = j
                  and j { cont = p2' } = v6'
                  and v7' = p2'
                  and j = j { cont = p2' }
                  and v8' = g
                  and g { cont = p3' } = v8'
                  and v9' = p3'
                  and v10' = v7'
                  and (v11', p3') = (v10', v10')
                  and g = g { cont = p3' }
                  in (0, j, g)
               in if c' > 0
                  then (c', j, g, r')
                  else let (c', r') = let v12' = 2
                        in (3, v12')
                     in (c', j, g, r')
            in (c', g, i, j, r')
   in (r', i, j, g) -- g: gs1
cogent_ffi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_ffi36 (i, j, g1, g2) =
   let (c'
       , g2
       , i
       , j
       , g1
       , r') = let (c'
                   , g2
                   , i) = let v' = g2
         and g2 { cont = p0' } = v'
         and v1' = p0'
         and g2 = g2 { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, g2, i)
      in if c' > 0
         then (c', g2, i, j, g1, r')
         else let (c'
                  , j
                  , g1
                  , r') = let (c'
                              , j
                              , g1) = let v6' = j
                  and j { cont = p2' } = v6'
                  and v7' = p2'
                  and j = j { cont = p2' }
                  and v8' = g1
                  and g1 { cont = p3' } = v8'
                  and v9' = p3'
                  and v10' = v7'
                  and (v11', p3') = (v10', v10')
                  and g1 = g1 { cont = p3' }
                  in (0, j, g1)
               in if c' > 0
                  then (c', j, g1, r')
                  else let (c', r') = let v12' = 2
                        in (3, v12')
                     in (c', j, g1, r')
            in (c', g2, i, j, g1, r')
   in (r', i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_ffi41 : Heap -> ( U32, Heap )
cogent_ffi41 heap =
   let (c', r') = let v' = 5
      in (3, v')
   in (r', heap) -- ffv41: hu
cogent_ffi42 : ( GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_ffi42 (g, heap) =
   let (c', r') = let v' = 5
      in (3, v')
   in (r', g, heap) -- ffv41: hu, g: gs1
cogent_ffi43 : ( MayNull (CPtr U32), Heap ) -> ( U32, Heap )
cogent_ffi43 (i, heap) =
   let (c', i, r') = let (c'
                         , i) = let v' = 5
         and v1' = i
         and i { cont = p0' } = v1'
         and v2' = p0'
         and v3' = v'
         and (v4', p0') = (v3', v3')
         and i = i { cont = p0' }
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v5' = 2
               in (3, v5')
            in (c', i, r')
   in (r', heap) -- i: -ar, ffv43: hu
cogent_ffi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_ffi44 (i, heap) =
   let (c', i, r') = let (c'
                         , i) = let v' = 5
         and v1' = i
         and i { cont = p0' } = v1'
         and v2' = p0'
         and v3' = v'
         and (v4', p0') = (v3', v3')
         and i = i { cont = p0' }
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c', r') = let v5' = 2
               in (3, v5')
            in (c', i, r')
   in (r', i, heap) -- ffv44: hu
cogent_ffi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_ffi45 (i, g, heap) =
   let (c', i, g, r') = let (c'
                            , i
                            , g) = let v' = i
         and i { cont = p0' } = v'
         and v1' = p0'
         and i = i { cont = p0' }
         and v2' = g
         and g { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and g = g { cont = p1' }
         in (0, i, g)
      in if c' > 0
         then (c', i, g, r')
         else let (c', r') = let v6' = 2
               in (3, v6')
            in (c', i, g, r')
   in (r', g, heap) -- i: -ar, g: gs1, ffv45: hu
cogent_ffi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi46 (i, g, heap) =
   let (c', g, i, r') = let (c'
                            , g
                            , i) = let v' = g
         and g { cont = p0' } = v'
         and v1' = p0'
         and g = g { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, g, i)
      in if c' > 0
         then (c', g, i, r')
         else let (c', r') = let v6' = 2
               in (3, v6')
            in (c', g, i, r')
   in (r', i, g, heap) -- g: gs1, ffv46: hu
cogent_ffi47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_ffi47 (i, j, heap) =
   let (c', i, j, r') = let (c'
                            , i) = let v' = gencotDummy "Cannot access global variable: glob1"
            {- *i = *; -}
         and v1' = i
         and i { cont = p0' } = v1'
         and v2' = p0'
         and v3' = v'
         and (v4', p0') = (v3', v3')
         and i = i { cont = p0' }
         in (0, i)
      in if c' > 0
         then (c', i, j, r')
         else let (c', j, r') = let (c'
                                    , j) = let v5' = j
                  and j { cont = p1' } = v5'
                  and v6' = p1'
                  and j = j { cont = p1' }
                  and v7' = gencotDummy "Cannot access global variable: glob1"
                     {- *; -}
                  and v8' = v6'
                  and (v9', err') = (v8', v8')
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c', r') = let v10' = 2
                        in (3, v10')
                     in (c', j, r')
            in (c', i, j, r')
   in (r', i, j, heap) -- ffv47: hu (Error: no parameter for glob1)
cogent_ffi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi48 (i, j, g, heap) =
   let (c', g, i, j, r') = let (c'
                               , g
                               , i) = let v' = g
         and g { cont = p0' } = v'
         and v1' = p0'
         and g = g { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, g, i)
      in if c' > 0
         then (c', g, i, j, r')
         else let (c'
                  , j
                  , g
                  , r') = let (c'
                              , j
                              , g) = let v6' = j
                  and j { cont = p2' } = v6'
                  and v7' = p2'
                  and j = j { cont = p2' }
                  and v8' = g
                  and g { cont = p3' } = v8'
                  and v9' = p3'
                  and v10' = v7'
                  and (v11', p3') = (v10', v10')
                  and g = g { cont = p3' }
                  in (0, j, g)
               in if c' > 0
                  then (c', j, g, r')
                  else let (c', r') = let v12' = 2
                        in (3, v12')
                     in (c', j, g, r')
            in (c', g, i, j, r')
   in (r', i, j, g, heap) -- g: gs1, ffv48: hu
cogent_ffi49 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi49 (i, j, g, heap) =
   let (c', j, i, r') = let (c'
                            , j
                            , i) = let v' = j
         and j { cont = p0' } = v'
         and v1' = p0'
         and j = j { cont = p0' }
         and v2' = i
         and i { cont = p1' } = v2'
         and v3' = p1'
         and v4' = v1'
         and (v5', p1') = (v4', v4')
         and i = i { cont = p1' }
         in (0, j, i)
      in if c' > 0
         then (c', j, i, r')
         else let (c', r') = let v6' = 2
               in (3, v6')
            in (c', j, i, r')
   in (r', i, j, g, heap) -- g: gs1, ffv49: hu


-- Function calls

cogent_cffv1 : () -> ()
cogent_cffv1 () =
   let c' = let v' = cogent_ffv1
      and v1' = v' ()
      in 0
   in ()

cogent_cffv11 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_cffv11 i =
   let c' = let v' = cogent_ffv11
      and v1' = i
      and v2' = v' v1'
      in 0
   in ((), i)
cogent_cffv12 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_cffv12 i =
   let (c'
       , i) = let v' = cogent_ffv12
      and v1' = i
      and (v2', i) = v' v1'
      in (0, i)
   in ((), i)
cogent_cffv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv15 (i, j) =
   let c' = let v' = cogent_ffv15
      and v1' = i
      and v2' = j
      and v3' = v' (v1', v2')
      in 0
   in ((), i, j)
cogent_cffv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv16 (i, j) =
   let (c'
       , i) = let v' = cogent_ffv16
      and v1' = i
      and v2' = j
      and (v3', i) = v' (v1', v2')
      in (0, i)
   in ((), i, j)
cogent_cffv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv17 (i, j) =
   let (c'
       , j) = let v' = cogent_ffv17
      and v1' = i
      and v2' = j
      and (v3', j) = v' (v1', v2')
      in (0, j)
   in ((), i, j)
cogent_cffv18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv18 (i, j) =
   let (c'
       , i
       , j) = let v' = cogent_ffv18
      and v1' = i
      and v2' = j
      and (v3', i, j) = v' (v1', v2')
      in (0, i, j)
   in ((), i, j)

cogent_cffv21 : GlobState1 -> ( (), GlobState1 )
cogent_cffv21 g =
   let (c'
       , g) = let v' = cogent_ffv21
      and v1' = g
      and (v2', g) = v' v1'
      in (0, g)
   in ((), g) -- g: gs1
cogent_cffv22 : GlobState1 -> ( (), GlobState1 )
cogent_cffv22 g =
   let c' = let v' = cogent_ffv22
      and v1' = gencotDummy "no context parameter for property gs2"
      and (v2', err') = v' v1'
      in 0
   in ((), g) -- g: gs1 (Error: no argument for gs2)
cogent_cffv23 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_cffv23 (g1, g2) =
   let (c'
       , g1
       , g2) = let v' = cogent_ffv23
      and v1' = g1
      and v2' = g2
      and (v3', g1, g2) = v' (v1'
                             , v2')
      in (0, g1, g2)
   in ((), g1, g2) -- g1: gs1, g2: gs2

cogent_cffv31 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_cffv31 (i, g) =
   let (c'
       , g) = let v' = cogent_ffv31
      and v1' = i
      and v2' = g
      and (v3', g) = v' (v1', v2')
      in (0, g)
   in ((), i, g) -- g: gs1
cogent_cffv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_cffv32 (i, g) =
   let (c'
       , i
       , g) = let v' = cogent_ffv32
      and v1' = i
      and v2' = g
      and (v3', i, g) = v' (v1', v2')
      in (0, i, g)
   in ((), i, g) -- g: gs1
cogent_cffv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffv34 (i, j, g) =
   let (c'
       , i
       , g) = let v' = cogent_ffv34
      and v1' = i
      and v2' = j
      and v3' = g
      and (v4', i, g) = v' (v1'
                           , v2'
                           , v3')
      in (0, i, g)
   in ((), i, j, g) -- g: gs1
cogent_cffv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffv35 (i, j, g) =
   let (c'
       , i
       , j
       , g) = let v' = cogent_ffv35
      and v1' = i
      and v2' = j
      and v3' = g
      and (v4', i, j, g) = v' (v1'
                              , v2'
                              , v3')
      in (0, i, j, g)
   in ((), i, j, g) -- g: gs1
cogent_cffv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cffv36 (i, j, g1, g2) =
   let (c'
       , i
       , j
       , g1
       , g2) = let v' = cogent_ffv36
      and v1' = i
      and v2' = j
      and v3' = g1
      and v4' = g2
      and (v5'
          , i
          , j
          , g1
          , g2) = v' (v1', v2', v3', v4')
      in (0, i, j, g1, g2)
   in ((), i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_cffv41 : Heap -> ( (), Heap )
cogent_cffv41 heap =
   let (c'
       , heap) = let v' = cogent_ffv41
      and v1' = heap
      and (v2', heap) = v' v1'
      in (0, heap)
   in ((), heap) -- cffv41: hu
cogent_cffv42 : ( GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_cffv42 (g, heap) =
   let (c'
       , g
       , heap) = let v' = cogent_ffv42
      and v1' = g
      and v2' = heap
      and (v3', g, heap) = v' (v1'
                              , v2')
      in (0, g, heap)
   in ((), g, heap) -- cffv41: hu, g: gs1
cogent_cffv43 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_cffv43 (i, heap) =
   let (c'
       , heap) = let v' = cogent_ffv43
      and v1' = i
      and v2' = heap
      and (v3', heap) = v' (v1', v2')
      in (0, heap)
   in ((), i, heap) -- cffv43: hu
cogent_cffv44 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_cffv44 (i, heap) =
   let (c'
       , i
       , heap) = let v' = cogent_ffv44
      and v1' = i
      and v2' = heap
      and (v3', i, heap) = v' (v1'
                              , v2')
      in (0, i, heap)
   in ((), i, heap) -- cffv44: hu
cogent_cffv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv45 (i, g, heap) =
   let (c'
       , g
       , heap) = let v' = cogent_ffv45
      and v1' = i
      and v2' = g
      and v3' = heap
      and (v4', g, heap) = v' (v1'
                              , v2'
                              , v3')
      in (0, g, heap)
   in ((), i, g, heap) -- g: gs1, cffv45: hu
cogent_cffv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv46 (i, g, heap) =
   let (c'
       , i
       , g
       , heap) = let v' = cogent_ffv46
      and v1' = i
      and v2' = g
      and v3' = heap
      and (v4', i, g, heap) = v' (v1'
                                 , v2'
                                 , v3')
      in (0, i, g, heap)
   in ((), i, g, heap) -- g: gs1, cffv46: hu
cogent_cffv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_cffv47 (i, j, heap) =
   let (c'
       , i
       , j
       , heap) = let v' = cogent_ffv47
      and v1' = i
      and v2' = j
      and v3' = heap
      and (v4', i, j, heap) = v' (v1'
                                 , v2'
                                 , v3')
      in (0, i, j, heap)
   in ((), i, j, heap) -- cffv47: hu
cogent_cffv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv48 (i, j, g, heap) =
   let (c'
       , i
       , j
       , g
       , heap) = let v' = cogent_ffv48
      and v1' = i
      and v2' = j
      and v3' = g
      and v4' = heap
      and (v5'
          , i
          , j
          , g
          , heap) = v' (v1'
                       , v2'
                       , v3'
                       , v4')
      in (0, i, j, g, heap)
   in ((), i, j, g, heap) -- g: gs1, cffv48: hu

cogent_cffi1 : () -> U32
cogent_cffi1 () =
   let (c'
       , r') = let v' = cogent_ffi1
      and v1' = v' ()
      in (3, v1')
   in r'

cogent_cffi11 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_cffi11 i =
   let (c'
       , r') = let v' = cogent_ffi11
      and v1' = i
      and v2' = v' v1'
      in (3, v2')
   in (r', i)
cogent_cffi12 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_cffi12 i =
   let (c'
       , r'
       , i) = let v' = cogent_ffi12
      and v1' = i
      and (v2', i) = v' v1'
      in (3, v2', i)
   in (r', i)
cogent_cffi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi15 (i, j) =
   let (c'
       , r') = let v' = cogent_ffi15
      and v1' = i
      and v2' = j
      and v3' = v' (v1', v2')
      in (3, v3')
   in (r', i, j)
cogent_cffi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi16 (i, j) =
   let (c'
       , r'
       , i) = let v' = cogent_ffi16
      and v1' = i
      and v2' = j
      and (v3', i) = v' (v1', v2')
      in (3, v3', i)
   in (r', i, j)
cogent_cffi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi17 (i, j) =
   let (c'
       , r'
       , j) = let v' = cogent_ffi17
      and v1' = i
      and v2' = j
      and (v3', j) = v' (v1', v2')
      in (3, v3', j)
   in (r', i, j)
cogent_cffi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi18 (i, j) =
   let (c'
       , r'
       , i
       , j) = let v' = cogent_ffi18
      and v1' = i
      and v2' = j
      and (v3', i, j) = v' (v1', v2')
      in (3, v3', i, j)
   in (r', i, j)

cogent_cffi21 : GlobState1 -> ( U32, GlobState1 )
cogent_cffi21 g =
   let (c'
       , r'
       , g) = let v' = cogent_ffi21
      and v1' = g
      and (v2', g) = v' v1'
      in (3, v2', g)
   in (r', g) -- g: gs1
cogent_cffi22 : GlobState2 -> ( U32, GlobState2 )
cogent_cffi22 g =
   let (c'
       , r'
       , g) = let v' = cogent_ffi22
      and v1' = g
      and (v2', g) = v' v1'
      in (3, v2', g)
   in (r', g) -- g: gs2
cogent_cffi23 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_cffi23 (g1, g2) =
   let (c'
       , r'
       , g1
       , g2) = let v' = cogent_ffi23
      and v1' = g1
      and v2' = g2
      and (v3', g1, g2) = v' (v1'
                             , v2')
      in (3, v3', g1, g2)
   in (r', g1, g2) -- g1: gs1, g2: gs2

cogent_cffi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_cffi31 (i, g) =
   let (c'
       , r'
       , g) = let v' = cogent_ffi31
      and v1' = i
      and v2' = g
      and (v3', g) = v' (v1', v2')
      in (3, v3', g)
   in (r', i, g) -- g: gs1
cogent_cffi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_cffi32 (i, g) =
   let (c'
       , r'
       , i
       , g) = let v' = cogent_ffi32
      and v1' = i
      and v2' = g
      and (v3', i, g) = v' (v1', v2')
      in (3, v3', i, g)
   in (r', i, g) -- g: gs1
cogent_cffi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffi34 (i, j, g) =
   let (c'
       , r'
       , i
       , g) = let v' = cogent_ffi34
      and v1' = i
      and v2' = j
      and v3' = g
      and (v4', i, g) = v' (v1'
                           , v2'
                           , v3')
      in (3, v4', i, g)
   in (r', i, j, g) -- g: gs1
cogent_cffi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffi35 (i, j, g) =
   let (c'
       , r'
       , i
       , j
       , g) = let v' = cogent_ffi35
      and v1' = i
      and v2' = j
      and v3' = g
      and (v4', i, j, g) = v' (v1'
                              , v2'
                              , v3')
      in (3, v4', i, j, g)
   in (r', i, j, g) -- g: gs1
cogent_cffi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cffi36 (i, j, g1, g2) =
   let (c'
       , r'
       , i
       , j
       , g1
       , g2) = let v' = cogent_ffi36
      and v1' = i
      and v2' = j
      and v3' = g1
      and v4' = g2
      and (v5'
          , i
          , j
          , g1
          , g2) = v' (v1', v2', v3', v4')
      in (3, v5', i, j, g1, g2)
   in (r', i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_cffi41 : Heap -> ( U32, Heap )
cogent_cffi41 heap =
   let (c'
       , r'
       , heap) = let v' = cogent_ffi41
      and v1' = heap
      and (v2', heap) = v' v1'
      in (3, v2', heap)
   in (r', heap) -- cffv41: hu
cogent_cffi42 : ( GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_cffi42 (g, heap) =
   let (c'
       , r'
       , g
       , heap) = let v' = cogent_ffi42
      and v1' = g
      and v2' = heap
      and (v3', g, heap) = v' (v1'
                              , v2')
      in (3, v3', g, heap)
   in (r', g, heap) -- cffv41: hu, g: gs1
cogent_cffi43 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_cffi43 (i, heap) =
   let (c'
       , r'
       , heap) = let v' = cogent_ffi43
      and v1' = i
      and v2' = heap
      and (v3', heap) = v' (v1', v2')
      in (3, v3', heap)
   in (r', i, heap) -- cffv43: hu
cogent_cffi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_cffi44 (i, heap) =
   let (c'
       , r'
       , i
       , heap) = let v' = cogent_ffi44
      and v1' = i
      and v2' = heap
      and (v3', i, heap) = v' (v1'
                              , v2')
      in (3, v3', i, heap)
   in (r', i, heap) -- cffv44: hu
cogent_cffi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi45 (i, g, heap) =
   let (c'
       , r'
       , g
       , heap) = let v' = cogent_ffi45
      and v1' = i
      and v2' = g
      and v3' = heap
      and (v4', g, heap) = v' (v1'
                              , v2'
                              , v3')
      in (3, v4', g, heap)
   in (r', i, g, heap) -- g: gs1, cffv45: hu
cogent_cffi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi46 (i
              , heap
              , globheap1) =
   let (c'
       , r'
       , i
       , heap
       , globheap1) = let v' = cogent_ffi46
      and v1' = i
      and v2' = heap
      and v3' = globheap1
      and (v4'
          , i
          , heap
          , globheap1) = v' (v1'
                            , v2'
                            , v3')
      in (3, v4', i, heap, globheap1)
   in (r', i, heap, globheap1) -- heap: gs1, cffv46: hu
cogent_cffi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi48 (i, j, g, heap) =
   let (c'
       , r'
       , i
       , j
       , g
       , heap) = let v' = cogent_ffi48
      and v1' = i
      and v2' = j
      and v3' = g
      and v4' = heap
      and (v5'
          , i
          , j
          , g
          , heap) = v' (v1'
                       , v2'
                       , v3'
                       , v4')
      in (3, v5', i, j, g, heap)
   in (r', i, j, g, heap) -- g: gs1, cffv48: hu
cogent_cffi49 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi49 (i, j, g, heap) =
   let (c'
       , r'
       , i
       , j
       , g
       , heap) = let v' = cogent_ffi49
      and v1' = i
      and v2' = j
      and v3' = g
      and v4' = heap
      and (v5'
          , i
          , j
          , g
          , heap) = v' (v1'
                       , v2'
                       , v3'
                       , v4')
      in (3, v5', i, j, g, heap)
   in (r', i, j, g, heap) -- g: gs1, cffv49: hu

-- Function Pointers

type Cogent_fpfvv =
   #CFunPtr_FXX_Void
type Cogent_ffvv = () -> ()
type Cogent_ffvi =
   MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
type Cogent_fpfvi =
   #CFunPtr_FXM_N_P_U32X_Void
type Cogent_fpfiv =
   #CFunPtr_FXX_U32
type Cogent_ffiv = () -> U32
type Cogent_fpfii =
   #CFunPtr_FXM_N_P_U32X_U32
type Cogent_ffii =
   MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )

type Struct_Cogent_fstd = { fvv : #Cogent_fpfvv, fvi : #Cogent_fpfvi, fiv : #Cogent_fpfiv, fii : #Cogent_fpfii }
type Struct_Cogent_fsptd = { fvv : #CFunPtr_Cogent_ffvv, fvi : #CFunPtr_Cogent_ffvi, fiv : #CFunPtr_Cogent_ffiv, fii : #CFunPtr_Cogent_ffii }
type Struct_Cogent_fsdir = { fvv : #CFunPtr_FXX_Void, fvi : #CFunPtr_FXM_N_P_U32X_Void, fiv : #CFunPtr_FXX_U32, fii : #CFunPtr_FXM_N_P_U32X_U32 }
type Struct_Cogent_fsro = { fvi : #Cogent_fpfvi, fii : #Cogent_fpfii } -- fvi/1: ro, fii/1: ro

cogent_ffp1vv : #Struct_Cogent_fstd -> #Cogent_fpfvv
cogent_ffp1vv s =
   let (c', r', s) = let v' = s
      and s { fvv = p0' } = v'
      and v1' = p0'
      and s = s { fvv = p0' }
      in (3, v1', s)
   in r'
cogent_ffp1vi : #Struct_Cogent_fstd -> #Cogent_fpfvi
cogent_ffp1vi s =
   let (c', r', s) = let v' = s
      and s { fvi = p0' } = v'
      and v1' = p0'
      and s = s { fvi = p0' }
      in (3, v1', s)
   in r'
cogent_ffp1iv : #Struct_Cogent_fstd -> #Cogent_fpfiv
cogent_ffp1iv s =
   let (c', r', s) = let v' = s
      and s { fiv = p0' } = v'
      and v1' = p0'
      and s = s { fiv = p0' }
      in (3, v1', s)
   in r'
cogent_ffp1ii : #Struct_Cogent_fstd -> #Cogent_fpfii
cogent_ffp1ii s =
   let (c', r', s) = let v' = s
      and s { fii = p0' } = v'
      and v1' = p0'
      and s = s { fii = p0' }
      in (3, v1', s)
   in r'

cogent_cfpv1 : #Struct_Cogent_fstd -> ()
cogent_cfpv1 s =
   let (c', s) = let v' = s
      and s { fvv = p0' } = v'
      and v1' = p0'
      and s = s { fvv = p0' }
      and v2' = fromFunPtr[() -> ()
                          , #Cogent_fpfvv] v1'
      and v3' = v2' ()
      in (0, s)
   in ()
cogent_cfpv2 : #Struct_Cogent_fstd -> ()
cogent_cfpv2 s =
   let (c', s) = let v1' = s
      and s { fvv = p0' } = v1'
      and v2' = p0'
      and s = s { fvv = p0' }
      and v' = fromFunPtr[() -> ()
                         , #Cogent_fpfvv] v2'
      and v3' = v' ()
      in (0, s)
   in ()
cogent_cfpv3 : #Struct_Cogent_fsptd -> ()
cogent_cfpv3 s =
   let (c', s) = let v' = s
      and s { fvv = p0' } = v'
      and v1' = p0'
      and s = s { fvv = p0' }
      and v2' = fromFunPtr[Cogent_ffvv
                          , #CFunPtr_Cogent_ffvv] v1'
      and v3' = v2' ()
      in (0, s)
   in ()
cogent_cfpv4 : #Struct_Cogent_fsdir -> ()
cogent_cfpv4 s =
   let (c', s) = let v' = s
      and s { fvv = p0' } = v'
      and v1' = p0'
      and s = s { fvv = p0' }
      and v2' = fromFunPtr[() -> ()
                          , #CFunPtr_FXX_Void] v1'
      and v3' = v2' ()
      in (0, s)
   in ()
cogent_cfpv5 : CArr5 #Cogent_fpfvv -> ( (), CArr5 #Cogent_fpfvv )
cogent_cfpv5 a =
   let (c', a) = let v1' = 1
      and v' = a
      and a @{ @v1' = p0' } = v'
      and v2' = p0'
      and a = a @{ @v1' = p0' }
      and v3' = fromFunPtr[() -> ()
                          , #Cogent_fpfvv] v2'
      and v4' = v3' ()
      in (0, a)
   in ((), a)
cogent_cfpv6 : CArr5 #Cogent_fpfvv -> ( (), CArr5 #Cogent_fpfvv )
cogent_cfpv6 a =
   let (c', a) = let v2' = 1
      and v1' = a
      and a @{ @v2' = p0' } = v1'
      and v3' = p0'
      and a = a @{ @v2' = p0' }
      and v' = fromFunPtr[() -> ()
                         , #Cogent_fpfvv] v3'
      and v4' = v' ()
      in (0, a)
   in ((), a)
cogent_cfpv7 : #Struct_Cogent_fstd -> ()
cogent_cfpv7 s =
   let c' = let v' = cogent_ffp1vv
      and v1' = s
      and v2' = v' v1'
      and v3' = fromFunPtr[() -> ()
                          , #Cogent_fpfvv] v2'
      and v4' = v3' ()
      in 0
   in ()
cogent_cfpv8 : #Struct_Cogent_fstd -> ()
cogent_cfpv8 s =
   let c' = let v1' = cogent_ffp1vv
      and v2' = s
      and v3' = v1' v2'
      and v' = fromFunPtr[() -> ()
                         , #Cogent_fpfvv] v3'
      and v4' = v' ()
      in 0
   in ()
cogent_cfpv9 : #Cogent_fpfvv -> ()
cogent_cfpv9 f =
   let c' = let v' = f
      and v1' = fromFunPtr[() -> ()
                          , #Cogent_fpfvv] v'
      and v2' = v1' ()
      in 0
   in ()

cogent_cfpv11 : ( #Struct_Cogent_fstd, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv11 (s, i) =
   let (c', s) = let v' = s
      and s { fvi = p0' } = v'
      and v1' = p0'
      and s = s { fvi = p0' }
      and v2' = fromFunPtr[MayNull (CPtr U32) -> ()
                          , #Cogent_fpfvi] v1'
      and v3' = i
      and v4' = v2' v3'
      in (0, s)
   in ((), i)
cogent_cfpv12 : ( #Struct_Cogent_fsptd, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv12 (s, i) =
   let (c', s, i) = let v' = s
      and s { fvi = p0' } = v'
      and v1' = p0'
      and s = s { fvi = p0' }
      and v2' = fromFunPtr[Cogent_ffvi
                          , #CFunPtr_Cogent_ffvi] v1'
      and v3' = i
      and (v4', i) = v2' v3'
      in (0, s, i)
   in ((), i)
cogent_cfpv13 : ( #Struct_Cogent_fsdir, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv13 (s, i) =
   let (c', s) = let v' = s
      and s { fvi = p0' } = v'
      and v1' = p0'
      and s = s { fvi = p0' }
      and v2' = fromFunPtr[MayNull (CPtr U32) -> ()
                          , #CFunPtr_FXM_N_P_U32X_Void] v1'
      and v3' = i
      and v4' = v2' v3'
      in (0, s)
   in ((), i)
cogent_cfpv14 : ( #Struct_Cogent_fsro, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv14 (s, i) =
   let (c', s) = let v' = s
      and s { fvi = p0' } = v'
      and v1' = p0'
      and s = s { fvi = p0' }
      and v2' = fromFunPtr[MayNull (CPtr U32) -> ()
                          , #Cogent_fpfvi] v1'
      and v3' = i
      and v4' = v2' v3'
      in (0, s)
   in ((), i)
cogent_cfpv15 : ( CArr5 #Cogent_fpfvi, MayNull (CPtr U32) ) -> ( (), CArr5 #Cogent_fpfvi, MayNull (CPtr U32) )
cogent_cfpv15 (a, i) =
   let (c', a) = let v1' = 1
      and v' = a
      and a @{ @v1' = p0' } = v'
      and v2' = p0'
      and a = a @{ @v1' = p0' }
      and v3' = fromFunPtr[MayNull (CPtr U32) -> ()
                          , #Cogent_fpfvi] v2'
      and v4' = i
      and v5' = v3' v4'
      in (0, a)
   in ((), a, i)
cogent_cfpv16 : ( #Struct_Cogent_fstd, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv16 (s, i) =
   let c' = let v' = cogent_ffp1vi
      and v1' = s
      and v2' = v' v1'
      and v3' = fromFunPtr[MayNull (CPtr U32) -> ()
                          , #Cogent_fpfvi] v2'
      and v4' = i
      and v5' = v3' v4'
      in 0
   in ((), i)
cogent_cfpv17 : ( #Cogent_fpfvi, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv17 (f, i) =
   let c' = let v' = f
      and v1' = fromFunPtr[MayNull (CPtr U32) -> ()
                          , #Cogent_fpfvi] v'
      and v2' = i
      and v3' = v1' v2'
      in 0
   in ((), i)
cogent_cfpv18 : ( #CFunPtr_Cogent_ffvi, MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_cfpv18 (f, i) =
   let (c', i) = let v' = f
      and v1' = i
      and (v2', i) = v' v1'
      in (0, i)
   in ((), i)

cogent_cfpi1 : #Struct_Cogent_fstd -> U32
cogent_cfpi1 s =
   let (c', r', s) = let v' = s
      and s { fiv = p0' } = v'
      and v1' = p0'
      and s = s { fiv = p0' }
      and v2' = fromFunPtr[() -> U32
                          , #Cogent_fpfiv] v1'
      and v3' = v2' ()
      in (3, v3', s)
   in r'
cogent_cfpi2 : #Struct_Cogent_fstd -> U32
cogent_cfpi2 s =
   let (c', r', s) = let v1' = s
      and s { fiv = p0' } = v1'
      and v2' = p0'
      and s = s { fiv = p0' }
      and v' = fromFunPtr[() -> U32
                         , #Cogent_fpfiv] v2'
      and v3' = v' ()
      in (3, v3', s)
   in r'
cogent_cfpi3 : #Struct_Cogent_fsptd -> U32
cogent_cfpi3 s =
   let (c', r', s) = let v' = s
      and s { fiv = p0' } = v'
      and v1' = p0'
      and s = s { fiv = p0' }
      and v2' = fromFunPtr[Cogent_ffiv
                          , #CFunPtr_Cogent_ffiv] v1'
      and v3' = v2' ()
      in (3, v3', s)
   in r'
cogent_cfpi4 : #Struct_Cogent_fsdir -> U32
cogent_cfpi4 s =
   let (c', r', s) = let v' = s
      and s { fiv = p0' } = v'
      and v1' = p0'
      and s = s { fiv = p0' }
      and v2' = fromFunPtr[() -> U32
                          , #CFunPtr_FXX_U32] v1'
      and v3' = v2' ()
      in (3, v3', s)
   in r'
cogent_cfpi5 : CArr5 #Cogent_fpfiv -> ( U32, CArr5 #Cogent_fpfiv )
cogent_cfpi5 a =
   let (c', r', a) = let v1' = 1
      and v' = a
      and a @{ @v1' = p0' } = v'
      and v2' = p0'
      and a = a @{ @v1' = p0' }
      and v3' = fromFunPtr[() -> U32
                          , #Cogent_fpfiv] v2'
      and v4' = v3' ()
      in (3, v4', a)
   in (r', a)
cogent_cfpi6 : CArr5 #Cogent_fpfiv -> ( U32, CArr5 #Cogent_fpfiv )
cogent_cfpi6 a =
   let (c', r', a) = let v2' = 1
      and v1' = a
      and a @{ @v2' = p0' } = v1'
      and v3' = p0'
      and a = a @{ @v2' = p0' }
      and v' = fromFunPtr[() -> U32
                         , #Cogent_fpfiv] v3'
      and v4' = v' ()
      in (3, v4', a)
   in (r', a)
cogent_cfpi7 : #Struct_Cogent_fstd -> U32
cogent_cfpi7 s =
   let (c'
       , r') = let v' = cogent_ffp1iv
      and v1' = s
      and v2' = v' v1'
      and v3' = fromFunPtr[() -> U32
                          , #Cogent_fpfiv] v2'
      and v4' = v3' ()
      in (3, v4')
   in r'
cogent_cfpi8 : #Struct_Cogent_fstd -> U32
cogent_cfpi8 s =
   let (c'
       , r') = let v1' = cogent_ffp1iv
      and v2' = s
      and v3' = v1' v2'
      and v' = fromFunPtr[() -> U32
                         , #Cogent_fpfiv] v3'
      and v4' = v' ()
      in (3, v4')
   in r'
cogent_cfpi9 : #Cogent_fpfiv -> U32
cogent_cfpi9 f =
   let (c', r') = let v' = f
      and v1' = fromFunPtr[() -> U32
                          , #Cogent_fpfiv] v'
      and v2' = v1' ()
      in (3, v2')
   in r'

cogent_cfpi11 : ( #Struct_Cogent_fstd, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi11 (s, i) =
   let (c', r', s) = let v' = s
      and s { fii = p0' } = v'
      and v1' = p0'
      and s = s { fii = p0' }
      and v2' = fromFunPtr[MayNull (CPtr U32) -> U32
                          , #Cogent_fpfii] v1'
      and v3' = i
      and v4' = v2' v3'
      in (3, v4', s)
   in (r', i)
cogent_cfpi12 : ( #Struct_Cogent_fsptd, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi12 (s, i) =
   let (c', r', s, i) = let v' = s
      and s { fii = p0' } = v'
      and v1' = p0'
      and s = s { fii = p0' }
      and v2' = fromFunPtr[Cogent_ffii
                          , #CFunPtr_Cogent_ffii] v1'
      and v3' = i
      and (v4', i) = v2' v3'
      in (3, v4', s, i)
   in (r', i)
cogent_cfpi13 : ( #Struct_Cogent_fsdir, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi13 (s, i) =
   let (c', r', s) = let v' = s
      and s { fii = p0' } = v'
      and v1' = p0'
      and s = s { fii = p0' }
      and v2' = fromFunPtr[MayNull (CPtr U32) -> U32
                          , #CFunPtr_FXM_N_P_U32X_U32] v1'
      and v3' = i
      and v4' = v2' v3'
      in (3, v4', s)
   in (r', i)
cogent_cfpi14 : ( #Struct_Cogent_fsro, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi14 (s, i) =
   let (c', r', s) = let v' = s
      and s { fii = p0' } = v'
      and v1' = p0'
      and s = s { fii = p0' }
      and v2' = fromFunPtr[MayNull (CPtr U32) -> U32
                          , #Cogent_fpfii] v1'
      and v3' = i
      and v4' = v2' v3'
      in (3, v4', s)
   in (r', i)
cogent_cfpi15 : ( CArr5 #Cogent_fpfii, MayNull (CPtr U32) ) -> ( U32, CArr5 #Cogent_fpfii, MayNull (CPtr U32) )
cogent_cfpi15 (a, i) =
   let (c', r', a) = let v1' = 1
      and v' = a
      and a @{ @v1' = p0' } = v'
      and v2' = p0'
      and a = a @{ @v1' = p0' }
      and v3' = fromFunPtr[MayNull (CPtr U32) -> U32
                          , #Cogent_fpfii] v2'
      and v4' = i
      and v5' = v3' v4'
      in (3, v5', a)
   in (r', a, i)
cogent_cfpi16 : ( #Struct_Cogent_fstd, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi16 (s, i) =
   let (c'
       , r') = let v' = cogent_ffp1ii
      and v1' = s
      and v2' = v' v1'
      and v3' = fromFunPtr[MayNull (CPtr U32) -> U32
                          , #Cogent_fpfii] v2'
      and v4' = i
      and v5' = v3' v4'
      in (3, v5')
   in (r', i)
cogent_cfpi17 : ( #Cogent_fpfii, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi17 (f, i) =
   let (c', r') = let v' = f
      and v1' = fromFunPtr[MayNull (CPtr U32) -> U32
                          , #Cogent_fpfii] v'
      and v2' = i
      and v3' = v1' v2'
      in (3, v3')
   in (r', i)
cogent_cfpi18 : ( #CFunPtr_Cogent_ffii, MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_cfpi18 (f, i) =
   let (c', r', i) = let v' = f
      and v1' = i
      and (v2', i) = v' v1'
      in (3, v2', i)
   in (r', i)
