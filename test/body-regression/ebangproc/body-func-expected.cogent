-- Function definitions

cogent_ffv1 : () -> ()
cogent_ffv1 () = ()
cogent_ffv2 : () -> ()
cogent_ffv2 () = ()

cogent_ffv11 : MayNull (CPtr U32) -> ()
cogent_ffv11 i = () -- i: -ar
cogent_ffv12 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_ffv12 i = ((), i)
cogent_ffv13 : MayNull (CPtr U32) -> ()
cogent_ffv13 i = () -- i: -ar
cogent_ffv14 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_ffv14 i =
   let i = let i = let v1' = 5
         and v' = i
         and i { cont = p0' } = v'
         and v' = v1'
         and p0' = v'
         and i = i { cont = p0' }
         in i
      in i
   in ((), i)
cogent_ffv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ()
cogent_ffv15 (i, j) = () -- i: -ar, j: -ar
cogent_ffv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_ffv16 (i, j) =
   let i = (let (c'
                , i) = let i = let v1' = j
               and j { cont = p1' } = v1'
               and v1' = p1'
               and v' = i
               and i { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and i = i { cont = p0' }
               in i
            in (0, i)
         in if c' > 0 then i else i) !j
   in ((), i) -- j: -ar
cogent_ffv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32) )
cogent_ffv17 (i, j) =
   let j = let c' = (let j = let v1' = j
               and j { cont = p1' } = v1'
               and j = j { cont = p1' }
               in j
            in 0) !j
      in if c' > 0
         then j
         else let j = let j = let v1' = 5
                  and v' = j
                  and j { cont = p2' } = v'
                  and v' = v1'
                  and p2' = v'
                  and j = j { cont = p2' }
                  in j
               in j
            in j
   in ((), j) -- i: -ar
cogent_ffv18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_ffv18 (i, j) =
   let (i, j) = let (c'
                    , i) = (let (i, j) = let v1' = j
               and j { cont = p1' } = v1'
               and v1' = p1'
               and v' = i
               and i { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and i = i { cont = p0' }
               and j = j { cont = p1' }
               in (i, j)
            in (0, i)) !j
      in if c' > 0
         then (i, j)
         else let j = let j = let v1' = 5
                  and v' = j
                  and j { cont = p2' } = v'
                  and v' = v1'
                  and p2' = v'
                  and j = j { cont = p2' }
                  in j
               in j
            in (i, j)
   in ((), i, j)

type GlobState1 = CPtr U32 -- glob1: gs1
type GlobState2 = CPtr U32 -- glob2: gs2

cogent_ffv21 : GlobState1 -> ( (), GlobState1 )
cogent_ffv21 g = ((), g) -- g: gs1
cogent_ffv22 : GlobState2 -> ( (), GlobState2 )
cogent_ffv22 g = ((), g) -- g: gs2
cogent_ffv23 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv23 (g1, g2) =
   ((), g1, g2) -- g1: gs1, g2: gs2
cogent_ffv24 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv24 (g1, g2) =
   ((), g1, g2) -- g2: gs2, g1: gs1
cogent_ffv25 : GlobState1 -> ( (), GlobState1 )
cogent_ffv25 g =
   let g = let g = let v1' = 5
         and v' = g
         and g { cont = p0' } = v'
         and v' = v1'
         and p0' = v'
         and g = g { cont = p0' }
         in g
      in g
   in ((), g) -- g: gs1
cogent_ffv26 : GlobState1 -> ( (), GlobState1 )
cogent_ffv26 g = ((), g) -- g: gs1 (!)
cogent_ffv27 : GlobState1 -> ( (), GlobState1 )
cogent_ffv27 g =
   let g = let g = let v1' = 1
         and v' = g
         and g { cont = p0' } = v'
         and v' = p0'
         and v' = v' + v1'
         and p0' = v'
         and g = g { cont = p0' }
         in g
      in g
   in ((), g) -- g: gs1
cogent_ffv28 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_ffv28 (g1, g2) =
   let g1 = (let (g1
                 , g2) = let v1' = g2
            and g2 { cont = p1' } = v1'
            and v1' = p1'
            and v' = g1
            and g1 { cont = p0' } = v'
            and v' = v1'
            and p0' = v'
            and g1 = g1 { cont = p0' }
            and g2 = g2 { cont = p1' }
            in (g1, g2)
         in g1) !g2
   in ((), g1, g2) -- g1: gs1, g2: gs2

cogent_ffv31 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), GlobState1 )
cogent_ffv31 (i, g) =
   let g = (let g = let v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v' = g
            and g { cont = p0' } = v'
            and v' = v1'
            and p0' = v'
            and g = g { cont = p0' }
            in g
         in g) !i
   in ((), g) -- i: -ar, g: gs1
cogent_ffv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv32 (i, g) =
   let i = (let (i
                , g) = let v1' = g
            and g { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = v1'
            and p0' = v'
            and i = i { cont = p0' }
            and g = g { cont = p1' }
            in (i, g)
         in i) !g
   in ((), i, g) -- g: gs1
cogent_ffv33 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv33 (i, g) =
   let (i, g) = let (i
                    , g) = let v2' = 1
         and v1' = g
         and g { cont = p1' } = v1'
         and v1' = p1'
         and v1' = v1' + v2'
         and (v1', p1') = (p1', v1')
         and v' = i
         and i { cont = p0' } = v'
         and v' = v1'
         and p0' = v'
         and i = i { cont = p0' }
         and g = g { cont = p1' }
         in (i, g)
      in (i, g)
   in ((), i, g) -- g: gs1
cogent_ffv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_ffv34 (i, j, g) =
   let (i, g) = (let (c'
                     , i) = (let (i, g) = let v1' = g
                  and g { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = i
                  and i { cont = p0' } = v'
                  and v' = v1'
                  and p0' = v'
                  and i = i { cont = p0' }
                  and g = g { cont = p1' }
                  in (i, g)
               in (0, i)) !g
         in if c' > 0
            then (i, g)
            else let g = let g = let v1' = j
                     and j { cont = p3' } = v1'
                     and v1' = p3'
                     and v' = g
                     and g { cont = p2' } = v'
                     and v' = v1'
                     and p2' = v'
                     and g = g { cont = p2' }
                     in g
                  in g
               in (i, g)) !j
   in ((), i, g) -- j: -ar, g: gs1
cogent_ffv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_ffv35 (i, j, g) =
   let (i, g) = (let (c'
                     , i) = (let (i, g) = let v1' = g
                  and g { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = i
                  and i { cont = p0' } = v'
                  and v' = v1'
                  and p0' = v'
                  and i = i { cont = p0' }
                  and g = g { cont = p1' }
                  in (i, g)
               in (0, i)) !g
         in if c' > 0
            then (i, g)
            else let (g, j) = let (g
                                  , j) = let v1' = j
                     and j { cont = p3' } = v1'
                     and v1' = p3'
                     and v' = g
                     and g { cont = p2' } = v'
                     and v' = v1'
                     and p2' = v'
                     and g = g { cont = p2' }
                     and j = j { cont = p3' }
                     in (g, j)
                  in (g, j)
               in (i, g)) !j
   in ((), i, j, g) -- g: gs1
cogent_ffv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_ffv36 (i, j, g1, g2) =
   let (i, g2) = (let (c'
                      , i
                      , g1) = let (i
                                  , g1) = let v1' = g1
               and g1 { cont = p1' } = v1'
               and v1' = p1'
               and v' = i
               and i { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and i = i { cont = p0' }
               and g1 = g1 { cont = p1' }
               in (i, g1)
            in (0, i, g1)
         in if c' > 0
            then (i, g2)
            else let (g2, j) = let (g2
                                   , j) = let v1' = j
                     and j { cont = p3' } = v1'
                     and v1' = p3'
                     and v' = g2
                     and g2 { cont = p2' } = v'
                     and v' = v1'
                     and p2' = v'
                     and g2 = g2 { cont = p2' }
                     and j = j { cont = p3' }
                     in (g2, j)
                  in (g2, j)
               in (i, g2)) !j !g1
   in ((), i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_ffv41 : Heap -> ( (), Heap )
cogent_ffv41 heap = ((), heap) -- ffv41: hu
cogent_ffv42 : ( GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_ffv42 (g, heap) =
   ((), g, heap) -- ffv42: hu, g: gs1
cogent_ffv43 : ( MayNull (CPtr U32), Heap ) -> ( (), Heap )
cogent_ffv43 (i, heap) =
   ((), heap) -- i: -ar, ffv43: hu
cogent_ffv44 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_ffv44 (i, heap) =
   let i = let i = let v1' = 5
         and v' = i
         and i { cont = p0' } = v'
         and v' = v1'
         and p0' = v'
         and i = i { cont = p0' }
         in i
      in i
   in ((), i, heap) -- ffv44: hu
cogent_ffv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_ffv45 (i, g, heap) =
   let g = (let g = let v1' = i
            and i { cont = p1' } = v1'
            and v1' = p1'
            and v' = g
            and g { cont = p0' } = v'
            and v' = v1'
            and p0' = v'
            and g = g { cont = p0' }
            in g
         in g) !i
   in ((), g, heap) -- i: -ar, g: gs1, ffv45: hu
cogent_ffv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffv46 (i, g, heap) =
   let i = (let (i
                , g) = let v1' = g
            and g { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = v1'
            and p0' = v'
            and i = i { cont = p0' }
            and g = g { cont = p1' }
            in (i, g)
         in i) !g
   in ((), i, g, heap) -- g: gs1, ffv46: hu
cogent_ffv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_ffv47 (i, j, heap) =
   let i = (let (c'
                , i) = let i = let v1' = gencotDummy "Cannot access global variable: glob1"
                  {- *; -}
               and v' = i
               and i { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and i = i { cont = p0' }
               in i
            in (0, i)
         in if c' > 0
            then i
            else let j = let j = let v1' = j
                     and j { cont = p1' } = v1'
                     and j = j { cont = p1' }
                     in j
                  in j
               in i) !j
   in ((), i, j, heap) -- ffv47: hu
cogent_ffv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffv48 (i, j, g, heap) =
   let (i, g) = (let (c'
                     , i) = (let (i, g) = let v1' = g
                  and g { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = i
                  and i { cont = p0' } = v'
                  and v' = v1'
                  and p0' = v'
                  and i = i { cont = p0' }
                  and g = g { cont = p1' }
                  in (i, g)
               in (0, i)) !g
         in if c' > 0
            then (i, g)
            else let (g, j) = let (g
                                  , j) = let v1' = j
                     and j { cont = p3' } = v1'
                     and v1' = p3'
                     and v' = g
                     and g { cont = p2' } = v'
                     and v' = v1'
                     and p2' = v'
                     and g = g { cont = p2' }
                     and j = j { cont = p3' }
                     in (g, j)
                  in (g, j)
               in (i, g)) !j
   in ((), i, j, g, heap) -- g: gs1, ffv48: hu


cogent_ffi1 : () -> U32
cogent_ffi1 () =
   let r' = let v' = let v' = 5
         in v'
      in v'
   in r'

cogent_ffi11 : MayNull (CPtr U32) -> U32
cogent_ffi11 i =
   let r' = let v' = let v' = 5
         in v'
      in v'
   in r' -- i: -ar
cogent_ffi12 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_ffi12 i =
   let r' = let v' = let v' = 5
         in v'
      in v'
   in (r', i)
cogent_ffi13 : MayNull (CPtr U32) -> U32
cogent_ffi13 i =
   let r' = let c' = 0
      in if c' > 0
         then r'
         else
            let r' = let v' = let v' = 2
                  in v'
               in v'
            in r'
   in r' -- i: -ar 
cogent_ffi14 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_ffi14 i =
   let (i, r') = let (c'
                     , i) = let i = let v1' = 5
            and v' = i
            and i { cont = p0' } = v'
            and v' = v1'
            and p0' = v'
            and i = i { cont = p0' }
            in i
         in (0, i)
      in if c' > 0
         then (i, r')
         else
            let r' = let v' = let v' = 2
                  in v'
               in v'
            in (i, r')
   in (r', i)
cogent_ffi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> U32
cogent_ffi15 (i, j) =
   let r' = let c' = 0
      in if c' > 0
         then r'
         else let r' = let c' = 0
               in if c' > 0
                  then r'
                  else
                     let r' = let v' = let v' = 2
                           in v'
                        in v'
                     in r'
            in r'
   in r' -- i: -ar, j: -ar 
cogent_ffi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_ffi16 (i, j) =
   let (i, r') = (let (c'
                      , i) = let i = let v1' = j
               and j { cont = p1' } = v1'
               and v1' = p1'
               and v' = i
               and i { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and i = i { cont = p0' }
               in i
            in (0, i)
         in if c' > 0
            then (i, r')
            else let r' = let c' = 0
                  in if c' > 0
                     then r'
                     else
                        let r' = let v' = let v' = 2
                              in v'
                           in v'
                        in r'
               in (i, r')) !j
   in (r', i) -- j: -ar
cogent_ffi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_ffi17 (i, j) =
   let (j
       , r') = let c' = (let j = let v1' = j
               and j { cont = p1' } = v1'
               and j = j { cont = p1' }
               in j
            in 0) !j
      in if c' > 0
         then (j, r')
         else let (j, r') = let (c'
                                , j) = let j = let v1' = 5
                     and v' = j
                     and j { cont = p2' } = v'
                     and v' = v1'
                     and p2' = v'
                     and j = j { cont = p2' }
                     in j
                  in (0, j)
               in if c' > 0
                  then (j, r')
                  else
                     let r' = let v' = let v' = 2
                           in v'
                        in v'
                     in (j, r')
            in (j, r')
   in (r', j) -- i: -ar
cogent_ffi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_ffi18 (i, j) =
   let (i, j, r') = let (c'
                        , i) = (let (i, j) = let v1' = j
               and j { cont = p1' } = v1'
               and v1' = p1'
               and v' = i
               and i { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and i = i { cont = p0' }
               and j = j { cont = p1' }
               in (i, j)
            in (0, i)) !j
      in if c' > 0
         then (i, j, r')
         else let (j, r') = let (c'
                                , j) = let j = let v1' = 5
                     and v' = j
                     and j { cont = p2' } = v'
                     and v' = v1'
                     and p2' = v'
                     and j = j { cont = p2' }
                     in j
                  in (0, j)
               in if c' > 0
                  then (j, r')
                  else
                     let r' = let v' = let v' = 2
                           in v'
                        in v'
                     in (j, r')
            in (i, j, r')
   in (r', i, j)

cogent_ffi21 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi21 g =
   let r' = let v' = let v' = 5
         in v'
      in v'
   in (r', g) -- g: gs1
cogent_ffi22 : GlobState2 -> ( U32, GlobState2 )
cogent_ffi22 g =
   let r' = let v' = let v' = 5
         in v'
      in v'
   in (r', g) -- g: gs2
cogent_ffi23 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi23 (g1, g2) =
   let r' = let v' = let v' = 5
         in v'
      in v'
   in (r', g1, g2) -- g1: gs1, g2: gs2
cogent_ffi24 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi24 (g1, g2) =
   let r' = let v' = let v' = 5
         in v'
      in v'
   in (r', g1, g2) -- g2: gs2, g1: gs1
cogent_ffi25 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi25 g =
   let (g, r') = let (c'
                     , g) = let g = let v1' = 5
            and v' = g
            and g { cont = p0' } = v'
            and v' = v1'
            and p0' = v'
            and g = g { cont = p0' }
            in g
         in (0, g)
      in if c' > 0
         then (g, r')
         else
            let r' = let v' = let v' = 2
                  in v'
               in v'
            in (g, r')
   in (r', g) -- g: gs1
cogent_ffi26 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi26 g =
   let r' = let c' = 0
      in if c' > 0
         then r'
         else
            let r' = let v' = let v' = 2
                  in v'
               in v'
            in r'
   in (r', g) -- g: gs1 (!)
cogent_ffi27 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi27 g =
   let (g, r') = let (c'
                     , g) = let g = let v1' = 1
            and v' = g
            and g { cont = p0' } = v'
            and v' = p0'
            and v' = v' + v1'
            and p0' = v'
            and g = g { cont = p0' }
            in g
         in (0, g)
      in if c' > 0
         then (g, r')
         else
            let r' = let v' = let v' = 2
                  in v'
               in v'
            in (g, r')
   in (r', g) -- g: gs1
cogent_ffi28 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi28 (g1, g2) =
   let (g1, r') = (let (c'
                       , g1
                       , g2) = let (g1
                                   , g2) = let v1' = g2
               and g2 { cont = p1' } = v1'
               and v1' = p1'
               and v' = g1
               and g1 { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and g1 = g1 { cont = p0' }
               and g2 = g2 { cont = p1' }
               in (g1, g2)
            in (0, g1, g2)
         in if c' > 0
            then (g1, r')
            else
               let r' = let v' = let v' = 2
                     in v'
                  in v'
               in (g1, r')) !g2
   in (r', g1, g2) -- g1: gs1, g2: gs2

cogent_ffi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, GlobState1 )
cogent_ffi31 (i, g) =
   let (g, r') = (let (c'
                      , g) = let g = let v1' = i
               and i { cont = p1' } = v1'
               and v1' = p1'
               and v' = g
               and g { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and g = g { cont = p0' }
               in g
            in (0, g)
         in if c' > 0
            then (g, r')
            else
               let r' = let v' = let v' = 2
                     in v'
                  in v'
               in (g, r')) !i
   in (r', g) -- i: -ar, g: gs1
cogent_ffi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi32 (i, g) =
   let (i, r') = (let (c'
                      , i
                      , g) = let (i, g) = let v1' = g
               and g { cont = p1' } = v1'
               and v1' = p1'
               and v' = i
               and i { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and i = i { cont = p0' }
               and g = g { cont = p1' }
               in (i, g)
            in (0, i, g)
         in if c' > 0
            then (i, r')
            else
               let r' = let v' = let v' = 2
                     in v'
                  in v'
               in (i, r')) !g
   in (r', i, g) -- g: gs1
cogent_ffi33 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi33 (i, g) =
   let (i, g, r') = let (c'
                        , i
                        , g) = let (i, g) = let v2' = 1
            and v1' = g
            and g { cont = p1' } = v1'
            and v1' = p1'
            and v1' = v1' + v2'
            and (v1', p1') = (p1', v1')
            and v' = i
            and i { cont = p0' } = v'
            and v' = v1'
            and p0' = v'
            and i = i { cont = p0' }
            and g = g { cont = p1' }
            in (i, g)
         in (0, i, g)
      in if c' > 0
         then (i, g, r')
         else
            let r' = let v' = let v' = 2
                  in v'
               in v'
            in (i, g, r')
   in (r', i, g) -- g: gs1
cogent_ffi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi34 (i, j, g) =
   let (i, g, r') = (let (c'
                         , i) = (let (i, g) = let v1' = g
                  and g { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = i
                  and i { cont = p0' } = v'
                  and v' = v1'
                  and p0' = v'
                  and i = i { cont = p0' }
                  and g = g { cont = p1' }
                  in (i, g)
               in (0, i)) !g
         in if c' > 0
            then (i, g, r')
            else let (g, r') = let (c'
                                   , g) = let g = let v1' = j
                        and j { cont = p3' } = v1'
                        and v1' = p3'
                        and v' = g
                        and g { cont = p2' } = v'
                        and v' = v1'
                        and p2' = v'
                        and g = g { cont = p2' }
                        in g
                     in (0, g)
                  in if c' > 0
                     then (g, r')
                     else
                        let r' = let v' = let v' = 2
                              in v'
                           in v'
                        in (g, r')
               in (i, g, r')) !j
   in (r', i, g) -- j: -ar, g: gs1
cogent_ffi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_ffi35 (i, j, g) =
   let (i, g, r') = (let (c'
                         , i) = (let (i, g) = let v1' = g
                  and g { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = i
                  and i { cont = p0' } = v'
                  and v' = v1'
                  and p0' = v'
                  and i = i { cont = p0' }
                  and g = g { cont = p1' }
                  in (i, g)
               in (0, i)) !g
         in if c' > 0
            then (i, g, r')
            else let (g, j, r') = let (c'
                                      , g
                                      , j) = let (g, j) = let v1' = j
                        and j { cont = p3' } = v1'
                        and v1' = p3'
                        and v' = g
                        and g { cont = p2' } = v'
                        and v' = v1'
                        and p2' = v'
                        and g = g { cont = p2' }
                        and j = j { cont = p3' }
                        in (g, j)
                     in (0, g, j)
                  in if c' > 0
                     then (g, j, r')
                     else
                        let r' = let v' = let v' = 2
                              in v'
                           in v'
                        in (g, j, r')
               in (i, g, r')) !j
   in (r', i, j, g) -- g: gs1
cogent_ffi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_ffi36 (i, j, g1, g2) =
   let (i, g1, r') = (let (c'
                          , i
                          , g2) = let (i
                                      , g2) = let v1' = g2
               and g2 { cont = p1' } = v1'
               and v1' = p1'
               and v' = i
               and i { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and i = i { cont = p0' }
               and g2 = g2 { cont = p1' }
               in (i, g2)
            in (0, i, g2)
         in if c' > 0
            then (i, g1, r')
            else let (g1, j, r') = let (c'
                                       , g1
                                       , j) = let (g1, j) = let v1' = j
                        and j { cont = p3' } = v1'
                        and v1' = p3'
                        and v' = g1
                        and g1 { cont = p2' } = v'
                        and v' = v1'
                        and p2' = v'
                        and g1 = g1 { cont = p2' }
                        and j = j { cont = p3' }
                        in (g1, j)
                     in (0, g1, j)
                  in if c' > 0
                     then (g1, j, r')
                     else
                        let r' = let v' = let v' = 2
                              in v'
                           in v'
                        in (g1, j, r')
               in (i, g1, r')) !j !g2
   in (r', i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_ffi41 : Heap -> ( U32, Heap )
cogent_ffi41 heap =
   let r' = let v' = let v' = 5
         in v'
      in v'
   in (r', heap) -- ffv41: hu
cogent_ffi42 : ( GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_ffi42 (g, heap) =
   let r' = let v' = let v' = 5
         in v'
      in v'
   in (r', g, heap) -- ffv41: hu, g: gs1
cogent_ffi43 : ( MayNull (CPtr U32), Heap ) -> ( U32, Heap )
cogent_ffi43 (i, heap) =
   let r' = let c' = 0
      in if c' > 0
         then r'
         else
            let r' = let v' = let v' = 2
                  in v'
               in v'
            in r'
   in (r', heap) -- i: -ar, ffv43: hu
cogent_ffi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_ffi44 (i, heap) =
   let (i, r') = let (c'
                     , i) = let i = let v1' = 5
            and v' = i
            and i { cont = p0' } = v'
            and v' = v1'
            and p0' = v'
            and i = i { cont = p0' }
            in i
         in (0, i)
      in if c' > 0
         then (i, r')
         else
            let r' = let v' = let v' = 2
                  in v'
               in v'
            in (i, r')
   in (r', i, heap) -- ffv44: hu
cogent_ffi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_ffi45 (i, g, heap) =
   let (g, r') = (let (c'
                      , g) = let g = let v1' = i
               and i { cont = p1' } = v1'
               and v1' = p1'
               and v' = g
               and g { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and g = g { cont = p0' }
               in g
            in (0, g)
         in if c' > 0
            then (g, r')
            else
               let r' = let v' = let v' = 2
                     in v'
                  in v'
               in (g, r')) !i
   in (r', g, heap) -- i: -ar, g: gs1, ffv45: hu
cogent_ffi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi46 (i, g, heap) =
   let (i, r') = (let (c'
                      , i
                      , g) = let (i, g) = let v1' = g
               and g { cont = p1' } = v1'
               and v1' = p1'
               and v' = i
               and i { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and i = i { cont = p0' }
               and g = g { cont = p1' }
               in (i, g)
            in (0, i, g)
         in if c' > 0
            then (i, r')
            else
               let r' = let v' = let v' = 2
                     in v'
                  in v'
               in (i, r')) !g
   in (r', i, g, heap) -- g: gs1, ffv46: hu
cogent_ffi47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_ffi47 (i, j, heap) =
   let (i, r') = (let (c'
                      , i) = let i = let v1' = gencotDummy "Cannot access global variable: glob1"
                  {- *; -}
               and v' = i
               and i { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and i = i { cont = p0' }
               in i
            in (0, i)
         in if c' > 0
            then (i, r')
            else let (j, r') = let (c'
                                   , j) = let j = let v1' = j
                        and j { cont = p1' } = v1'
                        and j = j { cont = p1' }
                        in j
                     in (0, j)
                  in if c' > 0
                     then (j, r')
                     else
                        let r' = let v' = let v' = 2
                              in v'
                           in v'
                        in (j, r')
               in (i, r')) !j
   in (r', i, j, heap) -- ffv47: hu (Error: no parameter for glob1)
cogent_ffi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi48 (i, j, g, heap) =
   let (i, g, r') = (let (c'
                         , i) = (let (i, g) = let v1' = g
                  and g { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = i
                  and i { cont = p0' } = v'
                  and v' = v1'
                  and p0' = v'
                  and i = i { cont = p0' }
                  and g = g { cont = p1' }
                  in (i, g)
               in (0, i)) !g
         in if c' > 0
            then (i, g, r')
            else let (g, j, r') = let (c'
                                      , g
                                      , j) = let (g, j) = let v1' = j
                        and j { cont = p3' } = v1'
                        and v1' = p3'
                        and v' = g
                        and g { cont = p2' } = v'
                        and v' = v1'
                        and p2' = v'
                        and g = g { cont = p2' }
                        and j = j { cont = p3' }
                        in (g, j)
                     in (0, g, j)
                  in if c' > 0
                     then (g, j, r')
                     else
                        let r' = let v' = let v' = 2
                              in v'
                           in v'
                        in (g, j, r')
               in (i, g, r')) !j
   in (r', i, j, g, heap) -- g: gs1, ffv48: hu
cogent_ffi49 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi49 (i, j, g, heap) =
   let (i, r') = (let (c'
                      , i
                      , j) = let (i, j) = let v1' = j
               and j { cont = p1' } = v1'
               and v1' = p1'
               and v' = i
               and i { cont = p0' } = v'
               and v' = v1'
               and p0' = v'
               and i = i { cont = p0' }
               and j = j { cont = p1' }
               in (i, j)
            in (0, i, j)
         in if c' > 0
            then (i, r')
            else
               let r' = let v' = let v' = 2
                     in v'
                  in v'
               in (i, r')) !j
   in (r', i, j, g, heap) -- g: gs1, ffv49: hu


-- Function calls

cogent_cffv1 : () -> ()
cogent_cffv1 () = ()

cogent_cffv11 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_cffv11 i = ((), i)
cogent_cffv12 : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_cffv12 i =
   let i = let i = let v' = cogent_ffv12
         and v1' = i
         and (v', i) = v' v1'
         in i
      in i
   in ((), i)
cogent_cffv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv15 (i, j) =
   ((), i, j)
cogent_cffv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv16 (i, j) =
   let i = let i = let v' = cogent_ffv16
         and v1' = i
         and v2' = j
         and (v', i) = v' (v1', v2')
         in i
      in i
   in ((), i, j)
cogent_cffv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv17 (i, j) =
   let j = let j = let v' = cogent_ffv17
         and v1' = i
         and v2' = j
         and (v', j) = v' (v1', v2')
         in j
      in j
   in ((), i, j)
cogent_cffv18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv18 (i, j) =
   let (i, j) = let (i
                    , j) = let v' = cogent_ffv18
         and v1' = i
         and v2' = j
         and (v', i, j) = v' (v1', v2')
         in (i, j)
      in (i, j)
   in ((), i, j)

cogent_cffv21 : GlobState1 -> ( (), GlobState1 )
cogent_cffv21 g =
   let g = let g = let v' = cogent_ffv21
         and v1' = g
         and (v', g) = v' v1'
         in g
      in g
   in ((), g) -- g: gs1
cogent_cffv22 : GlobState1 -> ( (), GlobState1 )
cogent_cffv22 g = ((), g) -- g: gs1 (Error: no argument for gs2)
cogent_cffv23 : ( GlobState1, GlobState2 ) -> ( (), GlobState1, GlobState2 )
cogent_cffv23 (g1, g2) =
   let (g1, g2) = let (g1
                      , g2) = let v' = cogent_ffv23
         and v1' = g1
         and v2' = g2
         and (v', g1, g2) = v' (v1', v2')
         in (g1, g2)
      in (g1, g2)
   in ((), g1, g2) -- g1: gs1, g2: gs2

cogent_cffv31 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_cffv31 (i, g) =
   let g = let g = let v' = cogent_ffv31
         and v1' = i
         and v2' = g
         and (v', g) = v' (v1', v2')
         in g
      in g
   in ((), i, g) -- g: gs1
cogent_cffv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), GlobState1 )
cogent_cffv32 (i, g) =
   let (i, g) = let (i
                    , g) = let v' = cogent_ffv32
         and v1' = i
         and v2' = g
         and (v', i, g) = v' (v1', v2')
         in (i, g)
      in (i, g)
   in ((), i, g) -- g: gs1
cogent_cffv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffv34 (i, j, g) =
   let (i, g) = let (i
                    , g) = let v' = cogent_ffv34
         and v1' = i
         and v2' = j
         and v3' = g
         and (v', i, g) = v' (v1'
                             , v2'
                             , v3')
         in (i, g)
      in (i, g)
   in ((), i, j, g) -- g: gs1
cogent_cffv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffv35 (i, j, g) =
   let (i, j, g) = let (i
                       , j
                       , g) = let v' = cogent_ffv35
         and v1' = i
         and v2' = j
         and v3' = g
         and (v', i, j, g) = v' (v1'
                                , v2'
                                , v3')
         in (i, j, g)
      in (i, j, g)
   in ((), i, j, g) -- g: gs1
cogent_cffv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cffv36 (i, j, g1, g2) =
   let (i, j, g1, g2) = let (i
                            , j
                            , g1
                            , g2) = let v' = cogent_ffv36
         and v1' = i
         and v2' = j
         and v3' = g1
         and v4' = g2
         and (v', i, j, g1, g2) = v' (v1'
                                     , v2'
                                     , v3'
                                     , v4')
         in (i, j, g1, g2)
      in (i, j, g1, g2)
   in ((), i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_cffv41 : Heap -> ( (), Heap )
cogent_cffv41 heap =
   let heap = let heap = let v' = cogent_ffv41
         and v1' = heap
         and (v', heap) = v' v1'
         in heap
      in heap
   in ((), heap) -- cffv41: hu
cogent_cffv42 : ( GlobState1, Heap ) -> ( (), GlobState1, Heap )
cogent_cffv42 (g, heap) =
   let (g, heap) = let (g
                       , heap) = let v' = cogent_ffv42
         and v1' = g
         and v2' = heap
         and (v', g, heap) = v' (v1'
                                , v2')
         in (g, heap)
      in (g, heap)
   in ((), g, heap) -- cffv41: hu, g: gs1
cogent_cffv43 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_cffv43 (i, heap) =
   let heap = let heap = let v' = cogent_ffv43
         and v1' = i
         and v2' = heap
         and (v', heap) = v' (v1', v2')
         in heap
      in heap
   in ((), i, heap) -- cffv43: hu
cogent_cffv44 : ( MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), Heap )
cogent_cffv44 (i, heap) =
   let (i, heap) = let (i
                       , heap) = let v' = cogent_ffv44
         and v1' = i
         and v2' = heap
         and (v', i, heap) = v' (v1'
                                , v2')
         in (i, heap)
      in (i, heap)
   in ((), i, heap) -- cffv44: hu
cogent_cffv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv45 (i, g, heap) =
   let (g, heap) = let (g
                       , heap) = let v' = cogent_ffv45
         and v1' = i
         and v2' = g
         and v3' = heap
         and (v', g, heap) = v' (v1'
                                , v2'
                                , v3')
         in (g, heap)
      in (g, heap)
   in ((), i, g, heap) -- g: gs1, cffv45: hu
cogent_cffv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv46 (i, g, heap) =
   let (i, g, heap) = let (i
                          , g
                          , heap) = let v' = cogent_ffv46
         and v1' = i
         and v2' = g
         and v3' = heap
         and (v', i, g, heap) = v' (v1'
                                   , v2'
                                   , v3')
         in (i, g, heap)
      in (i, g, heap)
   in ((), i, g, heap) -- g: gs1, cffv46: hu
cogent_cffv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_cffv47 (i, j, heap) =
   let (i, j, heap) = let (i
                          , j
                          , heap) = let v' = cogent_ffv47
         and v1' = i
         and v2' = j
         and v3' = heap
         and (v', i, j, heap) = v' (v1'
                                   , v2'
                                   , v3')
         in (i, j, heap)
      in (i, j, heap)
   in ((), i, j, heap) -- cffv47: hu
cogent_cffv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( (), MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv48 (i, j, g, heap) =
   let (i, j, g, heap) = let (i
                             , j
                             , g
                             , heap) = let v' = cogent_ffv48
         and v1' = i
         and v2' = j
         and v3' = g
         and v4' = heap
         and (v'
             , i
             , j
             , g
             , heap) = v' (v1'
                          , v2'
                          , v3'
                          , v4')
         in (i, j, g, heap)
      in (i, j, g, heap)
   in ((), i, j, g, heap) -- g: gs1, cffv48: hu

cogent_cffi1 : () -> U32
cogent_cffi1 () =
   let r' = let v' = let v' = cogent_ffi1
         and v' = v' ()
         in v'
      in v'
   in r'

cogent_cffi11 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_cffi11 i =
   let r' = let v' = let v' = cogent_ffi11
         and v1' = i
         and v' = v' v1'
         in v'
      in v'
   in (r', i)
cogent_cffi12 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_cffi12 i =
   let (r', i) = let (v'
                     , i) = let v' = cogent_ffi12
         and v1' = i
         and (v', i) = v' v1'
         in (v', i)
      in (v', i)
   in (r', i)
cogent_cffi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi15 (i, j) =
   let r' = let v' = let v' = cogent_ffi15
         and v1' = i
         and v2' = j
         and v' = v' (v1', v2')
         in v'
      in v'
   in (r', i, j)
cogent_cffi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi16 (i, j) =
   let (r', i) = let (v'
                     , i) = let v' = cogent_ffi16
         and v1' = i
         and v2' = j
         and (v', i) = v' (v1', v2')
         in (v', i)
      in (v', i)
   in (r', i, j)
cogent_cffi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi17 (i, j) =
   let (r', j) = let (v'
                     , j) = let v' = cogent_ffi17
         and v1' = i
         and v2' = j
         and (v', j) = v' (v1', v2')
         in (v', j)
      in (v', j)
   in (r', i, j)
cogent_cffi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi18 (i, j) =
   let (r', i, j) = let (v'
                        , i
                        , j) = let v' = cogent_ffi18
         and v1' = i
         and v2' = j
         and (v', i, j) = v' (v1', v2')
         in (v', i, j)
      in (v', i, j)
   in (r', i, j)

cogent_cffi21 : GlobState1 -> ( U32, GlobState1 )
cogent_cffi21 g =
   let (r', g) = let (v'
                     , g) = let v' = cogent_ffi21
         and v1' = g
         and (v', g) = v' v1'
         in (v', g)
      in (v', g)
   in (r', g) -- g: gs1
cogent_cffi22 : GlobState2 -> ( U32, GlobState2 )
cogent_cffi22 g =
   let (r', g) = let (v'
                     , g) = let v' = cogent_ffi22
         and v1' = g
         and (v', g) = v' v1'
         in (v', g)
      in (v', g)
   in (r', g) -- g: gs2
cogent_cffi23 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_cffi23 (g1, g2) =
   let (r', g1, g2) = let (v'
                          , g1
                          , g2) = let v' = cogent_ffi23
         and v1' = g1
         and v2' = g2
         and (v', g1, g2) = v' (v1', v2')
         in (v', g1, g2)
      in (v', g1, g2)
   in (r', g1, g2) -- g1: gs1, g2: gs2

cogent_cffi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_cffi31 (i, g) =
   let (r', g) = let (v'
                     , g) = let v' = cogent_ffi31
         and v1' = i
         and v2' = g
         and (v', g) = v' (v1', v2')
         in (v', g)
      in (v', g)
   in (r', i, g) -- g: gs1
cogent_cffi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_cffi32 (i, g) =
   let (r', i, g) = let (v'
                        , i
                        , g) = let v' = cogent_ffi32
         and v1' = i
         and v2' = g
         and (v', i, g) = v' (v1', v2')
         in (v', i, g)
      in (v', i, g)
   in (r', i, g) -- g: gs1
cogent_cffi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffi34 (i, j, g) =
   let (r', i, g) = let (v'
                        , i
                        , g) = let v' = cogent_ffi34
         and v1' = i
         and v2' = j
         and v3' = g
         and (v', i, g) = v' (v1'
                             , v2'
                             , v3')
         in (v', i, g)
      in (v', i, g)
   in (r', i, j, g) -- g: gs1
cogent_cffi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffi35 (i, j, g) =
   let (r', i, j, g) = let (v'
                           , i
                           , j
                           , g) = let v' = cogent_ffi35
         and v1' = i
         and v2' = j
         and v3' = g
         and (v', i, j, g) = v' (v1'
                                , v2'
                                , v3')
         in (v', i, j, g)
      in (v', i, j, g)
   in (r', i, j, g) -- g: gs1
cogent_cffi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cffi36 (i, j, g1, g2) =
   let (r', i, j, g1, g2) = let (v'
                                , i
                                , j
                                , g1
                                , g2) = let v' = cogent_ffi36
         and v1' = i
         and v2' = j
         and v3' = g1
         and v4' = g2
         and (v', i, j, g1, g2) = v' (v1'
                                     , v2'
                                     , v3'
                                     , v4')
         in (v', i, j, g1, g2)
      in (v', i, j, g1, g2)
   in (r', i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_cffi41 : Heap -> ( U32, Heap )
cogent_cffi41 heap =
   let (r', heap) = let (v'
                        , heap) = let v' = cogent_ffi41
         and v1' = heap
         and (v', heap) = v' v1'
         in (v', heap)
      in (v', heap)
   in (r', heap) -- cffv41: hu
cogent_cffi42 : ( GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_cffi42 (g, heap) =
   let (r', g, heap) = let (v'
                           , g
                           , heap) = let v' = cogent_ffi42
         and v1' = g
         and v2' = heap
         and (v', g, heap) = v' (v1'
                                , v2')
         in (v', g, heap)
      in (v', g, heap)
   in (r', g, heap) -- cffv41: hu, g: gs1
cogent_cffi43 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_cffi43 (i, heap) =
   let (r', heap) = let (v'
                        , heap) = let v' = cogent_ffi43
         and v1' = i
         and v2' = heap
         and (v', heap) = v' (v1', v2')
         in (v', heap)
      in (v', heap)
   in (r', i, heap) -- cffv43: hu
cogent_cffi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_cffi44 (i, heap) =
   let (r', i, heap) = let (v'
                           , i
                           , heap) = let v' = cogent_ffi44
         and v1' = i
         and v2' = heap
         and (v', i, heap) = v' (v1'
                                , v2')
         in (v', i, heap)
      in (v', i, heap)
   in (r', i, heap) -- cffv44: hu
cogent_cffi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi45 (i, g, heap) =
   let (r', g, heap) = let (v'
                           , g
                           , heap) = let v' = cogent_ffi45
         and v1' = i
         and v2' = g
         and v3' = heap
         and (v', g, heap) = v' (v1'
                                , v2'
                                , v3')
         in (v', g, heap)
      in (v', g, heap)
   in (r', i, g, heap) -- g: gs1, cffv45: hu
cogent_cffi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi46 (i
              , heap
              , globheap1) =
   let (r'
       , i
       , heap
       , globheap1) = let (v'
                          , i
                          , heap
                          , globheap1) = let v' = cogent_ffi46
         and v1' = i
         and v2' = heap
         and v3' = globheap1
         and (v'
             , i
             , heap
             , globheap1) = v' (v1'
                               , v2'
                               , v3')
         in (v', i, heap, globheap1)
      in (v', i, heap, globheap1)
   in (r', i, heap, globheap1) -- heap: gs1, cffv46: hu
cogent_cffi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi48 (i, j, g, heap) =
   let (r'
       , i
       , j
       , g
       , heap) = let (v'
                     , i
                     , j
                     , g
                     , heap) = let v' = cogent_ffi48
         and v1' = i
         and v2' = j
         and v3' = g
         and v4' = heap
         and (v'
             , i
             , j
             , g
             , heap) = v' (v1'
                          , v2'
                          , v3'
                          , v4')
         in (v', i, j, g, heap)
      in (v', i, j, g, heap)
   in (r', i, j, g, heap) -- g: gs1, cffv48: hu
cogent_cffi49 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi49 (i, j, g, heap) =
   let (r'
       , i
       , j
       , g
       , heap) = let (v'
                     , i
                     , j
                     , g
                     , heap) = let v' = cogent_ffi49
         and v1' = i
         and v2' = j
         and v3' = g
         and v4' = heap
         and (v'
             , i
             , j
             , g
             , heap) = v' (v1'
                          , v2'
                          , v3'
                          , v4')
         in (v', i, j, g, heap)
      in (v', i, j, g, heap)
   in (r', i, j, g, heap) -- g: gs1, cffv49: hu
