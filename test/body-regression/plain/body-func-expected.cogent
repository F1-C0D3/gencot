-- Function definitions

cogent_ffv1 : () -> ()
cogent_ffv1 () = let _ = 0 in ()
cogent_ffv2 : () -> ()
cogent_ffv2 () =
   let (_
       , r') = let v' = let v' = ()
         in v'
      in (3, v')
   in ()

cogent_ffv11 : MayNull (CPtr U32) -> ()
cogent_ffv11 i = let _ = 0 in () -- i: -ar
cogent_ffv12 : MayNull (CPtr U32) -> MayNull (CPtr U32)
cogent_ffv12 i = let _ = 0 in i
cogent_ffv13 : MayNull (CPtr U32) -> ()
cogent_ffv13 i =
   let (_, i) = let (v'
                    , i) = let v1' = 5
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i)
      in (0, i)
   in () -- i: -ar 
cogent_ffv14 : MayNull (CPtr U32) -> MayNull (CPtr U32)
cogent_ffv14 i =
   let (_, i) = let (v'
                    , i) = let v1' = 5
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i)
      in (0, i)
   in i
cogent_ffv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ()
cogent_ffv15 (i
             , j) =
   let (_, i, j) = let (c'
                       , i
                       , j) = let (v'
                                  , i
                                  , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j)
         else let (c', j) = let (v'
                                , j) = let v1' = 5
                  and v' = j
                  and j { cont = p2' } = v'
                  and v' = p2'
                  and v' = v1'
                  and (v', p2') = (v', v')
                  and j = j { cont = p2' }
                  in (v', j)
               in (0, j)
            in (c', i, j)
   in () -- i: -ar, j: -ar 
cogent_ffv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> MayNull (CPtr U32)
cogent_ffv16 (i
             , j) =
   let (_, i, j) = let (c'
                       , i
                       , j) = let (v'
                                  , i
                                  , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j)
         else let (c', j) = let (v'
                                , j) = let v1' = 5
                  and v' = j
                  and j { cont = p2' } = v'
                  and v' = p2'
                  and v' = v1'
                  and (v', p2') = (v', v')
                  and j = j { cont = p2' }
                  in (v', j)
               in (0, j)
            in (c', i, j)
   in i -- j: -ar
cogent_ffv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> MayNull (CPtr U32)
cogent_ffv17 (i
             , j) =
   let (_, i, j) = let (c'
                       , i
                       , j) = let (v'
                                  , i
                                  , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j)
         else let (c', j) = let (v'
                                , j) = let v1' = 5
                  and v' = j
                  and j { cont = p2' } = v'
                  and v' = p2'
                  and v' = v1'
                  and (v', p2') = (v', v')
                  and j = j { cont = p2' }
                  in (v', j)
               in (0, j)
            in (c', i, j)
   in j -- i: -ar
cogent_ffv18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_ffv18 (i
             , j) =
   let (_, i, j) = let (c'
                       , i
                       , j) = let (v'
                                  , i
                                  , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j)
         else let (c', j) = let (v'
                                , j) = let v1' = 5
                  and v' = j
                  and j { cont = p2' } = v'
                  and v' = p2'
                  and v' = v1'
                  and (v', p2') = (v', v')
                  and j = j { cont = p2' }
                  in (v', j)
               in (0, j)
            in (c', i, j)
   in (i, j)

type GlobState1 = CPtr U32 -- glob1: gs1
type GlobState2 = CPtr U32 -- glob2: gs2

cogent_ffv21 : GlobState1 -> GlobState1
cogent_ffv21 g = let _ = 0 in g -- g: gs1
cogent_ffv22 : GlobState2 -> GlobState2
cogent_ffv22 g = let _ = 0 in g -- g: gs2
cogent_ffv23 : ( GlobState1, GlobState2 ) -> ( GlobState1, GlobState2 )
cogent_ffv23 (g1, g2) =
   let _ = 0
   in (g1, g2) -- g1: gs1, g2: gs2
cogent_ffv24 : ( GlobState1, GlobState2 ) -> ( GlobState1, GlobState2 )
cogent_ffv24 (g1, g2) =
   let _ = 0
   in (g1, g2) -- g2: gs2, g1: gs1
cogent_ffv25 : GlobState1 -> GlobState1
cogent_ffv25 g =
   let (_, cogent_glob1) = let (v'
                               , cogent_glob1) = let v1' = 5
         and v' = cogent_glob1
         and v' = v1'
         and (v', cogent_glob1) = (v'
                                  , v')
         in (v', cogent_glob1)
      in (0, cogent_glob1)
   in g -- g: gs1
cogent_ffv26 : GlobState1 -> GlobState1
cogent_ffv26 g =
   let (_, cogent_glob2) = let (v'
                               , cogent_glob2) = let v1' = 5
         and v' = cogent_glob2
         and v' = v1'
         and (v', cogent_glob2) = (v'
                                  , v')
         in (v', cogent_glob2)
      in (0, cogent_glob2)
   in g -- g: gs1 (!)
cogent_ffv27 : GlobState1 -> GlobState1
cogent_ffv27 g =
   let (_, cogent_glob1) = let (v'
                               , cogent_glob1) = let v1' = 1
         and v' = cogent_glob1
         and v' = v' + v1'
         and (v'
             , cogent_glob1) = (cogent_glob1
                               , v')
         in (v', cogent_glob1)
      in (0, cogent_glob1)
   in g -- g: gs1
cogent_ffv28 : ( GlobState1, GlobState2 ) -> ( GlobState1, GlobState2 )
cogent_ffv28 (g1, g2) =
   let (_, cogent_glob1) = let (v'
                               , cogent_glob1) = let v1' = cogent_glob2
         and v' = cogent_glob1
         and v' = v1'
         and (v', cogent_glob1) = (v'
                                  , v')
         in (v', cogent_glob1)
      in (0, cogent_glob1)
   in (g1, g2) -- g1: gs1, g2: gs2

cogent_ffv31 : ( MayNull (CPtr U32), GlobState1 ) -> GlobState1
cogent_ffv31 (i
             , g) =
   let (_
       , cogent_glob1
       , i) = let (v'
                  , cogent_glob1
                  , i) = let v1' = i
         and i { cont = p0' } = v1'
         and v1' = p0'
         and v' = cogent_glob1
         and v' = v1'
         and (v', cogent_glob1) = (v'
                                  , v')
         and i = i { cont = p0' }
         in (v', cogent_glob1, i)
      in (0, cogent_glob1, i)
   in g -- i: -ar, g: gs1
cogent_ffv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_ffv32 (i
             , g) =
   let (_, i) = let (v'
                    , i) = let v1' = cogent_glob1
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i)
      in (0, i)
   in (i, g) -- g: gs1
cogent_ffv33 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_ffv33 (i
             , g) =
   let (_
       , i
       , cogent_glob1) = let (v'
                             , i
                             , cogent_glob1) = let v2' = 1
         and v1' = cogent_glob1
         and v1' = v1' + v2'
         and (v1'
             , cogent_glob1) = (cogent_glob1
                               , v1')
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i, cogent_glob1)
      in (0, i, cogent_glob1)
   in (i, g) -- g: gs1
cogent_ffv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_ffv34 (i
             , j
             , g) =
   let (_
       , i
       , cogent_glob1
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob1, j)
         else let (c'
                  , cogent_glob1
                  , j) = let (v'
                             , cogent_glob1
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob1
                  and v' = v1'
                  and (v', cogent_glob1) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob1, j)
               in (0, cogent_glob1, j)
            in (c', i, cogent_glob1, j)
   in (i, g) -- j: -ar, g: gs1
cogent_ffv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_ffv35 (i
             , j
             , g) =
   let (_
       , i
       , cogent_glob1
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob1, j)
         else let (c'
                  , cogent_glob1
                  , j) = let (v'
                             , cogent_glob1
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob1
                  and v' = v1'
                  and (v', cogent_glob1) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob1, j)
               in (0, cogent_glob1, j)
            in (c', i, cogent_glob1, j)
   in (i, j, g) -- g: gs1
cogent_ffv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_ffv36 (i
             , j
             , g1
             , g2) =
   let (_
       , i
       , cogent_glob2
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob2, j)
         else let (c'
                  , cogent_glob2
                  , j) = let (v'
                             , cogent_glob2
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob2
                  and v' = v1'
                  and (v', cogent_glob2) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob2, j)
               in (0, cogent_glob2, j)
            in (c', i, cogent_glob2, j)
   in (i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_ffv41 : Heap -> Heap
cogent_ffv41 heap =
   let _ = 0
   in heap -- ffv41: hu
cogent_ffv42 : ( GlobState1, Heap ) -> ( GlobState1, Heap )
cogent_ffv42 (g, heap) =
   let _ = 0
   in (g, heap) -- ffv41: hu, g: gs1
cogent_ffv43 : ( MayNull (CPtr U32), Heap ) -> Heap
cogent_ffv43 (i
             , heap) =
   let (_, i) = let (v'
                    , i) = let v1' = 5
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i)
      in (0, i)
   in heap -- i: -ar, ffv43: hu
cogent_ffv44 : ( MayNull (CPtr U32), Heap ) -> ( MayNull (CPtr U32), Heap )
cogent_ffv44 (i
             , heap) =
   let (_, i) = let (v'
                    , i) = let v1' = 5
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i)
      in (0, i)
   in (i, heap) -- ffv44: hu
cogent_ffv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( GlobState1, Heap )
cogent_ffv45 (i
             , g
             , heap) =
   let (_
       , cogent_glob1
       , i) = let (v'
                  , cogent_glob1
                  , i) = let v1' = i
         and i { cont = p0' } = v1'
         and v1' = p0'
         and v' = cogent_glob1
         and v' = v1'
         and (v', cogent_glob1) = (v'
                                  , v')
         and i = i { cont = p0' }
         in (v', cogent_glob1, i)
      in (0, cogent_glob1, i)
   in (g, heap) -- i: -ar, g: gs1, ffv45: hu
cogent_ffv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( MayNull (CPtr U32), GlobState1, Heap )
cogent_ffv46 (i
             , g
             , heap) =
   let (_, i) = let (v'
                    , i) = let v1' = cogent_glob1
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i)
      in (0, i)
   in (i, g, heap) -- g: gs1, ffv46: hu
cogent_ffv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_ffv47 (i
             , j
             , heap) =
   let (_
       , i
       , cogent_glob1
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob1, j)
         else let (c'
                  , cogent_glob1
                  , j) = let (v'
                             , cogent_glob1
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob1
                  and v' = v1'
                  and (v', cogent_glob1) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob1, j)
               in (0, cogent_glob1, j)
            in (c', i, cogent_glob1, j)
   in (i, j, heap) -- ffv47: hu
cogent_ffv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffv48 (i
             , j
             , g
             , heap) =
   let (_
       , i
       , cogent_glob1
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob1, j)
         else let (c'
                  , cogent_glob1
                  , j) = let (v'
                             , cogent_glob1
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob1
                  and v' = v1'
                  and (v', cogent_glob1) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob1, j)
               in (0, cogent_glob1, j)
            in (c', i, cogent_glob1, j)
   in (i, j, g, heap) -- g: gs1, ffv48: hu


cogent_ffi1 : () -> U32
cogent_ffi1 () =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in r'

cogent_ffi11 : MayNull (CPtr U32) -> U32
cogent_ffi11 i =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in r' -- i: -ar
cogent_ffi12 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_ffi12 i =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', i)
cogent_ffi13 : MayNull (CPtr U32) -> U32
cogent_ffi13 i =
   let (_, i, r') = let (c'
                        , i) = let (v', i) = let v1' = 5
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in r' -- i: -ar 
cogent_ffi14 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_ffi14 i =
   let (_, i, r') = let (c'
                        , i) = let (v', i) = let v1' = 5
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', i)
cogent_ffi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> U32
cogent_ffi15 (i
             , j) =
   let (_, i, j, r') = let (c'
                           , i
                           , j) = let (v'
                                      , i
                                      , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v', j) = let v1' = 5
                     and v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and v' = v1'
                     and (v', p2') = (v', v')
                     and j = j { cont = p2' }
                     in (v', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', i, j, r')
   in r' -- i: -ar, j: -ar 
cogent_ffi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_ffi16 (i
             , j) =
   let (_, i, j, r') = let (c'
                           , i
                           , j) = let (v'
                                      , i
                                      , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v', j) = let v1' = 5
                     and v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and v' = v1'
                     and (v', p2') = (v', v')
                     and j = j { cont = p2' }
                     in (v', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', i, j, r')
   in (r', i) -- j: -ar
cogent_ffi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32) )
cogent_ffi17 (i
             , j) =
   let (_, i, j, r') = let (c'
                           , i
                           , j) = let (v'
                                      , i
                                      , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v', j) = let v1' = 5
                     and v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and v' = v1'
                     and (v', p2') = (v', v')
                     and j = j { cont = p2' }
                     in (v', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', i, j, r')
   in (r', j) -- i: -ar
cogent_ffi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_ffi18 (i
             , j) =
   let (_, i, j, r') = let (c'
                           , i
                           , j) = let (v'
                                      , i
                                      , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v', j) = let v1' = 5
                     and v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and v' = v1'
                     and (v', p2') = (v', v')
                     and j = j { cont = p2' }
                     in (v', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', i, j, r')
   in (r', i, j)

cogent_ffi21 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi21 g =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', g) -- g: gs1
cogent_ffi22 : GlobState2 -> ( U32, GlobState2 )
cogent_ffi22 g =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', g) -- g: gs2
cogent_ffi23 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi23 (g1, g2) =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', g1, g2) -- g1: gs1, g2: gs2
cogent_ffi24 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi24 (g1, g2) =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', g1, g2) -- g2: gs2, g1: gs1
cogent_ffi25 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi25 g =
   let (_
       , cogent_glob1
       , r') = let (c'
                   , cogent_glob1) = let (v'
                                         , cogent_glob1) = let v1' = 5
            and v' = cogent_glob1
            and v' = v1'
            and (v', cogent_glob1) = (v'
                                     , v')
            in (v', cogent_glob1)
         in (0, cogent_glob1)
      in if c' > 0
         then (c', cogent_glob1, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', cogent_glob1, r')
   in (r', g) -- g: gs1
cogent_ffi26 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi26 g =
   let (_
       , cogent_glob2
       , r') = let (c'
                   , cogent_glob2) = let (v'
                                         , cogent_glob2) = let v1' = 5
            and v' = cogent_glob2
            and v' = v1'
            and (v', cogent_glob2) = (v'
                                     , v')
            in (v', cogent_glob2)
         in (0, cogent_glob2)
      in if c' > 0
         then (c', cogent_glob2, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', cogent_glob2, r')
   in (r', g) -- g: gs1 (!)
cogent_ffi27 : GlobState1 -> ( U32, GlobState1 )
cogent_ffi27 g =
   let (_
       , cogent_glob1
       , r') = let (c'
                   , cogent_glob1) = let (v'
                                         , cogent_glob1) = let v1' = 1
            and v' = cogent_glob1
            and v' = v' + v1'
            and (v'
                , cogent_glob1) = (cogent_glob1
                                  , v')
            in (v', cogent_glob1)
         in (0, cogent_glob1)
      in if c' > 0
         then (c', cogent_glob1, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', cogent_glob1, r')
   in (r', g) -- g: gs1
cogent_ffi28 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_ffi28 (g1, g2) =
   let (_
       , cogent_glob1
       , r') = let (c'
                   , cogent_glob1) = let (v'
                                         , cogent_glob1) = let v1' = cogent_glob2
            and v' = cogent_glob1
            and v' = v1'
            and (v', cogent_glob1) = (v'
                                     , v')
            in (v', cogent_glob1)
         in (0, cogent_glob1)
      in if c' > 0
         then (c', cogent_glob1, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', cogent_glob1, r')
   in (r', g1, g2) -- g1: gs1, g2: gs2

cogent_ffi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, GlobState1 )
cogent_ffi31 (i
             , g) =
   let (_
       , cogent_glob1
       , i
       , r') = let (c'
                   , cogent_glob1
                   , i) = let (v'
                              , cogent_glob1
                              , i) = let v1' = i
            and i { cont = p0' } = v1'
            and v1' = p0'
            and v' = cogent_glob1
            and v' = v1'
            and (v', cogent_glob1) = (v'
                                     , v')
            and i = i { cont = p0' }
            in (v', cogent_glob1, i)
         in (0, cogent_glob1, i)
      in if c' > 0
         then (c', cogent_glob1, i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', cogent_glob1, i, r')
   in (r', g) -- i: -ar, g: gs1
cogent_ffi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi32 (i
             , g) =
   let (_, i, r') = let (c'
                        , i) = let (v'
                                   , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', i, g) -- g: gs1
cogent_ffi33 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi33 (i
             , g) =
   let (_
       , i
       , cogent_glob1
       , r') = let (c'
                   , i
                   , cogent_glob1) = let (v'
                                         , i
                                         , cogent_glob1) = let v2' = 1
            and v1' = cogent_glob1
            and v1' = v1' + v2'
            and (v1'
                , cogent_glob1) = (cogent_glob1
                                  , v1')
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i, cogent_glob1)
         in (0, i, cogent_glob1)
      in if c' > 0
         then (c', i, cogent_glob1, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, cogent_glob1, r')
   in (r', i, g) -- g: gs1
cogent_ffi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_ffi34 (i
             , j
             , g) =
   let (_
       , i
       , cogent_glob1
       , j
       , r') = let (c', i) = let (v'
                                 , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c'
              , i
              , cogent_glob1
              , j
              , r')
         else let (c'
                  , cogent_glob1
                  , j
                  , r') = let (c'
                              , cogent_glob1
                              , j) = let (v'
                                         , cogent_glob1
                                         , j) = let v1' = j
                     and j { cont = p1' } = v1'
                     and v1' = p1'
                     and v' = cogent_glob1
                     and v' = v1'
                     and (v', cogent_glob1) = (v'
                                              , v')
                     and j = j { cont = p1' }
                     in (v', cogent_glob1, j)
                  in (0, cogent_glob1, j)
               in if c' > 0
                  then (c', cogent_glob1, j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', cogent_glob1, j, r')
            in (c', i, cogent_glob1, j, r')
   in (r', i, g) -- j: -ar, g: gs1
cogent_ffi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_ffi35 (i
             , j
             , g) =
   let (_
       , i
       , cogent_glob1
       , j
       , r') = let (c', i) = let (v'
                                 , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c'
              , i
              , cogent_glob1
              , j
              , r')
         else let (c'
                  , cogent_glob1
                  , j
                  , r') = let (c'
                              , cogent_glob1
                              , j) = let (v'
                                         , cogent_glob1
                                         , j) = let v1' = j
                     and j { cont = p1' } = v1'
                     and v1' = p1'
                     and v' = cogent_glob1
                     and v' = v1'
                     and (v', cogent_glob1) = (v'
                                              , v')
                     and j = j { cont = p1' }
                     in (v', cogent_glob1, j)
                  in (0, cogent_glob1, j)
               in if c' > 0
                  then (c', cogent_glob1, j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', cogent_glob1, j, r')
            in (c', i, cogent_glob1, j, r')
   in (r', i, j, g) -- g: gs1
cogent_ffi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_ffi36 (i
             , j
             , g1
             , g2) =
   let (_
       , i
       , cogent_glob1
       , j
       , r') = let (c', i) = let (v'
                                 , i) = let v1' = cogent_glob2
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c'
              , i
              , cogent_glob1
              , j
              , r')
         else let (c'
                  , cogent_glob1
                  , j
                  , r') = let (c'
                              , cogent_glob1
                              , j) = let (v'
                                         , cogent_glob1
                                         , j) = let v1' = j
                     and j { cont = p1' } = v1'
                     and v1' = p1'
                     and v' = cogent_glob1
                     and v' = v1'
                     and (v', cogent_glob1) = (v'
                                              , v')
                     and j = j { cont = p1' }
                     in (v', cogent_glob1, j)
                  in (0, cogent_glob1, j)
               in if c' > 0
                  then (c', cogent_glob1, j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', cogent_glob1, j, r')
            in (c', i, cogent_glob1, j, r')
   in (r', i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_ffi41 : Heap -> ( U32, Heap )
cogent_ffi41 heap =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', heap) -- ffv41: hu
cogent_ffi42 : ( GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_ffi42 (g, heap) =
   let (_
       , r') = let v' = let v' = 5
         in v'
      in (3, v')
   in (r', g, heap) -- ffv41: hu, g: gs1
cogent_ffi43 : ( MayNull (CPtr U32), Heap ) -> ( U32, Heap )
cogent_ffi43 (i
             , heap) =
   let (_, i, r') = let (c'
                        , i) = let (v', i) = let v1' = 5
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', heap) -- i: -ar, ffv43: hu
cogent_ffi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_ffi44 (i
             , heap) =
   let (_, i, r') = let (c'
                        , i) = let (v', i) = let v1' = 5
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', i, heap) -- ffv44: hu
cogent_ffi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_ffi45 (i
             , g
             , heap) =
   let (_
       , cogent_glob1
       , i
       , r') = let (c'
                   , cogent_glob1
                   , i) = let (v'
                              , cogent_glob1
                              , i) = let v1' = i
            and i { cont = p0' } = v1'
            and v1' = p0'
            and v' = cogent_glob1
            and v' = v1'
            and (v', cogent_glob1) = (v'
                                     , v')
            and i = i { cont = p0' }
            in (v', cogent_glob1, i)
         in (0, cogent_glob1, i)
      in if c' > 0
         then (c', cogent_glob1, i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', cogent_glob1, i, r')
   in (r', g, heap) -- i: -ar, g: gs1, ffv45: hu
cogent_ffi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi46 (i
             , g
             , heap) =
   let (_, i, r') = let (c'
                        , i) = let (v'
                                   , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', i, g, heap) -- g: gs1, ffv46: hu
cogent_ffi47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_ffi47 (i
             , j
             , heap) =
   let (_
       , i
       , cogent_glob1
       , j
       , r') = let (c', i) = let (v'
                                 , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c'
              , i
              , cogent_glob1
              , j
              , r')
         else let (c'
                  , cogent_glob1
                  , j
                  , r') = let (c'
                              , cogent_glob1
                              , j) = let (v'
                                         , cogent_glob1
                                         , j) = let v1' = j
                     and j { cont = p1' } = v1'
                     and v1' = p1'
                     and v' = cogent_glob1
                     and v' = v1'
                     and (v', cogent_glob1) = (v'
                                              , v')
                     and j = j { cont = p1' }
                     in (v', cogent_glob1, j)
                  in (0, cogent_glob1, j)
               in if c' > 0
                  then (c', cogent_glob1, j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', cogent_glob1, j, r')
            in (c', i, cogent_glob1, j, r')
   in (r', i, j, heap) -- ffv47: hu (Error: no parameter for glob1) 
cogent_ffi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi48 (i
             , j
             , g
             , heap) =
   let (_
       , i
       , cogent_glob1
       , j
       , r') = let (c', i) = let (v'
                                 , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c'
              , i
              , cogent_glob1
              , j
              , r')
         else let (c'
                  , cogent_glob1
                  , j
                  , r') = let (c'
                              , cogent_glob1
                              , j) = let (v'
                                         , cogent_glob1
                                         , j) = let v1' = j
                     and j { cont = p1' } = v1'
                     and v1' = p1'
                     and v' = cogent_glob1
                     and v' = v1'
                     and (v', cogent_glob1) = (v'
                                              , v')
                     and j = j { cont = p1' }
                     in (v', cogent_glob1, j)
                  in (0, cogent_glob1, j)
               in if c' > 0
                  then (c', cogent_glob1, j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', cogent_glob1, j, r')
            in (c', i, cogent_glob1, j, r')
   in (r', i, j, g, heap) -- g: gs1, ffv48: hu
cogent_ffi49 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_ffi49 (i
             , j
             , g
             , heap) =
   let (_, i, j, r') = let (c'
                           , i
                           , j) = let (v'
                                      , i
                                      , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, j, r')
   in (r', i, j, g, heap) -- g: gs1, ffv49: hu


cogent_mfv11 : MayNull (CPtr U32) -> ()
cogent_mfv11 i = let _ = 0 in () -- i: -ar mf (Error: Wrong result type)
cogent_mfv12 : MayNull (CPtr U32) -> MayNull (CPtr U32)
cogent_mfv12 i = let _ = 0 in i -- i: mf
cogent_mfv13 : MayNull (CPtr U32) -> ()
cogent_mfv13 i =
   let (_, i) = let (v'
                    , i) = let v1' = 5
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i)
      in (0, i)
   in () -- i: -ar mf (Error: Wrong result type)
cogent_mfv14 : MayNull (CPtr U32) -> MayNull (CPtr U32)
cogent_mfv14 i =
   let (_, i) = let (v'
                    , i) = let v1' = 5
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i)
      in (0, i)
   in i -- i: mf
cogent_mfv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_mfv15 (i
             , j) =
   let (_, i, j) = let (c'
                       , i
                       , j) = let (v'
                                  , i
                                  , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j)
         else let (c', j) = let (v'
                                , j) = let v1' = 5
                  and v' = j
                  and j { cont = p2' } = v'
                  and v' = p2'
                  and v' = v1'
                  and (v', p2') = (v', v')
                  and j = j { cont = p2' }
                  in (v', j)
               in (0, j)
            in (c', i, j)
   in (i, j) -- i: mf
cogent_mfv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_mfv16 (i
             , j) =
   let (_, i, j) = let (c'
                       , i
                       , j) = let (v'
                                  , i
                                  , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j)
         else let (c', j) = let (v'
                                , j) = let v1' = 5
                  and v' = j
                  and j { cont = p2' } = v'
                  and v' = p2'
                  and v' = v1'
                  and (v', p2') = (v', v')
                  and j = j { cont = p2' }
                  in (v', j)
               in (0, j)
            in (c', i, j)
   in (i, j) -- j: mf
cogent_mfv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_mfv17 (i
             , j) =
   let (_, i, j) = let (c'
                       , i
                       , j) = let (v'
                                  , i
                                  , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j)
         else let (c', j) = let (v'
                                , j) = let v1' = 5
                  and v' = j
                  and j { cont = p2' } = v'
                  and v' = p2'
                  and v' = v1'
                  and (v', p2') = (v', v')
                  and j = j { cont = p2' }
                  in (v', j)
               in (0, j)
            in (c', i, j)
   in (i, j) -- i: mf, j: mf (Ignored for j)

cogent_mfv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_mfv32 (i
             , g) =
   let (_, i) = let (v'
                    , i) = let v1' = cogent_glob1
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i)
      in (0, i)
   in (i, g) -- g: gs1, i: mf
cogent_mfv33 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_mfv33 (i
             , g) =
   let (_
       , i
       , cogent_glob1) = let (v'
                             , i
                             , cogent_glob1) = let v2' = 1
         and v1' = cogent_glob1
         and v1' = v1' + v2'
         and (v1'
             , cogent_glob1) = (cogent_glob1
                               , v1')
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i, cogent_glob1)
      in (0, i, cogent_glob1)
   in (i, g) -- g: gs1 mf
cogent_mfv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_mfv34 (i
             , j
             , g) =
   let (_
       , i
       , cogent_glob1
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob1, j)
         else let (c'
                  , cogent_glob1
                  , j) = let (v'
                             , cogent_glob1
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob1
                  and v' = v1'
                  and (v', cogent_glob1) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob1, j)
               in (0, cogent_glob1, j)
            in (c', i, cogent_glob1, j)
   in (i, g) -- j: -ar, g: gs1 mf
cogent_mfv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_mfv35 (i
             , j
             , g) =
   let (_
       , i
       , cogent_glob1
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob1, j)
         else let (c'
                  , cogent_glob1
                  , j) = let (v'
                             , cogent_glob1
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob1
                  and v' = v1'
                  and (v', cogent_glob1) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob1, j)
               in (0, cogent_glob1, j)
            in (c', i, cogent_glob1, j)
   in (i, j, g) -- g: gs1 mf
cogent_mfv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_mfv36 (i
             , j
             , g1
             , g2) =
   let (_
       , i
       , cogent_glob2
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob2, j)
         else let (c'
                  , cogent_glob2
                  , j) = let (v'
                             , cogent_glob2
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob2
                  and v' = v1'
                  and (v', cogent_glob2) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob2, j)
               in (0, cogent_glob2, j)
            in (c', i, cogent_glob2, j)
   in (i, j, g1, g2) -- g1: gs1, g2: gs2 mf
cogent_mfv37 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_mfv37 (i
             , j
             , g) =
   let (_
       , i
       , cogent_glob1
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob1, j)
         else let (c'
                  , cogent_glob1
                  , j) = let (v'
                             , cogent_glob1
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob1
                  and v' = v1'
                  and (v', cogent_glob1) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob1, j)
               in (0, cogent_glob1, j)
            in (c', i, cogent_glob1, j)
   in (i, g) -- j: -ar, g: gs1, i: mf
cogent_mfv38 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_mfv38 (i
             , j
             , g) =
   let (_
       , i
       , cogent_glob1
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob1, j)
         else let (c'
                  , cogent_glob1
                  , j) = let (v'
                             , cogent_glob1
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob1
                  and v' = v1'
                  and (v', cogent_glob1) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob1, j)
               in (0, cogent_glob1, j)
            in (c', i, cogent_glob1, j)
   in (i, j, g) -- g: gs1, j: mf

cogent_mfv44 : ( MayNull (CPtr U32), Heap ) -> ( MayNull (CPtr U32), Heap )
cogent_mfv44 (i
             , heap) =
   let (_, i) = let (v'
                    , i) = let v1' = 5
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i)
      in (0, i)
   in (i, heap) -- mfv44: hu, i: mf
cogent_mfv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( GlobState1, Heap )
cogent_mfv45 (i
             , g
             , heap) =
   let (_
       , cogent_glob1
       , i) = let (v'
                  , cogent_glob1
                  , i) = let v1' = i
         and i { cont = p0' } = v1'
         and v1' = p0'
         and v' = cogent_glob1
         and v' = v1'
         and (v', cogent_glob1) = (v'
                                  , v')
         and i = i { cont = p0' }
         in (v', cogent_glob1, i)
      in (0, cogent_glob1, i)
   in (g, heap) -- i: -ar, g: gs1 mf, mfv45: hu
cogent_mfv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( MayNull (CPtr U32), GlobState1, Heap )
cogent_mfv46 (i
             , g
             , heap) =
   let (_, i) = let (v'
                    , i) = let v1' = cogent_glob1
         and v' = i
         and i { cont = p0' } = v'
         and v' = p0'
         and v' = v1'
         and (v', p0') = (v', v')
         and i = i { cont = p0' }
         in (v', i)
      in (0, i)
   in (i, g, heap) -- g: gs1 mf, mfv46: hu
cogent_mfv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_mfv47 (i
             , j
             , heap) =
   let (_
       , i
       , cogent_glob1
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob1, j)
         else let (c'
                  , cogent_glob1
                  , j) = let (v'
                             , cogent_glob1
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob1
                  and v' = v1'
                  and (v', cogent_glob1) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob1, j)
               in (0, cogent_glob1, j)
            in (c', i, cogent_glob1, j)
   in (i, j, heap) -- mfv47: hu, i: mf
cogent_mfv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_mfv48 (i
             , j
             , g
             , heap) =
   let (_
       , i
       , cogent_glob1
       , j) = let (c', i) = let (v'
                                , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, cogent_glob1, j)
         else let (c'
                  , cogent_glob1
                  , j) = let (v'
                             , cogent_glob1
                             , j) = let v1' = j
                  and j { cont = p1' } = v1'
                  and v1' = p1'
                  and v' = cogent_glob1
                  and v' = v1'
                  and (v', cogent_glob1) = (v'
                                           , v')
                  and j = j { cont = p1' }
                  in (v', cogent_glob1, j)
               in (0, cogent_glob1, j)
            in (c', i, cogent_glob1, j)
   in (i, j, g, heap) -- g: gs1, mfv48: hu, j: mf

cogent_mfi11 : MayNull (CPtr U32) -> MayNull (CPtr U32)
cogent_mfi11 i =
   let (_
       , r') = let v' = let v' = i
         in v'
      in (3, v')
   in r' -- i: -ar mf
cogent_mfi12 : MayNull (CPtr U32) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_mfi12 i =
   let (_
       , r') = let v' = let v' = i
         in v'
      in (3, v')
   in (r', i) -- i: mf
cogent_mfi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> MayNull (CPtr U32)
cogent_mfi15 (i
             , j) =
   let (_, i, j, r') = let (c'
                           , i
                           , j) = let (v'
                                      , i
                                      , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v', j) = let v1' = 5
                     and v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and v' = v1'
                     and (v', p2') = (v', v')
                     and j = j { cont = p2' }
                     in (v', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = j
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', i, j, r')
   in r' -- i: -ar, j: -ar mf 
cogent_mfi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_mfi16 (i
             , j) =
   let (_, i, j, r') = let (c'
                           , i
                           , j) = let (v'
                                      , i
                                      , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v', j) = let v1' = 5
                     and v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and v' = v1'
                     and (v', p2') = (v', v')
                     and j = j { cont = p2' }
                     in (v', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = i
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', i, j, r')
   in (r', i) -- j: -ar, i: mf
cogent_mfi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_mfi17 (i
             , j) =
   let (_, i, j, r') = let (c'
                           , i
                           , j) = let (v'
                                      , i
                                      , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v', j) = let v1' = 5
                     and v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and v' = v1'
                     and (v', p2') = (v', v')
                     and j = j { cont = p2' }
                     in (v', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = i
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', i, j, r')
   in (r', j) -- i: -ar mf
cogent_mfi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_mfi18 (i
             , j) =
   let (_, i, j, r') = let (c'
                           , i
                           , j) = let (v'
                                      , i
                                      , j) = let v1' = j
            and j { cont = p1' } = v1'
            and v1' = p1'
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            and j = j { cont = p1' }
            in (v', i, j)
         in (0, i, j)
      in if c' > 0
         then (c', i, j, r')
         else let (c', j, r') = let (c'
                                    , j) = let (v', j) = let v1' = 5
                     and v' = j
                     and j { cont = p2' } = v'
                     and v' = p2'
                     and v' = v1'
                     and (v', p2') = (v', v')
                     and j = j { cont = p2' }
                     in (v', j)
                  in (0, j)
               in if c' > 0
                  then (c', j, r')
                  else let (c'
                           , r') = let v' = let v' = j
                           in v'
                        in (3, v')
                     in (c', j, r')
            in (c', i, j, r')
   in (r', i, j) -- j: mf

cogent_mfi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_mfi31 (i
             , g) =
   let (_
       , cogent_glob1
       , i
       , r') = let (c'
                   , cogent_glob1
                   , i) = let (v'
                              , cogent_glob1
                              , i) = let v1' = i
            and i { cont = p0' } = v1'
            and v1' = p0'
            and v' = cogent_glob1
            and v' = v1'
            and (v', cogent_glob1) = (v'
                                     , v')
            and i = i { cont = p0' }
            in (v', cogent_glob1, i)
         in (0, cogent_glob1, i)
      in if c' > 0
         then (c', cogent_glob1, i, r')
         else let (c'
                  , r') = let v' = let v' = i
                  in v'
               in (3, v')
            in (c', cogent_glob1, i, r')
   in (r', g) -- i: -ar, g: gs1 mf
cogent_mfi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_mfi32 (i
             , g) =
   let (_, i, r') = let (c'
                        , i) = let (v'
                                   , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = i
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', i, g) -- g: gs1, i: mf
cogent_mfi33 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_mfi33 (i
             , g) =
   let (_
       , i
       , cogent_glob1
       , r') = let (c'
                   , i
                   , cogent_glob1) = let (v'
                                         , i
                                         , cogent_glob1) = let v2' = 1
            and v1' = cogent_glob1
            and v1' = v1' + v2'
            and (v1'
                , cogent_glob1) = (cogent_glob1
                                  , v1')
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i, cogent_glob1)
         in (0, i, cogent_glob1)
      in if c' > 0
         then (c', i, cogent_glob1, r')
         else let (c'
                  , r') = let v' = let v' = cogent_glob1
                  in v'
               in (3, v')
            in (c', i, cogent_glob1, r')
   in (r', i, g) -- g: gs1 mf
cogent_mfi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_mfi34 (i
             , j
             , g) =
   let (_
       , i
       , cogent_glob1
       , j
       , r') = let (c', i) = let (v'
                                 , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c'
              , i
              , cogent_glob1
              , j
              , r')
         else let (c'
                  , cogent_glob1
                  , j
                  , r') = let (c'
                              , cogent_glob1
                              , j) = let (v'
                                         , cogent_glob1
                                         , j) = let v1' = j
                     and j { cont = p1' } = v1'
                     and v1' = p1'
                     and v' = cogent_glob1
                     and v' = v1'
                     and (v', cogent_glob1) = (v'
                                              , v')
                     and j = j { cont = p1' }
                     in (v', cogent_glob1, j)
                  in (0, cogent_glob1, j)
               in if c' > 0
                  then (c', cogent_glob1, j, r')
                  else let (c'
                           , r') = let v' = let v' = cogent_glob1
                           in v'
                        in (3, v')
                     in (c', cogent_glob1, j, r')
            in (c', i, cogent_glob1, j, r')
   in (r', i, g) -- j: -ar, g: -ar gs1 mf
cogent_mfi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_mfi35 (i
             , j
             , g) =
   let (_
       , i
       , cogent_glob1
       , j
       , r') = let (c', i) = let (v'
                                 , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c'
              , i
              , cogent_glob1
              , j
              , r')
         else let (c'
                  , cogent_glob1
                  , j
                  , r') = let (c'
                              , cogent_glob1
                              , j) = let (v'
                                         , cogent_glob1
                                         , j) = let v1' = j
                     and j { cont = p1' } = v1'
                     and v1' = p1'
                     and v' = cogent_glob1
                     and v' = v1'
                     and (v', cogent_glob1) = (v'
                                              , v')
                     and j = j { cont = p1' }
                     in (v', cogent_glob1, j)
                  in (0, cogent_glob1, j)
               in if c' > 0
                  then (c', cogent_glob1, j, r')
                  else let (c'
                           , r') = let v' = let v' = cogent_glob1
                           in v'
                        in (3, v')
                     in (c', cogent_glob1, j, r')
            in (c', i, cogent_glob1, j, r')
   in (r', i, j, g) -- g: gs1, i: mf
cogent_mfi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_mfi36 (i
             , j
             , g1
             , g2) =
   let (_
       , i
       , cogent_glob1
       , j
       , r') = let (c', i) = let (v'
                                 , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c'
              , i
              , cogent_glob1
              , j
              , r')
         else let (c'
                  , cogent_glob1
                  , j
                  , r') = let (c'
                              , cogent_glob1
                              , j) = let (v'
                                         , cogent_glob1
                                         , j) = let v1' = j
                     and j { cont = p1' } = v1'
                     and v1' = p1'
                     and v' = cogent_glob1
                     and v' = v1'
                     and (v', cogent_glob1) = (v'
                                              , v')
                     and j = j { cont = p1' }
                     in (v', cogent_glob1, j)
                  in (0, cogent_glob1, j)
               in if c' > 0
                  then (c', cogent_glob1, j, r')
                  else let (c'
                           , r') = let v' = let v' = cogent_glob2
                           in v'
                        in (3, v')
                     in (c', cogent_glob1, j, r')
            in (c', i, cogent_glob1, j, r')
   in (r', i, j, g1, g2) -- g1: gs1, g2: gs2 mf

cogent_mfi43 : ( MayNull (CPtr U32), Heap ) -> ( MayNull (CPtr U32), Heap )
cogent_mfi43 (i
             , heap) =
   let (_, i, r') = let (c'
                        , i) = let (v', i) = let v1' = 5
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = i
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', heap) -- i: -ar mf, mfv43: hu
cogent_mfi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_mfi44 (i
             , heap) =
   let (_, i, r') = let (c'
                        , i) = let (v', i) = let v1' = 5
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', i, heap) -- mfv44: hu, i: mf
cogent_mfi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_mfi45 (i
             , g
             , heap) =
   let (_
       , cogent_glob1
       , i
       , r') = let (c'
                   , cogent_glob1
                   , i) = let (v'
                              , cogent_glob1
                              , i) = let v1' = i
            and i { cont = p0' } = v1'
            and v1' = p0'
            and v' = cogent_glob1
            and v' = v1'
            and (v', cogent_glob1) = (v'
                                     , v')
            and i = i { cont = p0' }
            in (v', cogent_glob1, i)
         in (0, cogent_glob1, i)
      in if c' > 0
         then (c', cogent_glob1, i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', cogent_glob1, i, r')
   in (r', g, heap) -- i: -ar, g: gs1 mf, mfv45: hu
cogent_mfi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_mfi46 (i
             , g
             , heap) =
   let (_, i, r') = let (c'
                        , i) = let (v'
                                   , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c', i, r')
         else let (c'
                  , r') = let v' = let v' = 2
                  in v'
               in (3, v')
            in (c', i, r')
   in (r', i, g, heap) -- g: gs1, mfv46: hu, i: mf
cogent_mfi47 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_mfi47 (i
             , j
             , g
             , heap) =
   let (_
       , i
       , cogent_glob1
       , j
       , r') = let (c', i) = let (v'
                                 , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c'
              , i
              , cogent_glob1
              , j
              , r')
         else let (c'
                  , cogent_glob1
                  , j
                  , r') = let (c'
                              , cogent_glob1
                              , j) = let (v'
                                         , cogent_glob1
                                         , j) = let v1' = j
                     and j { cont = p1' } = v1'
                     and v1' = p1'
                     and v' = cogent_glob1
                     and v' = v1'
                     and (v', cogent_glob1) = (v'
                                              , v')
                     and j = j { cont = p1' }
                     in (v', cogent_glob1, j)
                  in (0, cogent_glob1, j)
               in if c' > 0
                  then (c', cogent_glob1, j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', cogent_glob1, j, r')
            in (c', i, cogent_glob1, j, r')
   in (r', i, j, g, heap) -- g: gs1, mfv47: hu, i: mf
cogent_mfi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_mfi48 (i
             , j
             , g
             , heap) =
   let (_
       , i
       , cogent_glob1
       , j
       , r') = let (c', i) = let (v'
                                 , i) = let v1' = cogent_glob1
            and v' = i
            and i { cont = p0' } = v'
            and v' = p0'
            and v' = v1'
            and (v', p0') = (v', v')
            and i = i { cont = p0' }
            in (v', i)
         in (0, i)
      in if c' > 0
         then (c'
              , i
              , cogent_glob1
              , j
              , r')
         else let (c'
                  , cogent_glob1
                  , j
                  , r') = let (c'
                              , cogent_glob1
                              , j) = let (v'
                                         , cogent_glob1
                                         , j) = let v1' = j
                     and j { cont = p1' } = v1'
                     and v1' = p1'
                     and v' = cogent_glob1
                     and v' = v1'
                     and (v', cogent_glob1) = (v'
                                              , v')
                     and j = j { cont = p1' }
                     in (v', cogent_glob1, j)
                  in (0, cogent_glob1, j)
               in if c' > 0
                  then (c', cogent_glob1, j, r')
                  else let (c'
                           , r') = let v' = let v' = 2
                           in v'
                        in (3, v')
                     in (c', cogent_glob1, j, r')
            in (c', i, cogent_glob1, j, r')
   in (r', i, j, g, heap) -- g: gs1, mfv48: hu, j: mf

-- Function calls

cogent_cffv1 : () -> ()
cogent_cffv1 () =
   let _ = let v' = let v' = cogent_ffv1 ()
         in v'
      in 0
   in ()

cogent_cffv11 : MayNull (CPtr U32) -> MayNull (CPtr U32)
cogent_cffv11 i =
   let _ = let v' = let v' = i
         and v' = cogent_ffv11 v'
         in v'
      in 0
   in i
cogent_cffv12 : MayNull (CPtr U32) -> MayNull (CPtr U32)
cogent_cffv12 i =
   let _ = let v' = let v' = i
         and v' = cogent_ffv12 v'
         in v'
      in 0
   in i
cogent_cffv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv15 (i
              , j) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffv15 (v', v1')
         in v'
      in 0
   in (i, j)
cogent_cffv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv16 (i
              , j) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffv16 (v', v1')
         in v'
      in 0
   in (i, j)
cogent_cffv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv17 (i
              , j) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffv17 (v', v1')
         in v'
      in 0
   in (i, j)
cogent_cffv18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffv18 (i
              , j) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffv18 (v', v1')
         in v'
      in 0
   in (i, j)

cogent_cffv21 : GlobState1 -> GlobState1
cogent_cffv21 g =
   let _ = let v' = let v' = cogent_ffv21 ()
         in v'
      in 0
   in g -- g: gs1
cogent_cffv22 : GlobState1 -> GlobState1
cogent_cffv22 g =
   let _ = let v' = let v' = cogent_ffv22 ()
         in v'
      in 0
   in g -- g: gs1 (Error: no argument for gs2)
cogent_cffv23 : ( GlobState1, GlobState2 ) -> ( GlobState1, GlobState2 )
cogent_cffv23 (g1, g2) =
   let _ = let v' = let v' = cogent_ffv23 ()
         in v'
      in 0
   in (g1, g2) -- g1: gs1, g2: gs2

cogent_cffv31 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_cffv31 (i
              , g) =
   let _ = let v' = let v' = i
         and v' = cogent_ffv31 v'
         in v'
      in 0
   in (i, g) -- g: gs1
cogent_cffv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_cffv32 (i
              , g) =
   let _ = let v' = let v' = i
         and v' = cogent_ffv32 v'
         in v'
      in 0
   in (i, g) -- g: gs1
cogent_cffv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffv34 (i
              , j
              , g) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffv34 (v', v1')
         in v'
      in 0
   in (i, j, g) -- g: gs1
cogent_cffv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffv35 (i
              , j
              , g) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffv34 (v', v1')
         in v'
      in 0
   in (i, j, g) -- g: gs1
cogent_cffv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cffv36 (i
              , j
              , g1
              , g2) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffv36 (v', v1')
         in v'
      in 0
   in (i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_cffv41 : Heap -> Heap
cogent_cffv41 heap =
   let _ = let v' = let v' = cogent_ffv41 ()
         in v'
      in 0
   in heap -- cffv41: hu
cogent_cffv42 : ( GlobState1, Heap ) -> ( GlobState1, Heap )
cogent_cffv42 (g, heap) =
   let _ = let v' = let v' = cogent_ffv42 ()
         in v'
      in 0
   in (g, heap) -- cffv41: hu, g: gs1
cogent_cffv43 : ( MayNull (CPtr U32), Heap ) -> ( MayNull (CPtr U32), Heap )
cogent_cffv43 (i
              , heap) =
   let _ = let v' = let v' = i
         and v' = cogent_ffv43 v'
         in v'
      in 0
   in (i, heap) -- cffv43: hu
cogent_cffv44 : ( MayNull (CPtr U32), Heap ) -> ( MayNull (CPtr U32), Heap )
cogent_cffv44 (i
              , heap) =
   let _ = let v' = let v' = i
         and v' = cogent_ffv44 v'
         in v'
      in 0
   in (i, heap) -- cffv44: hu
cogent_cffv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv45 (i
              , g
              , heap) =
   let _ = let v' = let v' = i
         and v' = cogent_ffv45 v'
         in v'
      in 0
   in (i, g, heap) -- g: gs1, cffv45: hu
cogent_cffv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv46 (i
              , g
              , heap) =
   let _ = let v' = let v' = i
         and v' = cogent_ffv46 v'
         in v'
      in 0
   in (i, g, heap) -- g: gs1, cffv46: hu
cogent_cffv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_cffv47 (i
              , j
              , heap) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffv47 (v', v1')
         in v'
      in 0
   in (i, j, heap) -- cffv47: hu
cogent_cffv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffv48 (i
              , j
              , g
              , heap) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffv48 (v', v1')
         in v'
      in 0
   in (i, j, g, heap) -- g: gs1, cffv48: hu

cogent_cffi1 : () -> U32
cogent_cffi1 () =
   let (_
       , r') = let v' = let v' = cogent_ffi1 ()
         in v'
      in (3, v')
   in r'

cogent_cffi11 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_cffi11 i =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_ffi11 v'
         in v'
      in (3, v')
   in (r', i)
cogent_cffi12 : MayNull (CPtr U32) -> ( U32, MayNull (CPtr U32) )
cogent_cffi12 i =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_ffi12 v'
         in v'
      in (3, v')
   in (r', i)
cogent_cffi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi15 (i
              , j) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffi15 (v', v1')
         in v'
      in (3, v')
   in (r', i, j)
cogent_cffi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi16 (i
              , j) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffi16 (v', v1')
         in v'
      in (3, v')
   in (r', i, j)
cogent_cffi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi17 (i
              , j) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffi17 (v', v1')
         in v'
      in (3, v')
   in (r', i, j)
cogent_cffi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cffi18 (i
              , j) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffi18 (v', v1')
         in v'
      in (3, v')
   in (r', i, j)

cogent_cffi21 : GlobState1 -> ( U32, GlobState1 )
cogent_cffi21 g =
   let (_
       , r') = let v' = let v' = cogent_ffi21 ()
         in v'
      in (3, v')
   in (r', g) -- g: gs1
cogent_cffi22 : GlobState2 -> ( U32, GlobState2 )
cogent_cffi22 g =
   let (_
       , r') = let v' = let v' = cogent_ffi22 ()
         in v'
      in (3, v')
   in (r', g) -- g: gs2
cogent_cffi23 : ( GlobState1, GlobState2 ) -> ( U32, GlobState1, GlobState2 )
cogent_cffi23 (g1, g2) =
   let (_
       , r') = let v' = let v' = cogent_ffi23 ()
         in v'
      in (3, v')
   in (r', g1, g2) -- g1: gs1, g2: gs2

cogent_cffi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_cffi31 (i
              , g) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_ffi31 v'
         in v'
      in (3, v')
   in (r', i, g) -- g: gs1
cogent_cffi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_cffi32 (i
              , g) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_ffi32 v'
         in v'
      in (3, v')
   in (r', i, g) -- g: gs1
cogent_cffi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffi34 (i
              , j
              , g) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffi34 (v', v1')
         in v'
      in (3, v')
   in (r', i, j, g) -- g: gs1
cogent_cffi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cffi35 (i
              , j
              , g) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffi35 (v', v1')
         in v'
      in (3, v')
   in (r', i, j, g) -- g: gs1
cogent_cffi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cffi36 (i
              , j
              , g1
              , g2) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffi36 (v', v1')
         in v'
      in (3, v')
   in (r', i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_cffi41 : Heap -> ( U32, Heap )
cogent_cffi41 heap =
   let (_
       , r') = let v' = let v' = cogent_ffi41 ()
         in v'
      in (3, v')
   in (r', heap) -- cffv41: hu
cogent_cffi42 : ( GlobState1, Heap ) -> ( U32, GlobState1, Heap )
cogent_cffi42 (g, heap) =
   let (_
       , r') = let v' = let v' = cogent_ffi42 ()
         in v'
      in (3, v')
   in (r', g, heap) -- cffv41: hu, g: gs1
cogent_cffi43 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_cffi43 (i
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_ffi43 v'
         in v'
      in (3, v')
   in (r', i, heap) -- cffv43: hu
cogent_cffi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_cffi44 (i
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_ffi44 v'
         in v'
      in (3, v')
   in (r', i, heap) -- cffv44: hu
cogent_cffi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi45 (i
              , g
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_ffi45 v'
         in v'
      in (3, v')
   in (r', i, g, heap) -- g: gs1, cffv45: hu
cogent_cffi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi46 (i
              , g
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_ffi46 v'
         in v'
      in (3, v')
   in (r', i, g, heap) -- g: gs1, cffv46: hu
cogent_cffi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi48 (i
              , j
              , g
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffi48 (v', v1')
         in v'
      in (3, v')
   in (r', i, j, g, heap) -- g: gs1, cffv48: hu
cogent_cffi49 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cffi49 (i
              , j
              , g
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_ffi49 (v', v1')
         in v'
      in (3, v')
   in (r', i, j, g, heap) -- g: gs1, cffv49: hu

cogent_cmfv11 : MayNull (CPtr U32) -> MayNull (CPtr U32)
cogent_cmfv11 i =
   let _ = let v' = let v' = i
         and v' = cogent_mfv11 v'
         in v'
      in 0
   in i
cogent_cmfv12 : MayNull (CPtr U32) -> MayNull (CPtr U32)
cogent_cmfv12 i =
   let _ = let v' = let v' = i
         and v' = cogent_mfv12 v'
         in v'
      in 0
   in i
cogent_cmfv15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cmfv15 (i
              , j) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfv15 (v', v1')
         in v'
      in 0
   in (i, j)
cogent_cmfv16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cmfv16 (i
              , j) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfv16 (v', v1')
         in v'
      in 0
   in (i, j)
cogent_cmfv17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cmfv17 (i
              , j) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfv17 (v', v1')
         in v'
      in 0
   in (i, j)

cogent_cmfv32 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_cmfv32 (i
              , g) =
   let _ = let v' = let v' = i
         and v' = cogent_mfv32 v'
         in v'
      in 0
   in (i, g) -- g: gs1
cogent_cmfv33 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), GlobState1 )
cogent_cmfv33 (i
              , g) =
   let _ = let v' = let v' = i
         and v' = cogent_mfv33 v'
         in v'
      in 0
   in (i, g) -- g: gs1
cogent_cmfv34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cmfv34 (i
              , j
              , g) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfv34 (v', v1')
         in v'
      in 0
   in (i, j, g) -- g: gs1
cogent_cmfv35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cmfv35 (i
              , j
              , g) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfv35 (v', v1')
         in v'
      in 0
   in (i, j, g) -- g: gs1
cogent_cmfv36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cmfv36 (i
              , j
              , g1
              , g2) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfv36 (v', v1')
         in v'
      in 0
   in (i, j, g1, g2) -- g1: gs1, g2: gs2
cogent_cmfv37 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cmfv37 (i
              , j
              , g) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfv37 (v', v1')
         in v'
      in 0
   in (i, j, g) -- g: gs1
cogent_cmfv38 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cmfv38 (i
              , j
              , g) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfv38 (v', v1')
         in v'
      in 0
   in (i, j, g) -- g: gs1

cogent_cmfv44 : ( MayNull (CPtr U32), Heap ) -> ( MayNull (CPtr U32), Heap )
cogent_cmfv44 (i
              , heap) =
   let _ = let v' = let v' = i
         and v' = cogent_mfv44 v'
         in v'
      in 0
   in (i, heap) -- cmfv44: hu
cogent_cmfv45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( MayNull (CPtr U32), GlobState1, Heap )
cogent_cmfv45 (i
              , g
              , heap) =
   let _ = let v' = let v' = i
         and v' = cogent_mfv45 v'
         in v'
      in 0
   in (i, g, heap) -- g: gs1, cmfv45: hu
cogent_cmfv46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( MayNull (CPtr U32), GlobState1, Heap )
cogent_cmfv46 (i
              , g
              , heap) =
   let _ = let v' = let v' = i
         and v' = cogent_mfv46 v'
         in v'
      in 0
   in (i, g, heap) -- g: gs1, cmfv46: hu
cogent_cmfv47 : ( MayNull (CPtr U32), MayNull (CPtr U32), Heap ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_cmfv47 (i
              , j
              , heap) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfv47 (v', v1')
         in v'
      in 0
   in (i, j, heap) -- cmfv47: hu
cogent_cmfv48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cmfv48 (i
              , j
              , g
              , heap) =
   let _ = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfv48 (v', v1')
         in v'
      in 0
   in (i, j, g, heap) -- g: gs1, cmfv48: hu

cogent_cmfi11 : MayNull (CPtr U32) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cmfi11 i =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_mfi11 v'
         in v'
      in (3, v')
   in (r', i)
cogent_cmfi12 : MayNull (CPtr U32) -> ( MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cmfi12 i =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_mfi12 v'
         in v'
      in (3, v')
   in (r', i)
cogent_cmfi15 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cmfi15 (i
              , j) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfi15 (v', v1')
         in v'
      in (3, v')
   in (r', i, j)
cogent_cmfi16 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cmfi16 (i
              , j) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfi16 (v', v1')
         in v'
      in (3, v')
   in (r', i, j)
cogent_cmfi17 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cmfi17 (i
              , j) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfi17 (v', v1')
         in v'
      in (3, v')
   in (r', i, j)
cogent_cmfi18 : ( MayNull (CPtr U32), MayNull (CPtr U32) ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), MayNull (CPtr U32) )
cogent_cmfi18 (i
              , j) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfi18 (v', v1')
         in v'
      in (3, v')
   in (r', i, j)

cogent_cmfi31 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cmfi31 (i
              , g) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_mfi31 v'
         in v'
      in (3, v')
   in (r', i, g) -- g: gs1
cogent_cmfi32 : ( MayNull (CPtr U32), GlobState1 ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cmfi32 (i
              , g) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_mfi32 v'
         in v'
      in (3, v')
   in (r', i, g) -- g: gs1
cogent_cmfi33 : ( MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), GlobState1 )
cogent_cmfi33 (i
              , g) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_mfi33 v'
         in v'
      in (3, v')
   in (r', i, g) -- g: gs1
cogent_cmfi34 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cmfi34 (i
              , j
              , g) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfi34 (v', v1')
         in v'
      in (3, v')
   in (r', i, j, g) -- g: gs1
cogent_cmfi35 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1 )
cogent_cmfi35 (i
              , j
              , g) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfi35 (v', v1')
         in v'
      in (3, v')
   in (r', i, j, g) -- g: gs1
cogent_cmfi36 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, GlobState2 )
cogent_cmfi36 (i
              , j
              , g1
              , g2) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfi36 (v', v1')
         in v'
      in (3, v')
   in (r', i, j, g1, g2) -- g1: gs1, g2: gs2

cogent_cmfi43 : ( MayNull (CPtr U32), Heap ) -> ( MayNull (CPtr U32), MayNull (CPtr U32), Heap )
cogent_cmfi43 (i
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_mfi43 v'
         in v'
      in (3, v')
   in (r', i, heap) -- cmfv43: hu
cogent_cmfi44 : ( MayNull (CPtr U32), Heap ) -> ( U32, MayNull (CPtr U32), Heap )
cogent_cmfi44 (i
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_mfi44 v'
         in v'
      in (3, v')
   in (r', i, heap) -- cmfv44: hu
cogent_cmfi45 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cmfi45 (i
              , g
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_mfi45 v'
         in v'
      in (3, v')
   in (r', i, g, heap) -- g: gs1, cmfv45: hu
cogent_cmfi46 : ( MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), GlobState1, Heap )
cogent_cmfi46 (i
              , g
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v' = cogent_mfi46 v'
         in v'
      in (3, v')
   in (r', i, g, heap) -- g: gs1, cmfv46: hu
cogent_cmfi47 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cmfi47 (i
              , j
              , g
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfi47 (v', v1')
         in v'
      in (3, v')
   in (r', i, j, g, heap) -- g: gs1, cmfv47: hu
cogent_cmfi48 : ( MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap ) -> ( U32, MayNull (CPtr U32), MayNull (CPtr U32), GlobState1, Heap )
cogent_cmfi48 (i
              , j
              , g
              , heap) =
   let (_
       , r') = let v' = let v' = i
         and v1' = j
         and v' = cogent_mfi48 (v', v1')
         in v'
      in (3, v')
   in (r', i, j, g, heap) -- g: gs1, cmfv48: hu
