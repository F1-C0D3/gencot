-- Using values of readonly type.

-- Functions used as context:
cogent_fcln : CPtr U32 -> U32
cogent_fcln i =
   let r' = let v' = 0 in v'
   in r'
cogent_fcro : (CPtr U32)! -> U32
cogent_fcro i =
   let r' = let v' = 0 in v'
   in r'
cogent_fcmln : MayNull (CPtr U32) -> U32
cogent_fcmln i =
   let r' = let v' = 0 in v'
   in r'
cogent_fcmro : (MayNull ((CPtr U32)!))! -> U32
cogent_fcmro i =
   let r' = let v' = 0 in v'
   in r'
-- Global variables used as context:
type GlobState1 =
   CPtr (CPtr U32)
type GlobState2 =
   CPtr ((CPtr U32)!)
type GlobState3 =
   CPtr (MayNull (CPtr U32))
type GlobState4 =
   CPtr ((MayNull ((CPtr U32)!))!)

-- struct probes:
type Struct_Cogent_ros1 = { mrg : U32, mro : (CPtr U32)!, mln : CPtr U32 }
type Struct_Cogent_rosm1 = { mrg : U32, mro : (MayNull ((CPtr U32)!))!, mln : MayNull (CPtr U32) }
type Struct_Cogent_ros2 = { sln : Struct_Cogent_ros1, sub : #Struct_Cogent_ros1 }

-- array probes:
type Cogent_roa1 = CArr5 U32 -- regular elements
type Cogent_roa2 =
   CArr5 ((CPtr U32)!) -- readonly elements
type Cogent_roa3 =
   CArr5 (CPtr U32) -- linear elements
type Cogent_roam2 =
   CArr5 ((MayNull ((CPtr U32)!))!) -- readonly maynull elements
type Cogent_roam3 =
   CArr5 (MayNull (CPtr U32)) -- linear maynull elements
type Cogent_roa4 =
   CArr5 #Cogent_roa1 -- array elements
type Cogent_roa5 =
   CArr5 #Cogent_roa2 -- array elements
type Cogent_roa6 =
   CArr5 #Cogent_roa3 -- array elements

-- Direct use of probe in context
cogent_f11ln : (CPtr U32)! -> U32
cogent_f11ln pro =
   let r' = let v' = cogent_fcln
      and v1' = pro
      and v2' = v' (gencotDummy "Readonly expression used in linear context")
      in v2'
   in r'
cogent_f11ro : (CPtr U32)! -> U32
cogent_f11ro pro =
   let r' = let v' = cogent_fcro
      and v1' = pro
      and v2' = v' v1'
      in v2'
   in r'
cogent_f12ln : () -> U32
cogent_f12ln () =
   let r' = let v' = cogent_fcln
      and v1' = cogent_glob ()
      and v2' = v' (gencotDummy "Readonly expression used in linear context")
      in v2'
   in r'
cogent_f12ro : () -> U32
cogent_f12ro () =
   let r' = let v' = cogent_fcro
      and v1' = cogent_glob ()
      and v2' = v' v1'
      in v2'
   in r'
cogent_f13ln : () -> U32
cogent_f13ln () =
   let r' = let v' = cogent_fcln
      and v1' = cogent_frro
      and v2' = v1' ()
      and v3' = v' (gencotDummy "Readonly expression used in linear context")
      in v3'
   in r'
cogent_f13ro : () -> U32
cogent_f13ro () =
   let r' = let v' = cogent_fcro
      and v1' = cogent_frro
      and v2' = v1' ()
      and v3' = v' v2'
      in v3'
   in r'
cogent_f14ln : ( (CPtr U32)!, (CPtr U32)!, U32 ) -> U32
cogent_f14ln (pro, qro, i) =
   let r' = let v' = cogent_fcln
      and v4' = let v1' = i
         in if v1' /= 0
            then let v2' = pro
               in v2'
            else let v3' = qro
               in v3'
      and v5' = v' (gencotDummy "Readonly expression used in linear context")
      in v5'
   in r'
cogent_f14ro : ( (CPtr U32)!, (CPtr U32)!, U32 ) -> U32
cogent_f14ro (pro, qro, i) =
   let r' = let v' = cogent_fcro
      and v4' = let v1' = i
         in if v1' /= 0
            then let v2' = pro
               in v2'
            else let v3' = qro
               in v3'
      and v5' = v' v4'
      in v5'
   in r'

-- Probe assigned to variable
cogent_f21ln : GlobState1 -> ( (), GlobState1 )
cogent_f21ln g =
   let g = let v' = cogent_frro
      and v1' = v' ()
      and v2' = g
      and g { cont = p0' } = v2'
      and v4' = v1'
      and p0' = gencotDummy "Readonly expression used in linear context"
      and g = g { cont = p0' }
      in g
   in ((), g)
cogent_f21ro : GlobState2 -> ( (), GlobState2 )
cogent_f21ro g =
   let g = let v' = cogent_frro
      and v1' = v' ()
      and v2' = g
      and v4' = v1'
      and p0' = v4'
      and g = g { cont = p0' }
      in g
   in ((), g)
cogent_f22ln : CPtr U32 -> ( (), CPtr U32 )
cogent_f22ln pln =
   let pln = let v' = cogent_frro
      and v1' = v' ()
      and v3' = v1'
      and pln = gencotDummy "Readonly expression used in linear context"
      in pln
   in ((), pln)
cogent_f22ro : (CPtr U32)! -> U32
cogent_f22ro pro =
   let r' = let (c'
                , pro) = let v' = cogent_frro
         and v1' = v' ()
         and v3' = v1'
         and pro = v3'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v5' = pro
               and p0' = getPtr[(CPtr U32)!
                               , U32]{{}} v5'
               and v6' = p0'
               in v6'
            in r'
   in r'

-- Probe returned as result
cogent_f31ln : () -> CPtr U32
cogent_f31ln () =
   let r' = gencotDummy "Readonly expression used in linear context"
      {- return cogent_frro(); -}
   in r'
cogent_f31ro : () -> (CPtr U32)!
cogent_f31ro () =
   let r' = let v' = cogent_frro
      and v1' = v' ()
      in v1'
   in r'

-- Probe used in conditional expression with other branch as context
cogent_f41ln : ( (CPtr U32)!, CPtr U32, U32 ) -> ( U32, CPtr U32 )
cogent_f41ln (pro, qln, i) =
   let r' = (let v' = cogent_fcro
         and v4' = let v1' = i
            in if v1' /= 0
               then let v2' = pro
                  in v2'
               else let v3' = qln
                  in v3'
         and v5' = v' v4'
         in v5') !qln
   in (r', qln)
cogent_f42ln : ( CPtr U32, (CPtr U32)!, U32 ) -> ( U32, CPtr U32 )
cogent_f42ln (pln, qro, i) =
   let r' = (let v' = cogent_fcro
         and v4' = let v1' = i
            in if v1' /= 0
               then let v2' = pln
                  in v2'
               else let v3' = qro
                  in v3'
         and v5' = v' v4'
         in v5') !pln
   in (r', pln)

-- Probe used by accessing a struct component
cogent_f51ln : Struct_Cogent_ros1! -> Struct_Cogent_ros1!
cogent_f51ln pro =
   let r' = let (c'
                , pro) = let v' = 5
         and v1' = pro
         and p0' = v1'.mrg
         and v3' = v'
         and err' = v3'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v5' = pro
               in v5'
            in r'
   in r'
cogent_f51ro : Struct_Cogent_ros1! -> U32
cogent_f51ro pro =
   let r' = let v' = pro
      and p0' = v'.mrg
      and v1' = p0'
      in v1'
   in r'
cogent_f52ln : Struct_Cogent_ros1! -> Struct_Cogent_ros1!
cogent_f52ln pro =
   let r' = let (c'
                , pro) = let v' = cogent_frro
         and v1' = v' ()
         and v2' = pro
         and p0' = v2'.mro
         and v4' = v1'
         and err' = v4'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v6' = pro
               in v6'
            in r'
   in r'
cogent_f52ro : Struct_Cogent_ros1! -> (CPtr U32)!
cogent_f52ro pro =
   let r' = let v' = pro
      and p0' = v'.mro
      and v1' = p0'
      in v1'
   in r'
cogent_f53ln : Struct_Cogent_ros1! -> Struct_Cogent_ros1!
cogent_f53ln pro =
   let r' = let (c'
                , pro) = let v' = cogent_frln
         and v1' = v' ()
         and v2' = pro
         and p0' = v2'.mln
         and v4' = v1'
         and err' = gencotDummy "Linear expression used in readonly context"
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v6' = pro
               in v6'
            in r'
   in r'
cogent_f53ro : Struct_Cogent_ros1! -> (CPtr U32)!
cogent_f53ro pro =
   let r' = let v' = pro
      and p0' = v'.mln
      and v1' = p0'
      in v1'
   in r'
cogent_f54ln : Struct_Cogent_ros1! -> Struct_Cogent_ros1!
cogent_f54ln pro =
   let r' = let (c'
                , pro) = let v' = 5
         and v1' = pro
         and p0' = v1'.mln
         and v2' = p0'
         and p1' = getPtr[(CPtr U32)!
                         , U32]{{}} v2'
         and v4' = v'
         and err' = v4'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v6' = pro
               in v6'
            in r'
   in r'
cogent_f54ro : Struct_Cogent_ros1! -> U32
cogent_f54ro pro =
   let r' = let v' = pro
      and p0' = v'.mln
      and v1' = p0'
      and p1' = getPtr[(CPtr U32)!
                      , U32]{{}} v1'
      and v2' = p1'
      in v2'
   in r'
cogent_f55ln : Struct_Cogent_ros1! -> U32
cogent_f55ln pro =
   let r' = let v' = cogent_fcln
      and v1' = pro
      and p0' = v1'.mln
      and v2' = p0'
      and v3' = v' (gencotDummy "Readonly expression used in linear context")
      in v3'
   in r'
cogent_f55ro : Struct_Cogent_ros1! -> U32
cogent_f55ro pro =
   let r' = let v' = cogent_fcro
      and v1' = pro
      and p0' = v1'.mln
      and v2' = p0'
      and v3' = v' v2'
      in v3'
   in r'
cogent_f56ln : ( Struct_Cogent_ros1!, GlobState1 ) -> ( (), GlobState1 )
cogent_f56ln (pro, g) =
   let g = let v' = pro
      and p0' = v'.mln
      and v1' = p0'
      and v2' = g
      and g { cont = p1' } = v2'
      and v4' = v1'
      and p1' = gencotDummy "Readonly expression used in linear context"
      and g = g { cont = p1' }
      in g
   in ((), g)
cogent_f56ro : ( Struct_Cogent_ros1!, GlobState2 ) -> ( (), GlobState2 )
cogent_f56ro (pro, g) =
   let g = let v' = pro
      and p0' = v'.mln
      and v1' = p0'
      and v2' = g
      and v4' = v1'
      and p1' = v4'
      and g = g { cont = p1' }
      in g
   in ((), g)
cogent_f57ln : ( Struct_Cogent_ros1!, CPtr U32 ) -> ( (), CPtr U32 )
cogent_f57ln (pro, pln) =
   let pln = let v' = pro
      and p0' = v'.mln
      and v1' = p0'
      and v3' = v1'
      and pln = gencotDummy "Readonly expression used in linear context"
      in pln
   in ((), pln)
cogent_f57ro : ( Struct_Cogent_ros1!, (CPtr U32)! ) -> U32
cogent_f57ro (pro, qro) =
   let r' = let (c'
                , qro) = let v' = pro
         and p0' = v'.mln
         and v1' = p0'
         and v3' = v1'
         and qro = v3'
         in (0, qro)
      in if c' > 0
         then r'
         else let r' = let v5' = qro
               and p1' = getPtr[(CPtr U32)!
                               , U32]{{}} v5'
               and v6' = p1'
               in v6'
            in r'
   in r'
cogent_f58ln : Struct_Cogent_ros1! -> CPtr U32
cogent_f58ln pro =
   let r' = gencotDummy "Readonly expression used in linear context"
      {- return pro->mln; -}
   in r'
cogent_f58ro : Struct_Cogent_ros1! -> (CPtr U32)!
cogent_f58ro pro =
   let r' = let v' = pro
      and p0' = v'.mln
      and v1' = p0'
      in v1'
   in r'
cogent_f59ln : ( Struct_Cogent_ros1!, CPtr U32, U32 ) -> ( U32, CPtr U32 )
cogent_f59ln (pro, qln, i) =
   let r' = (let v' = cogent_fcro
         and v5' = let v1' = i
            in if v1' /= 0
               then let v2' = pro
                  and p0' = v2'.mln
                  and v3' = p0'
                  in v3'
               else let v4' = qln
                  in v4'
         and v6' = v' v5'
         in v6') !qln
   in (r', qln)
cogent_f59ro : ( Struct_Cogent_ros1!, (CPtr U32)!, U32 ) -> U32
cogent_f59ro (pro, qro, i) =
   let r' = let v' = cogent_fcro
      and v5' = let v1' = i
         in if v1' /= 0
            then let v2' = pro
               and p0' = v2'.mln
               and v3' = p0'
               in v3'
            else let v4' = qro
               in v4'
      and v6' = v' v5'
      in v6'
   in r'

cogent_f61ln : Struct_Cogent_ros2! -> Struct_Cogent_ros2!
cogent_f61ln pro =
   let r' = let (c'
                , pro) = let v' = 5
         and v1' = pro
         and p0' = v1'.sln
         and v2' = p0'
         and p1' = v2'.mrg
         and v4' = v'
         and err' = v4'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v6' = pro
               in v6'
            in r'
   in r'
cogent_f61ro : Struct_Cogent_ros2! -> U32
cogent_f61ro pro =
   let r' = let v' = pro
      and p0' = v'.sln
      and v1' = p0'
      and p1' = v1'.mrg
      and v2' = p1'
      in v2'
   in r'
cogent_f62ln : Struct_Cogent_ros2! -> Struct_Cogent_ros2!
cogent_f62ln pro =
   let r' = let (c'
                , pro) = let v' = cogent_frro
         and v1' = v' ()
         and v2' = pro
         and p0' = v2'.sln
         and v3' = p0'
         and p1' = v3'.mro
         and v5' = v1'
         and err' = v5'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v7' = pro
               in v7'
            in r'
   in r'
cogent_f62ro : Struct_Cogent_ros2! -> (CPtr U32)!
cogent_f62ro pro =
   let r' = let v' = pro
      and p0' = v'.sln
      and v1' = p0'
      and p1' = v1'.mro
      and v2' = p1'
      in v2'
   in r'
cogent_f63ln : Struct_Cogent_ros2! -> Struct_Cogent_ros2!
cogent_f63ln pro =
   let r' = let (c'
                , pro) = let v' = cogent_frln
         and v1' = v' ()
         and v2' = pro
         and p0' = v2'.sln
         and v3' = p0'
         and p1' = v3'.mln
         and v5' = v1'
         and err' = gencotDummy "Linear expression used in readonly context"
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v7' = pro
               in v7'
            in r'
   in r'
cogent_f63ro : Struct_Cogent_ros2! -> (CPtr U32)!
cogent_f63ro pro =
   let r' = let v' = pro
      and p0' = v'.sln
      and v1' = p0'
      and p1' = v1'.mln
      and v2' = p1'
      in v2'
   in r'
cogent_f64ln : Struct_Cogent_ros2! -> Struct_Cogent_ros2!
cogent_f64ln pro =
   let r' = let (c'
                , pro) = let v' = cogent_frln
         and v1' = v' ()
         and v2' = pro
         and p0' = v2'.sub
         and v3' = p0'
         and v5' = v1'
         and err' = gencotDummy "Linear expression used in readonly context"
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v7' = pro
               in v7'
            in r'
   in r'
cogent_f64ro : Struct_Cogent_ros2! -> (CPtr U32)!
cogent_f64ro pro =
   let r' = let v' = pro
      and p0' = v'.sub
      and v1' = p0'
      and p1' = v1'.mln
      and v2' = p1'
      in v2'
   in r'

-- Probe used by accessing an array element
cogent_f71ln : Cogent_roa1! -> U32
cogent_f71ln pro =
   let r' = let (c'
                , pro) = let v' = 5
         and v2' = 1
         and v1' = pro
         and i0' = v2'
         and p0' = getArr[Cogent_roa1!
                         , U32
                         , U32]{{}} (v1', i0')
         and v4' = v'
         and err' = v4'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v7' = 1
               and v6' = pro
               and i1' = v7'
               and p1' = getArr[Cogent_roa1!
                               , U32
                               , U32]{{}} (v6', i1')
               and v8' = p1'
               in v8'
            in r'
   in r'
cogent_f71ro : Cogent_roa1! -> U32
cogent_f71ro pro =
   let r' = let v1' = 1
      and v' = pro
      and i0' = v1'
      and p0' = getArr[Cogent_roa1!
                      , U32
                      , U32]{{}} (v', i0')
      and v2' = p0'
      in v2'
   in r'
cogent_f72ln : Cogent_roa2! -> (CPtr U32)!
cogent_f72ln pro =
   let r' = let (c'
                , pro) = let v' = cogent_frro
         and v1' = v' ()
         and v3' = 1
         and v2' = pro
         and i0' = v3'
         and p0' = getArr[Cogent_roa2!
                         , U32
                         , (CPtr U32)!]{{}} (v2', i0')
         and v5' = v1'
         and err' = v5'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v8' = 1
               and v7' = pro
               and i1' = v8'
               and p1' = getArr[Cogent_roa2!
                               , U32
                               , (CPtr U32)!]{{}} (v7', i1')
               and v9' = p1'
               in v9'
            in r'
   in r'
cogent_f72ro : Cogent_roa2! -> (CPtr U32)!
cogent_f72ro pro =
   let r' = let v1' = 1
      and v' = pro
      and i0' = v1'
      and p0' = getArr[Cogent_roa2!
                      , U32
                      , (CPtr U32)!]{{}} (v', i0')
      and v2' = p0'
      in v2'
   in r'
cogent_f73ln : Cogent_roa3! -> (CPtr U32)!
cogent_f73ln pro =
   let r' = let (c'
                , pro) = let v' = cogent_frln
         and v1' = v' ()
         and v3' = 1
         and v2' = pro
         and i0' = v3'
         and p0' = getArr[Cogent_roa3!
                         , U32
                         , (CPtr U32)!]{{}} (v2', i0')
         and v5' = v1'
         and err' = gencotDummy "Linear expression used in readonly context"
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v8' = 1
               and v7' = pro
               and i1' = v8'
               and p1' = getArr[Cogent_roa3!
                               , U32
                               , (CPtr U32)!]{{}} (v7', i1')
               and v9' = p1'
               in v9'
            in r'
   in r'
cogent_f73ro : Cogent_roa3! -> (CPtr U32)!
cogent_f73ro pro =
   let r' = let v1' = 1
      and v' = pro
      and i0' = v1'
      and p0' = getArr[Cogent_roa3!
                      , U32
                      , (CPtr U32)!]{{}} (v', i0')
      and v2' = p0'
      in v2'
   in r'
cogent_f74ln : Cogent_roa3! -> (CPtr U32)!
cogent_f74ln pro =
   let r' = let (c'
                , pro) = let v' = 5
         and v2' = 1
         and v1' = pro
         and i0' = v2'
         and p0' = getArr[Cogent_roa3!
                         , U32
                         , (CPtr U32)!]{{}} (v1', i0')
         and v3' = p0'
         and p1' = getPtr[(CPtr U32)!
                         , U32]{{}} v3'
         and v5' = v'
         and err' = v5'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v8' = 1
               and v7' = pro
               and i2' = v8'
               and p2' = getArr[Cogent_roa3!
                               , U32
                               , (CPtr U32)!]{{}} (v7', i2')
               and v9' = p2'
               in v9'
            in r'
   in r'
cogent_f74ro : Cogent_roa3! -> U32
cogent_f74ro pro =
   let r' = let v1' = 1
      and v' = pro
      and i0' = v1'
      and p0' = getArr[Cogent_roa3!
                      , U32
                      , (CPtr U32)!]{{}} (v', i0')
      and v2' = p0'
      and p1' = getPtr[(CPtr U32)!
                      , U32]{{}} v2'
      and v3' = p1'
      in v3'
   in r'
cogent_f75ln : Cogent_roa3! -> U32
cogent_f75ln pro =
   let r' = let v' = cogent_fcln
      and v2' = 1
      and v1' = pro
      and i0' = v2'
      and p0' = getArr[Cogent_roa3!
                      , U32
                      , (CPtr U32)!]{{}} (v1', i0')
      and v3' = p0'
      and v4' = v' (gencotDummy "Readonly expression used in linear context")
      in v4'
   in r'
cogent_f75ro : Cogent_roa3! -> U32
cogent_f75ro pro =
   let r' = let v' = cogent_fcro
      and v2' = 1
      and v1' = pro
      and i0' = v2'
      and p0' = getArr[Cogent_roa3!
                      , U32
                      , (CPtr U32)!]{{}} (v1', i0')
      and v3' = p0'
      and v4' = v' v3'
      in v4'
   in r'
cogent_f76ln : ( Cogent_roa3!, GlobState1 ) -> ( (), GlobState1 )
cogent_f76ln (pro, g) =
   let g = let v1' = 1
      and v' = pro
      and i0' = v1'
      and p0' = getArr[Cogent_roa3!
                      , U32
                      , (CPtr U32)!]{{}} (v', i0')
      and v2' = p0'
      and v3' = g
      and g { cont = p1' } = v3'
      and v5' = v2'
      and p1' = gencotDummy "Readonly expression used in linear context"
      and g = g { cont = p1' }
      in g
   in ((), g)
cogent_f76ro : ( Cogent_roa3!, GlobState2 ) -> ( (), GlobState2 )
cogent_f76ro (pro, g) =
   let g = let v1' = 1
      and v' = pro
      and i0' = v1'
      and p0' = getArr[Cogent_roa3!
                      , U32
                      , (CPtr U32)!]{{}} (v', i0')
      and v2' = p0'
      and v3' = g
      and v5' = v2'
      and p1' = v5'
      and g = g { cont = p1' }
      in g
   in ((), g)
cogent_f77ln : ( Cogent_roa3!, CPtr U32 ) -> ( (), CPtr U32 )
cogent_f77ln (pro, qln) =
   let qln = let v1' = 1
      and v' = pro
      and i0' = v1'
      and p0' = getArr[Cogent_roa3!
                      , U32
                      , (CPtr U32)!]{{}} (v', i0')
      and v2' = p0'
      and v4' = v2'
      and qln = gencotDummy "Readonly expression used in linear context"
      in qln
   in ((), qln)
cogent_f77ro : ( Cogent_roa3!, (CPtr U32)! ) -> U32
cogent_f77ro (pro, qro) =
   let r' = let (c'
                , qro) = let v1' = 1
         and v' = pro
         and i0' = v1'
         and p0' = getArr[Cogent_roa3!
                         , U32
                         , (CPtr U32)!]{{}} (v', i0')
         and v2' = p0'
         and v4' = v2'
         and qro = v4'
         in (0, qro)
      in if c' > 0
         then r'
         else let r' = let v6' = qro
               and p1' = getPtr[(CPtr U32)!
                               , U32]{{}} v6'
               and v7' = p1'
               in v7'
            in r'
   in r'
cogent_f78ln : Cogent_roa3! -> CPtr U32
cogent_f78ln pro =
   let r' = gencotDummy "Readonly expression used in linear context"
      {- return pro[1]; -}
   in r'
cogent_f78ro : Cogent_roa3! -> (CPtr U32)!
cogent_f78ro pro =
   let r' = let v1' = 1
      and v' = pro
      and i0' = v1'
      and p0' = getArr[Cogent_roa3!
                      , U32
                      , (CPtr U32)!]{{}} (v', i0')
      and v2' = p0'
      in v2'
   in r'
cogent_f79ln : ( Cogent_roa3!, CPtr U32, U32 ) -> ( U32, CPtr U32 )
cogent_f79ln (pro, qln, i) =
   let r' = (let v' = cogent_fcro
         and v6' = let v1' = i
            in if v1' /= 0
               then let v3' = 1
                  and v2' = pro
                  and i0' = v3'
                  and p0' = getArr[Cogent_roa3!
                                  , U32
                                  , (CPtr U32)!]{{}} (v2', i0')
                  and v4' = p0'
                  in v4'
               else let v5' = qln
                  in v5'
         and v7' = v' v6'
         in v7') !qln
   in (r', qln)
cogent_f79ro : ( Cogent_roa3!, (CPtr U32)!, U32 ) -> U32
cogent_f79ro (pro, qro, i) =
   let r' = let v' = cogent_fcro
      and v6' = let v1' = i
         in if v1' /= 0
            then let v3' = 1
               and v2' = pro
               and i0' = v3'
               and p0' = getArr[Cogent_roa3!
                               , U32
                               , (CPtr U32)!]{{}} (v2', i0')
               and v4' = p0'
               in v4'
            else let v5' = qro
               in v5'
      and v7' = v' v6'
      in v7'
   in r'

cogent_f81ln : Cogent_roa4! -> U32
cogent_f81ln pro =
   let r' = let (c'
                , pro) = let v' = 5
         and v4' = 1
         and v2' = 1
         and v1' = pro
         and i0' = v2'
         and p0' = getArr[Cogent_roa4!
                         , U32
                         , Cogent_roa1!]{{}} (v1', i0')
         and v3' = p0'
         and i1' = v4'
         and p1' = getArr[Cogent_roa1!
                         , U32
                         , U32]{{}} (v3', i1')
         and v6' = v'
         and err' = v6'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v11' = 1
               and v9' = 1
               and v8' = pro
               and i2' = v9'
               and p2' = getArr[Cogent_roa4!
                               , U32
                               , Cogent_roa1!]{{}} (v8', i2')
               and v10' = p2'
               and i3' = v11'
               and p3' = getArr[Cogent_roa1!
                               , U32
                               , U32]{{}} (v10', i3')
               and v12' = p3'
               in v12'
            in r'
   in r'
cogent_f81ro : Cogent_roa4! -> U32
cogent_f81ro pro =
   let r' = let v3' = 1
      and v1' = 1
      and v' = pro
      and i0' = v1'
      and p0' = getArr[Cogent_roa4!
                      , U32
                      , Cogent_roa1!]{{}} (v', i0')
      and v2' = p0'
      and i1' = v3'
      and p1' = getArr[Cogent_roa1!
                      , U32
                      , U32]{{}} (v2', i1')
      and v4' = p1'
      in v4'
   in r'
cogent_f82ln : Cogent_roa5! -> (CPtr U32)!
cogent_f82ln pro =
   let r' = let (c'
                , pro) = let v' = cogent_frro
         and v1' = v' ()
         and v5' = 1
         and v3' = 1
         and v2' = pro
         and i0' = v3'
         and p0' = getArr[Cogent_roa5!
                         , U32
                         , Cogent_roa2!]{{}} (v2', i0')
         and v4' = p0'
         and i1' = v5'
         and p1' = getArr[Cogent_roa2!
                         , U32
                         , (CPtr U32)!]{{}} (v4', i1')
         and v7' = v1'
         and err' = v7'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v12' = 1
               and v10' = 1
               and v9' = pro
               and i2' = v10'
               and p2' = getArr[Cogent_roa5!
                               , U32
                               , Cogent_roa2!]{{}} (v9', i2')
               and v11' = p2'
               and i3' = v12'
               and p3' = getArr[Cogent_roa2!
                               , U32
                               , (CPtr U32)!]{{}} (v11', i3')
               and v13' = p3'
               in v13'
            in r'
   in r'
cogent_f82ro : Cogent_roa5! -> (CPtr U32)!
cogent_f82ro pro =
   let r' = let v3' = 1
      and v1' = 1
      and v' = pro
      and i0' = v1'
      and p0' = getArr[Cogent_roa5!
                      , U32
                      , Cogent_roa2!]{{}} (v', i0')
      and v2' = p0'
      and i1' = v3'
      and p1' = getArr[Cogent_roa2!
                      , U32
                      , (CPtr U32)!]{{}} (v2', i1')
      and v4' = p1'
      in v4'
   in r'
cogent_f83ln : Cogent_roa6! -> (CPtr U32)!
cogent_f83ln pro =
   let r' = let (c'
                , pro) = let v' = cogent_frln
         and v1' = v' ()
         and v5' = 1
         and v3' = 1
         and v2' = pro
         and i0' = v3'
         and p0' = getArr[Cogent_roa6!
                         , U32
                         , Cogent_roa3!]{{}} (v2', i0')
         and v4' = p0'
         and i1' = v5'
         and p1' = getArr[Cogent_roa3!
                         , U32
                         , (CPtr U32)!]{{}} (v4', i1')
         and v7' = v1'
         and err' = gencotDummy "Linear expression used in readonly context"
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v12' = 1
               and v10' = 1
               and v9' = pro
               and i2' = v10'
               and p2' = getArr[Cogent_roa6!
                               , U32
                               , Cogent_roa3!]{{}} (v9', i2')
               and v11' = p2'
               and i3' = v12'
               and p3' = getArr[Cogent_roa3!
                               , U32
                               , (CPtr U32)!]{{}} (v11', i3')
               and v13' = p3'
               in v13'
            in r'
   in r'
cogent_f83ro : Cogent_roa6! -> (CPtr U32)!
cogent_f83ro pro =
   let r' = let v3' = 1
      and v1' = 1
      and v' = pro
      and i0' = v1'
      and p0' = getArr[Cogent_roa6!
                      , U32
                      , Cogent_roa3!]{{}} (v', i0')
      and v2' = p0'
      and i1' = v3'
      and p1' = getArr[Cogent_roa3!
                      , U32
                      , (CPtr U32)!]{{}} (v2', i1')
      and v4' = p1'
      in v4'
   in r'

-- probe assigned to struct component or array element
cogent_f91ln : Struct_Cogent_ros1 -> ( (), Struct_Cogent_ros1 )
cogent_f91ln pln =
   let pln = let v' = cogent_frro
      and v1' = v' ()
      and v2' = pln
      and pln { mln = p0' } = v2'
      and v4' = v1'
      and p0' = gencotDummy "Readonly expression used in linear context"
      and pln = pln { mln = p0' }
      in pln
   in ((), pln)
cogent_f91ro : Struct_Cogent_ros1 -> ( (), Struct_Cogent_ros1 )
cogent_f91ro pln =
   let pln = let v' = cogent_frro
      and v1' = v' ()
      and v2' = pln
      and v4' = v1'
      and p0' = v4'
      and pln = pln { mro = p0' }
      in pln
   in ((), pln)
cogent_f92ln : Cogent_roa3 -> ( (), Cogent_roa3 )
cogent_f92ln pln =
   let pln = let v' = cogent_frro
      and v1' = v' ()
      and v3' = 1
      and v2' = pln
      and i0' = v3'
      and (pln
          , ()) = modifyArr[Cogent_roa3
                           , U32
                           , CPtr U32
                           , ()
                           , ()]{{}} (pln
                                     , i0'
                                     , \(p0', ()) => let v5' = v1'
                                     and p0' = gencotDummy "Readonly expression used in linear context"
                                     in (p0', ())
                                     , ())
      in pln
   in ((), pln)
cogent_f92ro : Cogent_roa2 -> ( (), Cogent_roa2 )
cogent_f92ro pln =
   let pln = let v' = cogent_frro
      and v1' = v' ()
      and v3' = 1
      and v2' = pln
      and i0' = v3'
      and v5' = v1'
      and p0' = v5'
      and pln = pln @{ @i0' = p0' }
      in pln
   in ((), pln)

-- Using values of linear type (can be banged).

-- Direct use of probe in context
cogent_g11ln : CPtr U32 -> U32
cogent_g11ln pln =
   let r' = let v' = cogent_fcln
      and v1' = pln
      and v2' = v' v1'
      in v2'
   in r'
cogent_g11ro : CPtr U32 -> U32
cogent_g11ro pln =
   let r' = (let v' = cogent_fcro
         and v1' = pln
         and v2' = v' v1'
         in v2') !pln
   in r'
cogent_g12ln : () -> U32
cogent_g12ln () =
   let r' = let v' = cogent_fcln
      and v1' = cogent_globln ()
      and v2' = v' v1'
      in v2'
   in r'
cogent_g12ro : () -> U32
cogent_g12ro () =
   let r' = let v' = cogent_fcro
      and v1' = cogent_globln ()
      and v2' = v' (gencotDummy "Linear expression used in readonly context")
      in v2'
   in r'
cogent_g13ln : () -> U32
cogent_g13ln () =
   let r' = let v' = cogent_fcln
      and v1' = cogent_frln
      and v2' = v1' ()
      and v3' = v' v2'
      in v3'
   in r'
cogent_g13ro : () -> U32
cogent_g13ro () =
   let r' = let v' = cogent_fcro
      and v1' = cogent_frln
      and v2' = v1' ()
      and v3' = v' (gencotDummy "Linear expression used in readonly context")
      in v3'
   in r'
cogent_g14ln : ( CPtr U32, CPtr U32, U32 ) -> U32
cogent_g14ln (pln, qln, i) =
   let r' = let v' = cogent_fcln
      and v4' = let v1' = i
         in if v1' /= 0
            then let v2' = pln
               in v2'
            else let v3' = qln
               in v3'
      and v5' = v' v4'
      in v5'
   in r'
cogent_g14ro : ( CPtr U32, CPtr U32, U32 ) -> U32
cogent_g14ro (pln, qln, i) =
   let r' = (let v' = cogent_fcro
         and v4' = let v1' = i
            in if v1' /= 0
               then let v2' = pln
                  in v2'
               else let v3' = qln
                  in v3'
         and v5' = v' v4'
         in v5') !pln !qln
   in r'

-- Probe assigned to variable
cogent_g21ln : GlobState1 -> ( (), GlobState1 )
cogent_g21ln g =
   let g = let v' = cogent_frln
      and v1' = v' ()
      and v2' = g
      and g { cont = p0' } = v2'
      and v4' = v1'
      and p0' = v4'
      and g = g { cont = p0' }
      in g
   in ((), g)
cogent_g21ro : GlobState2 -> ( (), GlobState2 )
cogent_g21ro g =
   let g = let v' = cogent_frln
      and v1' = v' ()
      and v2' = g
      and v4' = v1'
      and p0' = gencotDummy "Linear expression used in readonly context"
      and g = g { cont = p0' }
      in g
   in ((), g)
cogent_g22ln : CPtr U32 -> ( (), CPtr U32 )
cogent_g22ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v3' = v1'
      and pln = v3'
      in pln
   in ((), pln)
cogent_g22ro : (CPtr U32)! -> U32
cogent_g22ro pro =
   let r' = let (c'
                , pro) = let v' = cogent_frln
         and v1' = v' ()
         and v3' = v1'
         and pro = gencotDummy "Linear expression used in readonly context"
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v5' = pro
               and p0' = getPtr[(CPtr U32)!
                               , U32]{{}} v5'
               and v6' = p0'
               in v6'
            in r'
   in r'

-- Probe returned as result
cogent_g31ln : () -> CPtr U32
cogent_g31ln () =
   let r' = let v' = cogent_frln
      and v1' = v' ()
      in v1'
   in r'
cogent_g31ro : () -> (CPtr U32)!
cogent_g31ro () =
   let r' = gencotDummy "Linear expression used in readonly context"
      {- return cogent_frln(); -}
   in r'

-- Probe used by accessing a struct component
cogent_g51ln : Struct_Cogent_ros1 -> ( (), Struct_Cogent_ros1 )
cogent_g51ln pln =
   let pln = let v' = 5
      and v1' = pln
      and v3' = v'
      and p0' = v3'
      and pln = pln { mrg = p0' }
      in pln
   in ((), pln)
cogent_g51ro : Struct_Cogent_ros1 -> U32
cogent_g51ro pln =
   let r' = (let v' = pln
         and p0' = v'.mrg
         and v1' = p0'
         and () = ()
         in v1') !pln
   in r'
cogent_g52ln : Struct_Cogent_ros1 -> ( (), Struct_Cogent_ros1 )
cogent_g52ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v2' = pln
      and v4' = v1'
      and p0' = gencotDummy "Linear expression used in readonly context"
      and pln = pln { mro = p0' }
      in pln
   in ((), pln)
cogent_g52ro : Struct_Cogent_ros1 -> ( (CPtr U32)!, Struct_Cogent_ros1 )
cogent_g52ro pln =
   let (r', pln) = let v' = pln
      and pln { mro = p0' } = v'
      and v1' = p0'
      and pln = pln { mro = p0' }
      in (v1', pln)
   in (r', pln)
cogent_g53ln : Struct_Cogent_ros1 -> ( (), Struct_Cogent_ros1 )
cogent_g53ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v2' = pln
      and pln { mln = p0' } = v2'
      and v4' = v1'
      and p0' = v4'
      and pln = pln { mln = p0' }
      in pln
   in ((), pln)
cogent_g53ro : Struct_Cogent_ros1 -> ( CPtr U32, Struct_Cogent_ros1 )
cogent_g53ro pln =
   let (r', pln) = let v' = pln
      and pln { mln = p0' } = v'
      and v1' = p0'
      and pln = pln { mln = p0' }
      in (v1', pln)
   in (r', pln)
cogent_g54ln : Struct_Cogent_ros1 -> ( U32, Struct_Cogent_ros1 )
cogent_g54ln pln =
   let pln = let v' = 5
      and v1' = pln
      and pln { mln = p0' } = v1'
      and v2' = p0'
      and v4' = v'
      and p1' = v4'
      and p0' = p0' { cont = p1' }
      and pln = pln { mln = p0' }
      in pln
   in (r', pln)
cogent_g54ro : Struct_Cogent_ros1 -> ( U32, Struct_Cogent_ros1 )
cogent_g54ro pln =
   let () = (let v' = pln
         and p0' = v'.mln
         and v1' = p0'
         and p1' = getPtr[(CPtr U32)!
                         , U32]{{}} v1'
         and () = ()
         in ()) !pln
   in (r', pln)
cogent_g55ln : Struct_Cogent_ros1 -> U32
cogent_g55ln pln =
   let r' = let v' = cogent_fcln
      and v1' = pln
      and pln { mln = p0' } = v1'
      and v2' = p0'
      and pln = pln { mln = p0' }
      and v3' = v' v2'
      in v3'
   in r'
cogent_g55ro : Struct_Cogent_ros1 -> U32
cogent_g55ro pln =
   let r' = (let v' = cogent_fcro
         and v1' = pln
         and p0' = v1'.mln
         and v2' = p0'
         and () = ()
         and v3' = v' v2'
         in v3') !pln
   in r'
cogent_g56ln : ( Struct_Cogent_ros1, GlobState1 ) -> ( (), GlobState1 )
cogent_g56ln (pln, g) =
   let g = let v' = pln
      and pln { mln = p0' } = v'
      and v1' = p0'
      and pln = pln { mln = p0' }
      and v2' = g
      and g { cont = p1' } = v2'
      and v4' = v1'
      and p1' = v4'
      and g = g { cont = p1' }
      in g
   in ((), g)
cogent_g56ro : ( Struct_Cogent_ros1, GlobState2 ) -> ( (), GlobState2 )
cogent_g56ro (pln, g) =
   let g = (let v' = gencotDummy "Necessary banging of pln leads to non-escapeable type"
            {- *g = pln->mln; -}
         and p0' = v'.mln
         and v1' = p0'
         and () = ()
         and v2' = g
         and v4' = v1'
         and p1' = v4'
         and g = g { cont = p1' }
         in g) !pln
   in ((), g)
cogent_g57ln : ( Struct_Cogent_ros1, CPtr U32 ) -> ( (), CPtr U32 )
cogent_g57ln (pln, qln) =
   let qln = let v' = pln
      and pln { mln = p0' } = v'
      and v1' = p0'
      and pln = pln { mln = p0' }
      and v3' = v1'
      and qln = v3'
      in qln
   in ((), qln)
cogent_g57ro : ( Struct_Cogent_ros1, (CPtr U32)! ) -> U32
cogent_g57ro (pln, qro) =
   let r' = (let (c'
                 , qro) = let v' = pln
            and p0' = v'.mln
            and v1' = p0'
            and () = ()
            and v3' = v1'
            and qro = v3'
            in (0, qro)
         in if c' > 0
            then r'
            else let r' = let v5' = qro
                  and p1' = getPtr[(CPtr U32)!
                                  , U32]{{}} v5'
                  and v6' = p1'
                  in v6'
               in r') !pln
   in r'
cogent_g58ln : Struct_Cogent_ros1 -> CPtr U32
cogent_g58ln pln =
   let r' = let v' = pln
      and pln { mln = p0' } = v'
      and v1' = p0'
      and pln = pln { mln = p0' }
      in v1'
   in r'
cogent_g58ro : Struct_Cogent_ros1 -> (CPtr U32)!
cogent_g58ro pln =
   let r' = gencotDummy "Linear expression used in readonly context"
      {- return pln->mln; -}
   in r'
cogent_g59ln : ( Struct_Cogent_ros1, CPtr U32, U32 ) -> ( U32, CPtr U32 )
cogent_g59ln (pln, qln, i) =
   let r' = (let v' = cogent_fcro
         and v5' = let v1' = i
            in if v1' /= 0
               then let v2' = pln
                  and p0' = v2'.mln
                  and v3' = p0'
                  and () = ()
                  in v3'
               else let v4' = qln
                  in v4'
         and v6' = v' v5'
         in v6') !pln !qln
   in (r', qln)
cogent_g59ro : ( Struct_Cogent_ros1, (CPtr U32)!, U32 ) -> U32
cogent_g59ro (pln, qro, i) =
   let r' = (let v' = cogent_fcro
         and v5' = let v1' = i
            in if v1' /= 0
               then let v2' = pln
                  and p0' = v2'.mln
                  and v3' = p0'
                  and () = ()
                  in v3'
               else let v4' = qro
                  in v4'
         and v6' = v' v5'
         in v6') !pln
   in r'

cogent_g61ln : Struct_Cogent_ros2 -> ( (), Struct_Cogent_ros2 )
cogent_g61ln pln =
   let pln = let v' = 5
      and v1' = pln
      and pln { sln = p0' } = v1'
      and v2' = p0'
      and v4' = v'
      and p1' = v4'
      and p0' = p0' { mrg = p1' }
      and pln = pln { sln = p0' }
      in pln
   in ((), pln)
cogent_g61ro : Struct_Cogent_ros2 -> ( U32, Struct_Cogent_ros2 )
cogent_g61ro pln =
   let (r', ()) = (let v' = pln
         and p0' = v'.sln
         and v1' = p0'
         and p1' = v1'.mrg
         and v2' = p1'
         and () = ()
         in (v2', ())) !pln
   in (r', pln)
cogent_g62ln : Struct_Cogent_ros2 -> ( (), Struct_Cogent_ros2 )
cogent_g62ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v2' = pln
      and pln { sln = p0' } = v2'
      and v3' = p0'
      and v5' = v1'
      and p1' = gencotDummy "Linear expression used in readonly context"
      and p0' = p0' { mro = p1' }
      and pln = pln { sln = p0' }
      in pln
   in ((), pln)
cogent_g62ro : Struct_Cogent_ros2 -> ( (CPtr U32)!, Struct_Cogent_ros2 )
cogent_g62ro pln =
   let (r', pln) = let v' = pln
      and pln { sln = p0' } = v'
      and v1' = p0'
      and p0' { mro = p1' } = v1'
      and v2' = p1'
      and p0' = p0' { mro = p1' }
      and pln = pln { sln = p0' }
      in (v2', pln)
   in (r', pln)
cogent_g63ln : Struct_Cogent_ros2 -> ( (), Struct_Cogent_ros2 )
cogent_g63ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v2' = pln
      and pln { sln = p0' } = v2'
      and v3' = p0'
      and p0' { mln = p1' } = v3'
      and v5' = v1'
      and p1' = v5'
      and p0' = p0' { mln = p1' }
      and pln = pln { sln = p0' }
      in pln
   in ((), pln)
cogent_g63ro : Struct_Cogent_ros2 -> ( CPtr U32, Struct_Cogent_ros2 )
cogent_g63ro pln =
   let (r', pln) = let v' = pln
      and pln { sln = p0' } = v'
      and v1' = p0'
      and p0' { mln = p1' } = v1'
      and v2' = p1'
      and p0' = p0' { mln = p1' }
      and pln = pln { sln = p0' }
      in (v2', pln)
   in (r', pln)
cogent_g64ln : Struct_Cogent_ros2 -> ( (), Struct_Cogent_ros2 )
cogent_g64ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v2' = pln
      and pln { sub = p0' } = v2'
      and v3' = p0'
      and v5' = v1'
      and p1' = gencotDummy "Linear expression used in readonly context"
      and p0' = p0' { mro = p1' }
      and pln = pln { sub = p0' }
      in pln
   in ((), pln)
cogent_g64ro : Struct_Cogent_ros2 -> ( (CPtr U32)!, Struct_Cogent_ros2 )
cogent_g64ro pln =
   let (r', pln) = let v' = pln
      and pln { sub = p0' } = v'
      and v1' = p0'
      and p0' { mro = p1' } = v1'
      and v2' = p1'
      and p0' = p0' { mro = p1' }
      and pln = pln { sub = p0' }
      in (v2', pln)
   in (r', pln)

-- Probe used by accessing an array element
cogent_g71ln : Cogent_roa1 -> ( (), Cogent_roa1 )
cogent_g71ln pln =
   let pln = let v' = 5
      and v2' = 1
      and v1' = pln
      and i0' = v2'
      and v4' = v'
      and p0' = v4'
      and pln = pln @{ @i0' = p0' }
      in pln
   in ((), pln)
cogent_g71ro : Cogent_roa1 -> U32
cogent_g71ro pln =
   let r' = (let v1' = 1
         and v' = pln
         and i0' = v1'
         and p0' = getArr[Cogent_roa1!
                         , U32
                         , U32]{{}} (v', i0')
         and v2' = p0'
         and () = ()
         in v2') !pln
   in r'
cogent_g72ln : Cogent_roa2 -> ( (), Cogent_roa2 )
cogent_g72ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v3' = 1
      and v2' = pln
      and i0' = v3'
      and v5' = v1'
      and p0' = gencotDummy "Linear expression used in readonly context"
      and pln = pln @{ @i0' = p0' }
      in pln
   in ((), pln)
cogent_g72ro : Cogent_roa2 -> (CPtr U32)!
cogent_g72ro pln =
   let r' = let v1' = 1
      and v' = pln
      and i0' = v1'
      and (pln
          , v2') = modifyArr[Cogent_roa2
                            , U32
                            , (CPtr U32)!
                            , ()
                            , (CPtr U32)!]{{}} (pln
                                               , i0'
                                               , \(p0', ()) => let v2' = p0'
                                               in (p0', v2')
                                               , ())
      in v2'
   in r'
cogent_g73ln : Cogent_roa3 -> ( (), Cogent_roa3 )
cogent_g73ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v3' = 1
      and v2' = pln
      and i0' = v3'
      and (pln
          , ()) = modifyArr[Cogent_roa3
                           , U32
                           , CPtr U32
                           , CPtr U32
                           , ()]{{}} (pln
                                     , i0'
                                     , \(p0', v1') => let v5' = v1'
                                     and p0' = v5'
                                     in (p0', ())
                                     , v1')
      in pln
   in ((), pln)
cogent_g73ro : Cogent_roa3 -> CPtr U32
cogent_g73ro pln =
   let r' = let v1' = 1
      and v' = pln
      and i0' = v1'
      and (pln
          , v2') = modifyArr[Cogent_roa3
                            , U32
                            , CPtr U32
                            , ()
                            , CPtr U32]{{}} (pln
                                            , i0'
                                            , \(p0', ()) => let v2' = p0'
                                            in (p0', v2')
                                            , ())
      in v2'
   in r'
cogent_g74ln : Cogent_roa3 -> ( (), Cogent_roa3 )
cogent_g74ln pln =
   let pln = let v' = 5
      and v2' = 1
      and v1' = pln
      and i0' = v2'
      and (pln
          , ()) = modifyArr[Cogent_roa3
                           , U32
                           , CPtr U32
                           , U32
                           , ()]{{}} (pln
                                     , i0'
                                     , \(p0', v') => let v3' = p0'
                                     and v5' = v'
                                     and p1' = v5'
                                     and p0' = p0' { cont = p1' }
                                     in (p0', ())
                                     , v')
      in pln
   in ((), pln)
cogent_g74ro : Cogent_roa3 -> U32
cogent_g74ro pln =
   let r' = (let v1' = 1
         and v' = pln
         and i0' = v1'
         and p0' = getArr[Cogent_roa3!
                         , U32
                         , (CPtr U32)!]{{}} (v', i0')
         and v2' = p0'
         and p1' = getPtr[(CPtr U32)!
                         , U32]{{}} v2'
         and v3' = p1'
         and () = ()
         in v3') !pln
   in r'
cogent_g75ln : Cogent_roa3 -> U32
cogent_g75ln pln =
   let r' = let v' = cogent_fcln
      and v2' = 1
      and v1' = pln
      and i0' = v2'
      and (pln
          , v3') = modifyArr[Cogent_roa3
                            , U32
                            , CPtr U32
                            , ()
                            , CPtr U32]{{}} (pln
                                            , i0'
                                            , \(p0', ()) => let v3' = p0'
                                            in (p0', v3')
                                            , ())
      and v4' = v' v3'
      in v4'
   in r'
cogent_g75ro : Cogent_roa3 -> U32
cogent_g75ro pln =
   let r' = (let v' = cogent_fcro
         and v2' = 1
         and v1' = pln
         and i0' = v2'
         and p0' = getArr[Cogent_roa3!
                         , U32
                         , (CPtr U32)!]{{}} (v1', i0')
         and v3' = p0'
         and () = ()
         and v4' = v' v3'
         in v4') !pln
   in r'
cogent_g76ln : ( Cogent_roa3, GlobState1 ) -> ( (), GlobState1 )
cogent_g76ln (pln, g) =
   let g = let v1' = 1
      and v' = pln
      and i0' = v1'
      and (pln
          , v2') = modifyArr[Cogent_roa3
                            , U32
                            , CPtr U32
                            , ()
                            , CPtr U32]{{}} (pln
                                            , i0'
                                            , \(p0', ()) => let v2' = p0'
                                            in (p0', v2')
                                            , ())
      and v3' = g
      and g { cont = p1' } = v3'
      and v5' = v2'
      and p1' = v5'
      and g = g { cont = p1' }
      in g
   in ((), g)
cogent_g76ro : ( Cogent_roa3, GlobState2 ) -> ( (), GlobState2 )
cogent_g76ro (pln, g) =
   let g = (let v1' = 1
         and v' = gencotDummy "Necessary banging of pln leads to non-escapeable type"
            {- pln; -}
         and i0' = v1'
         and p0' = getArr[Cogent_roa3!
                         , U32
                         , (CPtr U32)!]{{}} (v', i0')
         and v2' = p0'
         and () = ()
         and v3' = g
         and v5' = v2'
         and p1' = v5'
         and g = g { cont = p1' }
         in g) !pln
   in ((), g)
cogent_g77ln : ( Cogent_roa3, CPtr U32 ) -> ( (), CPtr U32 )
cogent_g77ln (pln, qln) =
   let qln = let v1' = 1
      and v' = pln
      and i0' = v1'
      and (pln
          , v2') = modifyArr[Cogent_roa3
                            , U32
                            , CPtr U32
                            , ()
                            , CPtr U32]{{}} (pln
                                            , i0'
                                            , \(p0', ()) => let v2' = p0'
                                            in (p0', v2')
                                            , ())
      and v4' = v2'
      and qln = v4'
      in qln
   in ((), qln)
cogent_g77ro : ( Cogent_roa3, (CPtr U32)! ) -> U32
cogent_g77ro (pln, qro) =
   let r' = (let (c'
                 , qro) = let v1' = 1
            and v' = pln
            and i0' = v1'
            and p0' = getArr[Cogent_roa3!
                            , U32
                            , (CPtr U32)!]{{}} (v', i0')
            and v2' = p0'
            and () = ()
            and v4' = v2'
            and qro = v4'
            in (0, qro)
         in if c' > 0
            then r'
            else let r' = let v6' = qro
                  and p1' = getPtr[(CPtr U32)!
                                  , U32]{{}} v6'
                  and v7' = p1'
                  in v7'
               in r') !pln
   in r'
cogent_g78ln : Cogent_roa3 -> CPtr U32
cogent_g78ln pln =
   let r' = let v1' = 1
      and v' = pln
      and i0' = v1'
      and (pln
          , v2') = modifyArr[Cogent_roa3
                            , U32
                            , CPtr U32
                            , ()
                            , CPtr U32]{{}} (pln
                                            , i0'
                                            , \(p0', ()) => let v2' = p0'
                                            in (p0', v2')
                                            , ())
      in v2'
   in r'
cogent_g78ro : Cogent_roa3 -> (CPtr U32)!
cogent_g78ro pln =
   let r' = gencotDummy "Linear expression used in readonly context"
      {- return pln[1]; -}
   in r'
cogent_g79ln : ( Cogent_roa3, CPtr U32, U32 ) -> ( U32, CPtr U32 )
cogent_g79ln (pln, qln, i) =
   let r' = (let v' = cogent_fcro
         and v6' = let v1' = i
            in if v1' /= 0
               then let v3' = 1
                  and v2' = pln
                  and i0' = v3'
                  and p0' = getArr[Cogent_roa3!
                                  , U32
                                  , (CPtr U32)!]{{}} (v2', i0')
                  and v4' = p0'
                  and () = ()
                  in v4'
               else let v5' = qln
                  in v5'
         and v7' = v' v6'
         in v7') !pln !qln
   in (r', qln)
cogent_g79ro : ( Cogent_roa3, (CPtr U32)!, U32 ) -> U32
cogent_g79ro (pln, qro, i) =
   let r' = (let v' = cogent_fcro
         and v6' = let v1' = i
            in if v1' /= 0
               then let v3' = 1
                  and v2' = pln
                  and i0' = v3'
                  and p0' = getArr[Cogent_roa3!
                                  , U32
                                  , (CPtr U32)!]{{}} (v2', i0')
                  and v4' = p0'
                  and () = ()
                  in v4'
               else let v5' = qro
                  in v5'
         and v7' = v' v6'
         in v7') !pln
   in r'

cogent_g81ln : Cogent_roa4 -> ( (), Cogent_roa4 )
cogent_g81ln pln =
   let pln = let v' = 5
      and v4' = 1
      and v2' = 1
      and v1' = pln
      and i0' = v2'
      and (pln
          , ()) = modifyArr[Cogent_roa4
                           , U32
                           , Cogent_roa1
                           , ( U32, U32 )
                           , ()]{{}} (pln
                                     , i0'
                                     , \(p0'
                                        , v4'
                                        , v') => let v3' = p0'
                                     and i1' = v4'
                                     and v6' = v'
                                     and p1' = v6'
                                     and p0' = p0' @{ @i1' = p1' }
                                     in (p0', ())
                                     , v4'
                                     , v')
      in pln
   in ((), pln)
cogent_g81ro : Cogent_roa4 -> U32
cogent_g81ro pln =
   let r' = (let v3' = 1
         and v1' = 1
         and v' = pln
         and i0' = v1'
         and p0' = getArr[Cogent_roa4!
                         , U32
                         , Cogent_roa1!]{{}} (v', i0')
         and v2' = p0'
         and i1' = v3'
         and p1' = getArr[Cogent_roa1!
                         , U32
                         , U32]{{}} (v2', i1')
         and v4' = p1'
         and () = ()
         in v4') !pln
   in r'
cogent_g82ln : Cogent_roa5 -> ( (), Cogent_roa5 )
cogent_g82ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v5' = 1
      and v3' = 1
      and v2' = pln
      and i0' = v3'
      and (pln
          , ()) = modifyArr[Cogent_roa5
                           , U32
                           , Cogent_roa2
                           , U32
                           , ()]{{}} (pln
                                     , i0'
                                     , \(p0', v5') => let v4' = p0'
                                     and i1' = v5'
                                     and v7' = v1'
                                     and p1' = gencotDummy "Linear expression used in readonly context"
                                     and p0' = p0' @{ @i1' = p1' }
                                     in (p0', ())
                                     , v5')
      in pln
   in ((), pln)
cogent_g82ro : Cogent_roa5 -> (CPtr U32)!
cogent_g82ro pln =
   let r' = let v3' = 1
      and v1' = 1
      and v' = pln
      and i0' = v1'
      and (pln
          , v4') = modifyArr[Cogent_roa5
                            , U32
                            , Cogent_roa2
                            , U32
                            , (CPtr U32)!]{{}} (pln
                                               , i0'
                                               , \(p0', v3') => let v2' = p0'
                                               and i1' = v3'
                                               and (p0'
                                                   , v4') = modifyArr[Cogent_roa2
                                                                     , U32
                                                                     , (CPtr U32)!
                                                                     , ()
                                                                     , (CPtr U32)!]{{}} (p0'
                                                                                        , i1'
                                                                                        , \(p1'
                                                                                           , ()) => let v4' = p1'
                                                                                        in (p1'
                                                                                           , v4')
                                                                                        , ())
                                               in (p0', v4')
                                               , v3')
      in v4'
   in r'
cogent_g83ln : Cogent_roa6 -> ( (), Cogent_roa6 )
cogent_g83ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v5' = 1
      and v3' = 1
      and v2' = pln
      and i0' = v3'
      and (pln
          , ()) = modifyArr[Cogent_roa6
                           , U32
                           , Cogent_roa3
                           , ( U32, CPtr U32 )
                           , ()]{{}} (pln
                                     , i0'
                                     , \(p0'
                                        , v5'
                                        , v1') => let v4' = p0'
                                     and i1' = v5'
                                     and (p0'
                                         , ()) = modifyArr[Cogent_roa3
                                                          , U32
                                                          , CPtr U32
                                                          , CPtr U32
                                                          , ()]{{}} (p0'
                                                                    , i1'
                                                                    , \(p1'
                                                                       , v1') => let v7' = v1'
                                                                    and p1' = v7'
                                                                    in (p1', ())
                                                                    , v1')
                                     in (p0', ())
                                     , v5'
                                     , v1')
      in pln
   in ((), pln)
cogent_g83ro : Cogent_roa6 -> CPtr U32
cogent_g83ro pln =
   let r' = let v3' = 1
      and v1' = 1
      and v' = pln
      and i0' = v1'
      and (pln
          , v4') = modifyArr[Cogent_roa6
                            , U32
                            , Cogent_roa3
                            , U32
                            , CPtr U32]{{}} (pln
                                            , i0'
                                            , \(p0', v3') => let v2' = p0'
                                            and i1' = v3'
                                            and (p0'
                                                , v4') = modifyArr[Cogent_roa3
                                                                  , U32
                                                                  , CPtr U32
                                                                  , ()
                                                                  , CPtr U32]{{}} (p0'
                                                                                  , i1'
                                                                                  , \(p1'
                                                                                     , ()) => let v4' = p1'
                                                                                  in (p1'
                                                                                     , v4')
                                                                                  , ())
                                            in (p0', v4')
                                            , v3')
      in v4'
   in r'

-- probe assigned to struct component or array element
cogent_g91ln : Struct_Cogent_ros1 -> ( (), Struct_Cogent_ros1 )
cogent_g91ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v2' = pln
      and pln { mln = p0' } = v2'
      and v4' = v1'
      and p0' = v4'
      and pln = pln { mln = p0' }
      in pln
   in ((), pln)
cogent_g91ro : Struct_Cogent_ros1 -> ( (), Struct_Cogent_ros1 )
cogent_g91ro pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v2' = pln
      and v4' = v1'
      and p0' = gencotDummy "Linear expression used in readonly context"
      and pln = pln { mro = p0' }
      in pln
   in ((), pln)
cogent_g92ln : Cogent_roa3 -> ( (), Cogent_roa3 )
cogent_g92ln pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v3' = 1
      and v2' = pln
      and i0' = v3'
      and (pln
          , ()) = modifyArr[Cogent_roa3
                           , U32
                           , CPtr U32
                           , CPtr U32
                           , ()]{{}} (pln
                                     , i0'
                                     , \(p0', v1') => let v5' = v1'
                                     and p0' = v5'
                                     in (p0', ())
                                     , v1')
      in pln
   in ((), pln)
cogent_g92ro : Cogent_roa2 -> ( (), Cogent_roa2 )
cogent_g92ro pln =
   let pln = let v' = cogent_frln
      and v1' = v' ()
      and v3' = 1
      and v2' = pln
      and i0' = v3'
      and v5' = v1'
      and p0' = gencotDummy "Linear expression used in readonly context"
      and pln = pln @{ @i0' = p0' }
      in pln
   in ((), pln)

-- banging in nested bang positions
cogent_nst11 : ( Struct_Cogent_ros1, U32 ) -> ( Struct_Cogent_ros1, Struct_Cogent_ros1 )
cogent_nst11 (pln, i) =
   let (pln, r') = let (c'
                       , ()
                       , i) = (let v' = pln
            and p0' = v'.mrg
            and v1' = p0'
            and () = ()
            and v3' = v1'
            and i = v3'
            in (0, (), i)) !pln
      in if c' > 0
         then (pln, r')
         else let (pln, r') = let (c'
                                  , pln) = let v5' = i
                  and v6' = pln
                  and pln { mln = p1' } = v6'
                  and v7' = p1'
                  and v9' = v5'
                  and p2' = v9'
                  and p1' = p1' { cont = p2' }
                  and pln = pln { mln = p1' }
                  in (0, pln)
               in if c' > 0
                  then (pln, r')
                  else let r' = let v11' = pln
                        in v11'
                     in (pln, r')
            in (pln, r')
   in (r', pln)
cogent_nst12 : ( Struct_Cogent_ros1, U32 ) -> ( Struct_Cogent_ros1, Struct_Cogent_ros1 )
cogent_nst12 (pln, i) =
   let (pln, r') = let (c'
                       , ()
                       , i) = (let v' = pln
            and p0' = v'.mrg
            and v1' = p0'
            and () = ()
            and v3' = v1'
            and i = v3'
            in (0, (), i)) !pln
      in if c' > 0
         then (pln, r')
         else let (pln, r') = let (c'
                                  , ()
                                  , i) = (let v5' = pln
                     and p1' = v5'.mro
                     and v6' = p1'
                     and p2' = getPtr[(CPtr U32)!
                                     , U32]{{}} v6'
                     and v7' = p2'
                     and () = ()
                     and v8' = i
                     and v9' = v8' + v7'
                     and i = v9'
                     in (0, (), i)) !pln
               in if c' > 0
                  then (pln, r')
                  else let (pln, r') = let (c'
                                           , pln) = let v11' = i
                           and v12' = pln
                           and pln { mln = p3' } = v12'
                           and v13' = p3'
                           and v15' = v11'
                           and p4' = v15'
                           and p3' = p3' { cont = p4' }
                           and pln = pln { mln = p3' }
                           in (0, pln)
                        in if c' > 0
                           then (pln, r')
                           else let r' = let v17' = pln
                                 in v17'
                              in (pln, r')
                     in (pln, r')
            in (pln, r')
   in (r', pln)

-- banging in binding sequences
cogent_bs11 : ( Struct_Cogent_ros1, U32 ) -> ( Struct_Cogent_ros1, Struct_Cogent_ros1 )
cogent_bs11 (pln, i) =
   let (r', pln) = let v' = pln
      and pln { mrg = p0' } = v'
      and v1' = p0'
      and pln = pln { mrg = p0' }
      and v3' = v1'
      and i = v3'
      and v5' = i
      and v6' = pln
      and pln { mln = p1' } = v6'
      and v7' = p1'
      and v9' = v5'
      and p2' = v9'
      and p1' = p1' { cont = p2' }
      and pln = pln { mln = p1' }
      and v11' = pln
      in (v11', pln)
   in (r', pln)
cogent_bs12 : ( Struct_Cogent_ros1, (CPtr U32)!, U32 ) -> ( Struct_Cogent_ros1, Struct_Cogent_ros1 )
cogent_bs12 (pln, qro, i) =
   let (r', pln) = let (v13'
                       , ()) = (let v' = pln
            and p0' = v'.mln
            and v1' = p0'
            and () = ()
            and v3' = v1'
            and qro = v3'
            and v5' = qro
            and p1' = getPtr[(CPtr U32)!
                            , U32]{{}} v5'
            and v6' = p1'
            and v8' = v6'
            and i = v8'
            and v10' = i
            and v11' = pln
            and p2' = v11'.mrg
            and v13' = v10'
            in (v13', ())) !pln
      and p2' = v13'
      and pln = pln { mrg = p2' }
      and v15' = pln
      in (v15', pln)
   in (r', pln)
cogent_bs13 : ( Struct_Cogent_ros1, (CPtr U32)!, CPtr U32 ) -> ( Struct_Cogent_ros1, Struct_Cogent_ros1, CPtr U32 )
cogent_bs13 (pln, qro, i) =
   let (r', pln, i) = let (v14'
                          , ()
                          , i) = (let v' = pln
            and p0' = v'.mln
            and v1' = p0'
            and () = ()
            and v3' = v1'
            and qro = v3'
            and v5' = qro
            and p1' = getPtr[(CPtr U32)!
                            , U32]{{}} v5'
            and v6' = p1'
            and v7' = i
            and v9' = v6'
            and p2' = v9'
            and i = i { cont = p2' }
            and v11' = i
            and v12' = pln
            and p3' = v12'.mln
            and v14' = v11'
            in (v14', (), i)) !pln
      and p3' = v14'
      and pln = pln { mln = p3' }
      and v16' = pln
      in (v16', pln, i)
   in (r', pln, i)

-- Direct use of NULL in context
cogent_n11ln : () -> U32
cogent_n11ln () =
   let r' = let v' = cogent_fcmln
      and v1' = cogent_NULL
      and v2' = v' v1'
      in v2'
   in r'
cogent_n11ro : () -> U32
cogent_n11ro () =
   let r' = let v' = cogent_fcmro
      and v1' = cogent_NULL
      and v2' = v' v1'
      in v2'
   in r'
cogent_n14ln : ( MayNull (CPtr U32), U32 ) -> ( U32, MayNull (CPtr U32) )
cogent_n14ln (qln, i) =
   let r' = let v' = cogent_fcmln
      and v4' = let v1' = i
         in if v1' /= 0
            then let v2' = cogent_NULL
               in v2'
            else let v3' = qln
               in v3'
      and v5' = v' v4'
      in v5'
   in (r', qln)
cogent_n14ro : ( MayNull (CPtr U32), U32 ) -> ( U32, MayNull (CPtr U32) )
cogent_n14ro (qln, i) =
   let r' = (let v' = cogent_fcmro
         and v4' = let v1' = i
            in if v1' /= 0
               then let v2' = cogent_NULL
                  in v2'
               else let v3' = qln
                  in v3'
         and v5' = v' v4'
         in v5') !qln
   in (r', qln)

-- NULL assigned to variable
cogent_n21ln : GlobState3 -> ( (), GlobState3 )
cogent_n21ln g =
   let g = let v' = cogent_NULL
      and v1' = g
      and g { cont = p0' } = v1'
      and v3' = v'
      and p0' = v3'
      and g = g { cont = p0' }
      in g
   in ((), g)
cogent_n21ro : GlobState4 -> ( (), GlobState4 )
cogent_n21ro g =
   let g = let v' = cogent_NULL
      and v1' = g
      and v3' = v'
      and p0' = v3'
      and g = g { cont = p0' }
      in g
   in ((), g)
cogent_n22ln : MayNull (CPtr U32) -> ( (), MayNull (CPtr U32) )
cogent_n22ln pln =
   let pln = let v' = cogent_NULL
      and v2' = v'
      and pln = v2'
      in pln
   in ((), pln)
cogent_n22ro : (MayNull ((CPtr U32)!))! -> U32
cogent_n22ro pro =
   let r' = let (c'
                , pro) = let v' = cogent_NULL
         and v2' = v'
         and pro = v2'
         in (0, pro)
      in if c' > 0
         then r'
         else let r' = let v4' = pro
               and p0' = gencotDummy "Dereferencing pointer which may be NULL"
               and v5' = p0'
               in v5'
            in r'
   in r'

-- NULL returned as result
cogent_n31ln : () -> MayNull (CPtr U32)
cogent_n31ln () =
   let r' = let v' = cogent_NULL
      in v'
   in r'
cogent_n31ro : () -> (MayNull ((CPtr U32)!))!
cogent_n31ro () =
   let r' = let v' = cogent_NULL
      in v'
   in r'

-- Using NULL twice
cogent_n41lnln : () -> U32
cogent_n41lnln () =
   let r' = let v' = cogent_fcmln
      and v1' = cogent_NULL
      and v2' = v' v1'
      and v3' = cogent_fcmln
      and v4' = cogent_NULL
      and v5' = v3' v4'
      and v6' = v2' + v5'
      in v6'
   in r'
cogent_n42lnro : () -> U32
cogent_n42lnro () =
   let r' = let v' = cogent_fcmln
      and v1' = cogent_NULL
      and v2' = v' v1'
      and v3' = cogent_fcmro
      and v4' = cogent_NULL
      and v5' = v3' v4'
      and v6' = v2' + v5'
      in v6'
   in r'
cogent_n43roro : () -> U32
cogent_n43roro () =
   let r' = let v' = cogent_fcmro
      and v1' = cogent_NULL
      and v2' = v' v1'
      and v3' = cogent_fcmro
      and v4' = cogent_NULL
      and v5' = v3' v4'
      and v6' = v2' + v5'
      in v6'
   in r'

-- NULL assigned to struct component or array element
cogent_n91ln : MayNull Struct_Cogent_rosm1 -> ( (), MayNull Struct_Cogent_rosm1 )
cogent_n91ln pln =
   let pln = let v' = cogent_NULL
      and v1' = pln
      and p0' = gencotDummy "Dereferencing pointer which may be NULL"
      and v3' = v'
      and p0' = v3'
      in pln
   in ((), pln)
cogent_n91ro : MayNull Struct_Cogent_rosm1 -> ( (), MayNull Struct_Cogent_rosm1 )
cogent_n91ro pln =
   let pln = let v' = cogent_NULL
      and v1' = pln
      and p0' = gencotDummy "Dereferencing pointer which may be NULL"
      and v3' = v'
      and p0' = v3'
      in pln
   in ((), pln)
cogent_n92ln : Cogent_roam3 -> ( (), Cogent_roam3 )
cogent_n92ln pln =
   let pln = let v' = cogent_NULL
      and v2' = 1
      and v1' = pln
      and i0' = v2'
      and (pln
          , ()) = modifyArr[Cogent_roam3
                           , U32
                           , MayNull (CPtr U32)
                           , MayNull CVoidPtr
                           , ()]{{}} (pln
                                     , i0'
                                     , \(p0', v') => let v4' = v'
                                     and p0' = v4'
                                     in (p0', ())
                                     , v')
      in pln
   in ((), pln)
cogent_n92ro : Cogent_roam2 -> ( (), Cogent_roam2 )
cogent_n92ro pln =
   let pln = let v' = cogent_NULL
      and v2' = 1
      and v1' = pln
      and i0' = v2'
      and v4' = v'
      and p0' = v4'
      and pln = pln @{ @i0' = p0' }
      in pln
   in ((), pln)
