#!/bin/sh

if [ -z "$GENCOT_HOME" ]
then
    echo "Cannot find Gencot installation."
    echo "Please set environment variable GENCOT_HOME to root directory of Gencot installation."
    exit
fi

BIN=$GENCOT_HOME/bin
PRC=$BIN/items-proc
GEN=$BIN/items-gen

USAGE="Usage: $0 [-k] [file|unit|used|merge|mergeto|help] <file> [<file>]"

long_usage()
{
    echo $USAGE
    echo 'Manage Gencot item property declarations in text format.'
    echo 'Commands:'
    echo '  file    <cfile>   Create default property declarations for all items defined in C sourcefile <cfile>'
    echo '  unit    <ufile>   Create default property declarations for all external items in unit described in <ufile>'
    echo '  used    <ufile>   List external toplevel items used by unit described in <ufile>'
    echo '  merge   <file1> <file2> Merge two declarations by uniting properties for each item'
    echo '  mergeto <file1> <file2> Merge properties from <file2> to items in <file1>'
    echo '  help            Display this help information'
    echo '  (all commands write the resulting property declarations or item list to stdout)'
    echo 'A <ufile> contains a list of <cfile> names, each on a separate line.'
    echo 'Options: '
    echo '  -I<dir>  Directory for searching C include files. Can be repeated, as for cpp. '
    echo '  -G<dir>  Directory for searching Gencot auxiliary files. Only one can be given, default is "."'
    echo '  -k   Keep directory with intermediate files and display it at the end.'
}

short_usage()
{
    echo $USAGE
    echo 'Run with -h for more information.'
}

# Parse options
OPTS=$(getopt -o hkI:G: -n "$0" -- "$@")

if [ $? != 0 ]
then
    short_usage
    exit 1
fi

eval set -- "$OPTS"

INCLPATH=''
GENCOTDIR='.'
KEEP=''
add_incl()
{
    if [ "$1" == "." ] 
    then INCL=""
    else INCL="$1"
    fi
    if [ -z "$INCLPATH" ]
    then INCLPATH=$1
    elif [ "$INCLPATH" == "." ]
    then INCLPATH=":$INCL"
    else INCLPATH="${INCLPATH}:$INCL"
    fi
}

while true; do
    case "$1" in
        -h) long_usage; exit;;
        -k) KEEP='yes'; shift;;
        -I) shift; add_incl "$1"; shift;;
        -G) shift; GENCOTDIR="$1"; shift;;
        --) shift; break;;
    esac
done

# Parse command
REQARGS=1
OPTARGS=''
CMD=$1

case "$CMD" in
    file) ;;
    unit) ;;
    used) ;;
    merge) REQARGS=2;;
    mergeto) REQARGS=2;;
    help) long_usage; exit;;
    *) echo "unknown items command: $1"; short_usage; exit;;
esac

shift

if [ $OPTARGS ]
then
    if [ $REQARGS -gt $# ]
    then
        echo "wrong number of arguments for items command ${CMD}: expected at least $REQARGS"
        exit
    fi
else
    if [ "$REQARGS" != "$#" ]
    then
        echo "wrong number of arguments for items command ${CMD}: expected $REQARGS"
        exit
    fi
fi

prepare_aux()
{
    if [ -e $GENCOTDIR/$CNAME.gencot-$1 ] 
    then
        if [ -e $GENCOTDIR/common.gencot-$1 ]
        then
            cat $GENCOTDIR/common.gencot-$1 $GENCOTDIR/$CNAME.gencot-$1 > $TMPDIR/$CNAME.gencot-$1
        else
            cp $GENCOTDIR/$CNAME.gencot-$1 $TMPDIR/$CNAME.gencot-$1
        fi
    else
        if [ -e $GENCOTDIR/common.gencot-$1 ]
        then
            cp $GENCOTDIR/common.gencot-$1 $TMPDIR/$CNAME.gencot-$1
        else
            touch $TMPDIR/$CNAME.gencot-$1
        fi
    fi
}

prepare_cfile()
{
    CFILE=$1
    CBASE=$(basename $CFILE)
    CNAME=$(expr match $CBASE '\(.*\)[.][^.]*' '|' $CBASE)
    for aux in addincl omitincl noincl manmacros macroconv ppretain chsystem
    do prepare_aux $aux
    done
    cat $TMPDIR/$CNAME.gencot-addincl $CFILE | $BIN/gencot-include $INCLPATH $TMPDIR/$CNAME.gencot-noincl \
        | $BIN/gencot-remcomments | tee $TMPDIR/$CNAME.remc \
        | $BIN/gencot-selpp \
        | $BIN/gencot-selppconst $TMPDIR/$CNAME.gencot-manmacros \
        | $BIN/gencot-gendummydecls > $TMPDIR/$CNAME.dummydecls
    $BIN/gencot-rempp $TMPDIR/$CNAME.gencot-ppretain < $TMPDIR/$CNAME.remc \
        | $BIN/gencot-chsystem $TMPDIR/$CNAME.gencot-chsystem \
        | $BIN/gencot-cpp $TMPDIR/$CNAME.gencot-macroconv $TMPDIR/$CNAME.dummydecls \
        > $TMPDIR/$CNAME.in
    echo $TMPDIR/$CNAME.in >> $TMPDIR/infiles
}

prepare_manitems()
{
    if [ -e $1 ]
    then
        $BIN/gencot-prclist < $1 > $2
    else
        touch $2
    fi
}

if [ 1 ]
then
    TMPDIR=$(mktemp -d)
fi

if [ "$CMD" == "merge" ]
then
    $BIN/gencot-prclist < $2 > $TMPDIR/hfile
    $BIN/gencot-prclist < $1 | $PRC merge $TMPDIR/hfile
elif [ "$CMD" == "mergeto" ]
then
    $BIN/gencot-prclist < $1 | tee $TMPDIR/target | $PRC idlist > $TMPDIR/idlist
    $BIN/gencot-prclist < $2 | $PRC filter $TMPDIR/idlist | $PRC merge $TMPDIR/target
elif [ "$CMD" == "file" ]
then
    CFILE=$1
    CBASE=$(basename $CFILE)
    CNAME=$(expr match $CBASE '\(.*\)[.][^.]*' '|' $CBASE)
    prepare_cfile $CFILE
    $GEN $CBASE < $TMPDIR/$CNAME.in
elif [ "$CMD" == "unit" -o "$CMD" == "used" ]
then
    UFILE=$1
    UBASE=$(basename $UFILE)
    UNAME=$(expr match $UBASE '\(.*\)[.][^.]*' '|' $UBASE)
    MIFILE=$GENCOTDIR/$UNAME.gencot-manitems
    PMIFILE=$TMPDIR/$UNAME.gencot-prcman
    prepare_manitems $MIFILE $PMIFILE
    for file in $(< $1)
    do prepare_cfile $file
    done
    if [ "$CMD" == "unit" ]
    then
        $BIN/items-used $PMIFILE < $TMPDIR/infiles > $TMPDIR/useditems
        $BIN/items-externs $TMPDIR/useditems < $TMPDIR/infiles
    else
        $BIN/items-used $PMIFILE < $TMPDIR/infiles
    fi
fi

if [ 1 ]
then
    if [ $KEEP ]
    then
        echo "Kept directory with intermediate files: $TMPDIR" >&2
    else
        rm -r $TMPDIR
    fi
fi
