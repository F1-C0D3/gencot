#! /bin/sh

# Generate an Isabelle theory for the extended shallow embedding. Intended to be applied to X_ShallowShared.thy generated by Cogent.
# This is a filter from stdin to stdout with an additional filename argument.
# The argument file must contain a sequence of lines of the form
#   <id>: <id>

if [ $# != 1 ]
then
  echo "Error: Single file name expected as argument."
  exit 0
fi

awk \
'BEGIN { 
   cfile = ARGV[1]; delete ARGV[1]
   gencot_theories = "Default Memory MayNull CPointer CArray ESArray"
   common_theories = "common"
 } 
{
  if ($1 == "theory" && NF == 2) {
    if ($2 ~ /_ShallowShared$/) prfnam = substr($2,1,length($2)-14)
    else {
      printf("Error: auxcog-embedding input must be a theory named X_ShallowShared.\n")
      exited = 1
      exit 1
    }
    printf("theory %s_Shallow_Embedding\n", prfnam)
    printf("  imports \"%s_Shallow_Desugar\"\n", prfnam)
    while ((getline cline < cfile) > 0) { 
      if (2 == split(cline,a)) { 
        if (a[1] == "gencot:" && match(gencot_theories,a[2])) printf("  \"Gencot_%s\"\n", a[2])
        if (a[1] == "common:" && match(common_theories,a[2])) printf("  \"CogentCommon_%s\"\n", a[2])
      } 
    }
    close(cfile) 
    printf("  \"HOL-Library.Adhoc_Overloading\"\n")
    printf("begin\n\n")
  } else if ($1 == "type_synonym" && substr($3,1,4) == "CArr") {
    size = substr($3,5,length($3)-12)
    printf("interpretation CArrFuns%s: CArrFuns arr%s\\<^sub>f CArr%s.make .\n", size, size, size)
    printf("adhoc_overloading getArr CArrFuns%s.getArrFxd\n", size)
    printf("  and setArr CArrFuns%s.setArrFxd\n", size)
    printf("  and modifyArrDflt CArrFuns%s.modifyArrDfltFxd\n", size)
    printf("\n")
  }
}
END {
  if (exited == "") print "end"
}' $1

# documentation:
#
# The generated theory has the following form:
# - if the name of the input theory is X_ShallowShared, the name of the output 
#   theory is X_Shallow_Embedding, otherwise an error message is written to stderr.
# - the output theory imports the theories X_Shallow_Desugar, "HOL-Library.Adhoc_Overloading"
#   and for every line 
#     gencot: id
#   in the argument file the theory Gencot_id, if it exists, and for every line
#     common: id
#   in the argument file the theory CogentCommon_id, if it exists.
# - the output theory contains for every type synonym definition of the form
#     type_synonym 'el CArr<size>\<^sub>T = ...
#   in the input theory a locale interpretation of the form
#     interpretation CArrFuns<size>: CArrFuns arr<size>\<^sub>f CArr<size>.make .
#   and an adhoc overloading of the form
#     adhoc_overloading getArr CArrFuns<size>.getArrFxd
#       and setArr CArrFuns<size>.setArrFxd
#       ...
#   for all Gencot array operations.
#
# The list of existing theories which can be imported are specified by the string variables 
# gencot_theories and common_thories as a sequence of words separated by blanks.
#
# The input is read until a line of the form "theory <name>" is found. Using the <name>, the output
# theory header is generated. The argument file is read using getline to generate the corresponding
# imports.
# 
# Then the rest of the input is read and for each matching type synonym definition the 
# interpretation and adhoc overloading is generated.
# 
# In the END rule the theory is finished by an "end".
#
# Implementation in awk:
# - The theory lists gencot_theories and common_thories are defined in the BEGIN rule.
# - The filename argument for the comment file must be copied and removed from the argument list ARGV
#   to prevent its processing as normal input to awk. The argument file is explicitly read by getline.
# - Since in '...' the ' cannot be escaped, we avoid using it in match expressions and print it 
#   by reusing parts of the input.
# - To test whether an entry from the argument file is a member of a theory list the awk builtin function
#   match is used. The theory list is specified as the string, the entry is used as regexp. If a match
#   is found the function returns the index of the first position of the match (which is equivalent to true),
#   otherwise it returns 0 (which is equivalent to false). Note that this works only if no theory name 
#   is a substring of another theory name in the list.
